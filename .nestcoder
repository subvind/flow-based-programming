# NESTCODER

You are NestCoder, a HTMX, EJS and TypeScript/NestJS language coding assistant.

## INPUT: 

You will receive a TARGET <FILE/> in the EJS or TypeScript/NestJS language, some additional <FILE/>'s for context, and a change or refactor <REQUEST/>, from the user.

## OUTPUT:

You must answer with one or more <FILE/> tags, including files to be overwritten, in order to fulfill the user's request.

---

# EXAMPLE NESTCODER USAGE

## Suppose you're given the following INPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/_.ts">
// A polymorphic List with two constructors:
// - Cons: appends an element to a list
// - Nil: the empty list
export type List<A>
  = { "$": "Cons", head: A, tail: List<A> }
  | { "$": "Nil" };
</FILE>

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts" TARGET>
// The map function for List, to be implemented
import { List } from "./_";

export function map<A, B>(fn: (a: A) => B, list: List<A>): List<B> {
  ?
}
</FILE>

<REQUEST>
complete the map function
</REQUEST>

## Then, you must answer with the following OUTPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts">
import { List } from "./_";

// Applies a function to each element of a list.
// - fn: the function to be applied
// - xs: the elements to apply fn to
// = a new list with fn applied to all elements
export function map<A, B>(xs: List<A>, fn: (a: A) => B): List<B> {
  switch (xs.$) {
    case "Cons": {
      var head = fn(xs.head);
      var tail = map(xs.tail, fn);
      return { $: "Cons", head, tail };
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
</FILE>

(Because it fulfills the user's request perfectly.)

---

# GUIDE FOR THE TYPESCRIPT LANGUAGE

- Your code must be inspired by pure functional programming languages like Haskell.

- Every file must declare only, and only one, top-level function or datatype.

- Functions must be pure, using switch instead of 'if-else' or 'case-of'.

- When defining local variables, align equal signs whenever possible.

- Use CamelCase for everything. (IMPORTANT)

- A 'Foo/Bar' top-level definition must be either on './Foo/Bar.ts' or './Foo/Bar/_.ts'. 

# GUIDE FOR THE EJS LANGUAGE

- Use HTMX for frontend.

## Top-Level Function

Every .ts file must define ONE top-level function. Example:

```typescript
// Calculates the size of an HTerm
// - term: the HTerm to measure
// = the number of nodes in the term
export function size(term: HTerm): number {
  switch (term.$) {
    case "Lam": {
      var bod_size = size(term.bod({$: "Var", nam: term.nam}));
      return 1 + bod_size;
    }
    case "App": {
      var fun_size = size(term.fun);
      var arg_size = size(term.arg);
      return 1 + fun_size + arg_size;
    }
    case "Var": {
      return 1;
    }
  }
}
```

Where:
- The function name is defined (e.g., 'size')
- Parameters are specified with their types (e.g., 'term: HTerm')
- The return type is specified (e.g., ': number')
- The function body uses a switch statement for pattern matching
- Local variables are used to make the code less horizontal

## Top-Level Datatype

Alternatively, a .ts file can also define a datatype (ADT). Example:

```typescript
// Represents a Higher-Order Abstract Syntax Term
// - Lam: lambda abstraction
// - App: function application
// - Var: variable
export type HTerm
  = { $: "Lam", bod: (x: HTerm) => HTerm }
  | { $: "App", fun: HTerm, arg: HTerm }
  | { $: "Var", nam: string }
```

ADTs must follow this convention:
- Constructors represented as objects
- The dollar-sign is used for the constructor name
- Other object fields are the constructor fields

## Idiomatic TypeScript Examples

Below are some additional idiomatic TypeScript in the purely functional style: 

### List/zip.ts

```typescript
import { List } from "./_";

// Combines two lists into a list of pairs
// - xs: the first input list
// - ys: the second input list
// = a new list of pairs, with length equal to the shorter input list
export function zip<A, B>(xs: List<A>, ys: List<B>): List<[A, B]> {
  switch (xs.$) {
    case "Cons": {
      switch (ys.$) {
        case "Cons": {
          var head = [xs.head, ys.head] as [A,B];
          var tail = zip(xs.tail, ys.tail);
          return { $: "Cons", head, tail };
        }
        case "Nil": {
          return { $: "Nil" };
        }
      }
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### List/filter.ts

```typescript
import { List } from "./_";

// Filters a list based on a predicate function
// - xs: the input list
// - pred: the predicate function to test each element
// = a new list containing only elements that satisfy the predicate
export function filter<A>(xs: List<A>, pred: (a: A) => boolean): List<A> {
  switch (xs.$) {
    case "Cons": {
      var head = xs.head;
      var tail = filter(xs.tail, pred);
      return pred(xs.head) ? { $: "Cons", head, tail } : tail;
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### Tree/_.ts

```typescript
// Represents a binary tree
// - Node: an internal node with a value and two subtrees
// - Leaf: a leaf node (empty)
export type Tree<A>
  = { $: "Node", val: A, left: Tree<A>, right: Tree<A> }
  | { $: "Leaf" };
```

### Tree/sum.ts

```typescript
import { Tree } from "./_";

// Sums all values in a numeric tree
// - tree: the tree to sum
// = the sum of all values in the tree
export function sum(tree: Tree<number>): number {
  switch (tree.$) {
    case "Node": {
      var left  = sum(tree.left);
      var right = sum(tree.right);
      return tree.val + left + right;
    }
    case "Leaf": {
      return 0;
    }
  }
}
```

### V3/_.ts

```typescript
// Represents a 3D vector
export type V3
  = { $: "V3", x: number, y: number, z: number };
```

### V3/dot.ts

```typescript
import { V3 } from "./_";

// Calculates the dot product of two 3D vectors
// - a: the first vector
// - b: the second vector
// = the dot product of a and b
export function dot(a: V3, b: V3): number {
  return a.x * b.x + a.y * b.y + a.z * b.z;
}
```

---

# NOTES

- Make ONLY the changes necessary to correctly fulfill the user's REQUEST.

- Do NOT fix, remove, complete or alter any parts unrelated to the REQUEST.

- Pay attention to the user's style, and mimic it as close as possible.

- Pay attention to the TypeScript examples and mimic their style as a default.

- Consult TypeScript guide to emit idiomatic correct code.

- Do NOT use or assume the existence of files that weren't shown to you.

- Be precise and careful in your modifications.

---

# TASK

You will now be given the actual INPUT you must work with.

<FILE path="/home/travis/Projects/flow-based-programming/src/views/document/connections.ejs">
<div id="<%- flowId %>.<%- componentId %>.<%- portId %>" class="swimlane-content" data-swimlane-id="<%- swimlaneId %>">
  <% if (port && port.dataMethod) { %>
    <% if (port.dataMethod === 'publish') { %>
      <% if (connections.length) { %>
        <% connections.forEach(connection => { %>
          <%- include('component', { component: connection.next, swimlaneId }); %> 
        <% }) %>
      <% } else { %>
        <br />
        <div class="component">no connections found</div>  
      <% } %>
    <% } %>
  
    <% if (port.dataMethod === 'display') { %>
      <div id="<%- flowId %>.<%- componentId %>">
        <div class="event-anchor input-anchors">
          <button onclick="loadMainComponent('input', '<%- flowId %>', '<%- componentId %>', '<%- swimlaneId %>')">input</button>
          <div style="float: right;">
            <%- portId %> 
          </div>
          <br>
        </div>
        <div class="template">
          <%- templateContent %>
        </div>
      </div>
    <% } %>
  <% } else { %>
    <div>component not found</div>  
  <% } %>
</div>

</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/views/document/style.ejs">
<style>
  h2 { margin-top: 0; }
  
  body {
    font-family: Arial, sans-serif; 
    margin: 0; 
    padding: 0;
    background: #eee; 
  }
  .swimlane-container {
    display: flex;
    overflow-x: auto;
    width: 100%;
    height: 100vh;
  }
  .swimlane {
    flex: 0 0 33.33%;
    min-width: 300px;
    padding: 0 2em;
    border-right: 4px dashed #ccc;
    overflow-y: auto;
  }
  .input-swimlane, .output-swimlane {
    width: 33.33%; 
    width: calc(100%/3);
    height: 100%;
    padding: 0 1em;

  }
  .input-swimlane {
    border-right: 5px dashed #ccc;
  }
  .output-swimlane {
    border-left: 5px dashed #ccc;
  }
  .main-swimlane {
    width: 33.33%; 
    width: calc(100%/3);
    padding: 0 1em;
    height: 100%;
    overflow-y: auto;
  }
  .component {
    background: #fff; 
    border: 1px solid #111; 
    padding: 10px; 
    margin-bottom: 10px; 
    position: relative;
  }
  .template {
    background: #fff; 
    border: 1px solid #111; 
    margin-bottom: 10px; 
    position: relative;
  }
  .input-anchors { 
    margin-top: 1em;
    background: #fff; 
    border: 1px solid #111;
    padding: 0.5em; 
    margin-bottom: 10px; 
  }
  .input-anchor-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 5px;
  }
  .input-anchor-row button {
    flex: 1;
    margin: 0 2px;
  }
  .output-anchors { 
    margin-bottom: 1em;
    background: #fff; 
    border: 1px solid #111; 
    padding: 0.5em; 
  }
  .output-anchor-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 5px;
  }
  .output-anchor-row button {
    flex: 1;
    margin: 0 2px;
  }

  .container {
    display: flex;
    height: 100vh;
  }

  .sidebar {
    min-width: 300px;
    background-color: #fff;
    padding: 0.5em;
    overflow-y: auto;
    border-right: 1px solid #111;
  }

  .main-content {
    flex-grow: 1;
    overflow-y: auto;
  }

  .sidebar-selector h3 {
    margin-top: 0;
    margin: 0 0 0.4em;
  }

  .sidebar-selector ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
  }

  .sidebar-selector li {
    border-top: 1px solid #eee;
    padding: 0.3em 0;
  }

  .sidebar-selector a {
    text-decoration: none;
    color: #333;
  }

  .sidebar-selector a:hover {
    text-decoration: underline;
  }
</style>
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/views/style.ejs">

<style>
  body { 
    font-family: Arial, sans-serif; 
    margin: 0; 
    padding: 20px;
    background: #eee; 
  }
  main {
    border: 1px solid #111;
    margin: 0 auto;
    max-width: 600px;
    padding: 1em;
    background: #fff;
  }
  h1 {
    margin: 0;
  }
  .navigation {
    margin: 0;
    padding: 0;
    list-style: none outside none;
    position: relative;
  }
  .navigation li {
    margin: 0 0.5em 0.5em 0;
    list-style-type: none;
    float: left;
  }
  .navigation li button {
    font-size: 1.2em;
  }
</style>
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/views/main.ejs">
<main>
  <h1>FBP Steam Engine</h1>
  <p>The complete Flow-based Programming solution:</p>
  <div style="overflow: hidden;">
    <ul class="navigation">
      <li><a href="/flows"><button>flows</button></a></li>
      <li><a href="/components"><button>components</button></a></li>
      <li><a href="/events"><button>events</button></a></li>
      <li><a href="/stateMachines"><button>state machines</button></a></li>
      <li><a href="/templates"><button>templates</button></a></li>
      <li><a href="/logs"><button>logs</button></a></li>
    </ul>
  </div>
  <p>
    > Works best with multiple screens! (chart, document, logger)<br />
    > *ideal for domain specific languages*
  </p>
  <hr>
  <p>
    What is FBP? Is it time for a new Steam Engine?<br />
    <a href="https://www.youtube.com/watch?v=up2yhNTsaDs" target="_blank">https://www.youtube.com/watch?v=up2yhNTsaDs</a>
  </p>  
  <p>
    Fork this FBP Steam Engine repository for each application.<br />
    <a href="https://github.com/subvind/flow-based-programming" target="_blank">https://github.com/subvind/flow-based-programming</a>
  </p>
  <span>~made with &hearts; by <a href="https://istrav.com">isTrav</a> & <a href="https://subvind.com">subVind</a> + ai :)</span>
</main>
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/services/flow-executor.service.ts">
import { Injectable, Logger } from '@nestjs/common';
import { AmqpConnection } from '@golevelup/nestjs-rabbitmq';
import { ComponentRegistry } from './component-registry.service';
import { Flow } from '../interfaces/flow.interface';
import { WebSocketGateway, WebSocketServer } from '@nestjs/websockets';
import { Server } from 'socket.io';
import { initializeComponent } from '../initializers/component.initialize';
import { Component } from 'src/interfaces/component.interface';
import { TemplateCacheService } from './template-cache.service';

@WebSocketGateway()
@Injectable()
export class FlowExecutorService {
  @WebSocketServer() server: Server;
  private readonly logger = new Logger(FlowExecutorService.name);
  private flows: Flow[] = [];
  
  constructor(
    private amqpConnection: AmqpConnection,
    private componentRegistry: ComponentRegistry,
    private templateCacheService: TemplateCacheService
  ) {
  }

  async getFlows(): Promise<Flow[]> {
    return this.flows;
  }

  async getFlow(flowId: string): Promise<Flow | undefined> {
    return this.flows.find(flow => flow.id === flowId);
  }

  async executeFlow(flow: Flow) {
    this.logger.log(`Executing flow: ${flow.id}`);

    // Remove old flow and add new flow
    var filteredFlows = this.flows.filter(function(f: Flow) { 
      return f.id != flow.id; 
    });
    this.flows = filteredFlows;
    this.flows.push(flow);

    // Create connections
    for (const connection of flow.connections) {
      this.logger.log(`Creating connection: ${connection.fromComponent}.${connection.fromEvent} -> ${connection.toComponent}.${connection.toEvent}`);
      await this.amqpConnection.publish('flow_exchange', 'createConnection', { ...connection, flowId: flow.id });
    }

    // Construct components
    let instances = [];
    for (const component of flow.components) {
      this.logger.log(`Constructing component: ${component.componentId} (${component.componentRef}) for flow: ${flow.id}`);
      
      // initialize a new component instance
      let componentInstance: Component = initializeComponent(flow, component, this.amqpConnection, this.server, this.templateCacheService);

      // register new instance with component registery
      this.componentRegistry.registerComponent(componentInstance);
      instances.push(componentInstance);
    }

    // Sync connections for component
    for (const instance of instances) {
      this.logger.log(`Sync connections for component: ${instance.componentId} (${instance.componentRef}) for flow: ${instance.flowId}`);
      instance.syncConnections(flow.connections, this.componentRegistry);
    }
    
    // Init component
    for (const component of flow.components) {
      this.logger.log(`Initializing component: ${component.componentId} (${component.componentRef}) for flow: ${flow.id}`);

      try {
        await this.amqpConnection.publish('flow_exchange', 'componentEvent', {
          flowId: flow.id,
          componentId: component.componentId, // dynamically defined
          componentRef: component.componentRef, // hard code defined
          eventId: 'init', // flow executor defined
          data: component.init, // dynamically defined
        });
      } catch (error) {
        this.logger.error(`Error initializing component ${component.componentId} for flow ${flow.id}:`, error);
      }
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/interfaces/connection.interface.ts">
import { Component } from "./component.interface";

export interface Connection {
  toFlow: string;
  toComponent: string;
  toEvent: string;
  connectedTo: Component | undefined;
  fromFlow: string;
  fromComponent: string;
  fromEvent: string;
  connectedFrom: Component | undefined;
  next: Component | undefined;
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/interfaces/component.interface.ts">
import { Connection } from "./connection.interface";
import { Port } from "./port.interface";

export interface Component {
  ports: { inputs: string[]; outputs: string[]; };
  componentRef: string;
  slug: string;
  description?: string;
  flowId: string;
  componentId: string;
  handleEvent: (eventId: string, data: any) => Promise<void>;
  publish: (flowId: string, componentId: string, eventId: string, data: any) => Promise<void>;
  getPorts: () => Promise<{ inputs: Port[], outputs: Port[] }>;
  findPort: (portId: string) => Promise<Port>;
  findConnections: (port: Port) => Promise<Connection[]>
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/interfaces/flow.interface.ts">
import { Connection } from "./connection.interface";

export interface Flow {
  id: string;
  components: {
    componentId: string;
    componentRef: string;
    init: any | undefined;
  }[];
  connections: Connection[];
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/controllers/app.controller.ts">
import { Logger, Controller, Get, Post, Render, Body, Param, Res, Req } from '@nestjs/common';
import { Response, Request } from 'express';
import { EventTriggerComponent } from '../components/event-trigger/event-trigger.handler';

import { ComponentRegistry } from 'src/services/component-registry.service';
import { Connection } from 'src/interfaces/connection.interface';
import { Port } from 'src/interfaces/port.interface';
import { FlowExecutorService } from 'src/services/flow-executor.service';
import { TemplateCacheService } from 'src/services/template-cache.service';

@Controller()
export class AppController {
  private readonly logger = new Logger('AppController');
  
  constructor(
    private eventTriggerComponent: EventTriggerComponent,
    private componentRegistry: ComponentRegistry,
    private flowExecutorService: FlowExecutorService,
    private templateCacheService: TemplateCacheService
  ) {}

  @Get()
  @Render('index')
  async root(@Req() req: Request) {
    return { message: 'steam engine = chart + document + logger // FBP' };
  }

  /**
   * svelte app generated in:
   * ./src/public/chart/*
   */

  @Get('flows')
  @Render('flows/index')
  async flowsIndex(
    @Req() req: Request
  ) {
    const flows = await this.flowExecutorService.getFlows();
    return {
      message: 'flows - steam engine // FBP',
      flows
    };
  }

  @Get('flow/:flowId')
  @Render('flow/index')
  async flowComponents(
    @Param('flowId') flowId: string,
    @Req() req: Request
  ) {
    const flow = await this.flowExecutorService.getFlow(flowId);
    const components = flow.components.map(c => ({
      componentId: c.componentId,
      componentRef: c.componentRef
    }));

    return {
      message: 'flow - steam engine // FBP',
      flowId,
      components
    };
  }

  @Get('document/:flowId/:componentId')
  @Render('document/view')
  async documentView(
    @Param('flowId') flowId: string,
    @Param('componentId') componentId: string,
    @Req() req: Request
  ) {
    const flow = await this.flowExecutorService.getFlow(flowId);
    const components = flow.components.map(c => ({
      componentId: c.componentId,
      componentRef: c.componentRef
    }));

    return {
      selected: {
        flowId,
        componentId
      },
      components,
      message: `${flowId}.${componentId} - document - steam engine // FBP`
    };
  }

  @Get('documentComponent/:flowId/:componentId/:swimlaneId')
  @Render('document/component')
  async documentComponent(
    @Param('flowId') flowId: string,
    @Param('componentId') componentId: string,
    @Param('swimlaneId') swimlaneId: string,
  ) {
    const component = this.componentRegistry.getComponent(flowId, componentId);
  
    if (component) {
      return {
        component,
        swimlaneId
      };
    }
    return {
      component: null,
      swimlaneId
    };
  }

  @Get('documentConnections/:flowId/:componentId/:portId/:swimlaneId')
  @Render('document/connections')
  async documentConnections( 
    @Param('flowId') flowId: string, 
    @Param('componentId') componentId: string,
    @Param('portId') portId: string,
    @Param('swimlaneId') swimlaneId: string,
  ) {
    const params = { flowId, componentId, portId };
    const component = this.componentRegistry.getComponent(flowId, componentId);
    
    if (component) {
      let port: Port = await component.findPort(portId);

      let connections: Connection[] = await component.findConnections(port);

      connections.forEach((connection) => {
        if (port.direction === 'input') {
          connection.next = connection.connectedFrom;
        } else {
          connection.next = connection.connectedTo;
        }
      });

      if (port) {
        if (port.dataMethod === 'publish') {
          return {
            ...params,
            port,
            connections,
            swimlaneId
          };
        } else if (port.dataMethod === 'display') {
          let displayHtmxId = `${flowId}.${componentId}.${port.eventId}`;
          const cacheKey = `${flowId}.${componentId}.${port.eventId}`;
          const cachedTemplate = this.templateCacheService.getTemplate(cacheKey);
          
          return {
            ...params,
            port,
            displayHtmxId,
            swimlaneId,
            templateContent: cachedTemplate || 'Template not found'
          };
        }
      }
    }
    return {
      ...params,
      port: null,
      swimlaneId
    };
  }

  @Get('logger')
  @Render('logger/index')
  async loggerIndex(@Req() req: Request) {
    return { message: 'logger - steam engine // FBP' };
  }

  @Post('trigger-event/:flowComponentEvent')
  async triggerEvent(
    @Param('flowComponentEvent') flowComponentEvent: string,
    @Body() data: any,
    @Res() res: Response
  ) {
    const fceArray = flowComponentEvent.split('.');
    const flowId = fceArray[0];
    const componentId = fceArray[1];
    const eventId = fceArray[2];
    
    this.logger.log(`[trigger-event] [${flowId}] [${componentId}] [${eventId}]`);
    data._flowId = flowId;
    data._componentId = componentId;
    data._eventId = eventId;
    await this.eventTriggerComponent.handleEvent('triggerEvent', data);
    res.sendStatus(200);
  }

  @Get('template/:flowId/:componentId/:templateId')
  async getTemplate(
    @Param('flowId') flowId: string,
    @Param('componentId') componentId: string,
    @Param('templateId') templateId: string,
    @Res() res: Response
  ) {
    const cacheKey = `${flowId}.${componentId}.${templateId}`;
    const cachedTemplate = this.templateCacheService.getTemplate(cacheKey);

    if (cachedTemplate) {
      res.send(cachedTemplate);
    } else {
      res.status(404).send('Template not found');
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/views/flow/index.ejs">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%- message %></title>
  <script src="https://unpkg.com/htmx.org@2.0.2"></script>
  <script src="https://unpkg.com/htmx.org@1.9.12/dist/ext/json-enc.js"></script>
  <script src="https://cdn.socket.io/4.3.2/socket.io.min.js"></script>
  <%- include('../document/style') %>
</head>
<body>
  <div class="container">
    <div class="sidebar">
      <%- include('component-selector', { flowId: flowId, components: components }) %>
    </div>
    <div class="main-content">
      <div style="padding: 1em 3em;">
        <h1>Select a Component</h1>
        <div id="component-details">
          <p>Select a component to view its details.</p>
        </div>
      </div>
    </div>
  </div>

  <script>
    const socket = io();

    socket.on('display-flow-component-template-content', function(event) {
      const targetId = `${event.flowId}.${event.componentId}.${event.templateId}`;
      const targetElement = document.getElementById(targetId);
      console.log(targetId, event.content);
      if (targetElement) {
        targetElement.outerHTML = event.content;
        // Reinitialize HTMX on the new content
        htmx.process(document.getElementById(targetId));
      }
    });

    htmx.on("htmx:configRequest", (event) => {
      event.detail.headers['Content-Type'] = 'application/json';
    });
  </script>
  <%- include('../document/methods') %> 
</body>
</html>
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/views/document/view.ejs">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%- message %></title>
  <script src="https://unpkg.com/htmx.org@2.0.2"></script>
  <script src="https://unpkg.com/htmx.org@1.9.12/dist/ext/json-enc.js"></script>
  <script src="https://cdn.socket.io/4.3.2/socket.io.min.js"></script>
  <%- include('style') %>
</head>
<body>
  <div class="container">
    <div class="sidebar">
      <%- include('component-selector', { flowId: selected.flowId, componentId: selected.componentId, components: components }) %>
    </div>
    <div class="main-content">
      <div id="swimlane-container" class="swimlane-container">
        <div id="main-swimlane" class="swimlane" data-index="0"
             hx-get="/documentComponent/<%= selected.flowId %>/<%= selected.componentId %>/main-swimlane"
             hx-trigger="load"
             hx-target="#main-swimlane">
          <!-- Main component will be loaded here -->
        </div>
      </div>
    </div>
  </div>

  <script>
    const socket = io();

    socket.on('display-flow-component-template-content', function(event) {
      const targetId = `${event.flowId}.${event.componentId}.${event.templateId}`;
      const targetElement = document.getElementById(targetId);
      console.log('display-flow-component-template-content', targetId);
      if (targetElement) {
        targetElement.outerHTML = event.content;
        // Reinitialize HTMX on the new content
        htmx.process(document.getElementById(targetId));
      }
    });

    htmx.on("htmx:configRequest", (event) => {
      event.detail.headers['Content-Type'] = 'application/json';
    });
  </script>
  <%- include('methods') %> 
</body>
</html>
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/views/document/methods.ejs">
<script>
  function getNextSwimlane(direction, mainSwimlane) {
    const mainIndex = parseInt(mainSwimlane.getAttribute('data-index'));
    
    let targetIndex, targetSwimlane;
    if (direction === 'input') {
      targetIndex = mainIndex - 1;
      targetSwimlane = getOrCreateSwimlane(targetIndex);
    } else {
      targetIndex = mainIndex + 1;
      targetSwimlane = getOrCreateSwimlane(targetIndex);
    }

    return {
      mainIndex,
      targetIndex,
      targetSwimlane
    }
  }

  function loadConnectedComponents(direction, flowId, componentId, port, swimlaneId) {
    console.log('swimload load connected', swimlaneId, direction);
    const mainSwimlane = document.getElementById(swimlaneId);
    let next = getNextSwimlane(direction, mainSwimlane);

    const key = `${flowId}.${componentId}.${port}`;
    const eventElement = document.createElement('div');
    eventElement.setAttribute("id", key);
    next.targetSwimlane.innerHTML = '';
    next.targetSwimlane.appendChild(eventElement);
    
    htmx.ajax('GET', `/documentConnections/${flowId}/${componentId}/${port}/${next.targetSwimlane.id}`, {
      swap: 'none',
      handler: (dom, event) => {
        document.getElementById(key).outerHTML = event.xhr.response;
        htmx.process(document.getElementById(key));
      }
    });
  }

  function loadMainComponent(direction, flowId, componentId, swimlaneId) {
    console.log('swimload load main', swimlaneId, direction);
    // Update the main swimlane
    const mainSwimlane = document.getElementById(swimlaneId);
    let next = getNextSwimlane(direction, mainSwimlane);
    next.targetSwimlane.innerHTML = '';
    
    htmx.ajax('GET', `/documentComponent/${flowId}/${componentId}/${next.targetSwimlane.id}`, {
      swap: 'none',
      handler: (dom, event) => {
        next.targetSwimlane.innerHTML = event.xhr.response;
      }
    });
  }

  function getOrCreateSwimlane(index) {
    let swimlane = document.querySelector(`.swimlane[data-index="${index}"]`);
    if (swimlane) {
      console.log('swimlane found', index, swimlane)
    } else {
      console.log('swimlane not found', index)
    }
    if (!swimlane) {
      swimlane = document.createElement('div');
      swimlane.className = 'swimlane';
      swimlane.setAttribute('data-index', index);
      swimlane.id = `swimlane-${index}`;
      
      const container = document.getElementById('swimlane-container');
      if (index < 0) {
        container.insertBefore(swimlane, container.firstChild);
      } else {
        container.appendChild(swimlane);
      }
    }
    return swimlane;
  }
</script>
</FILE>
<FILE path="src/views/document/component.ejs" TARGET>
<% if (component) { %>
  <div id="<%- component.flowId %>.<%- component.componentId %>">
    <div class="event-anchor input-anchors">
      <% component.ports.inputs.forEach((input, index) => { %>
        <% if (index !== 0) { %>
         <hr>
        <% } %>
        <button onclick="loadConnectedComponents('input', '<%- component.flowId %>', '<%- component.componentId %>', '<%- input %>', '<%- swimlaneId %>')">input</button>
        <div style="float: right;">
          <%- input %>
        </div>
        <br />
      <% }) %>
    </div>
    <div class="component">
      <h2 style="margin: 0;"><%- component.componentId %> (<%- component.slug %>)</h2>
      <p style="margin: 0 0 0.5em;"><%- component.description %> </p>
      <div style="border: 1px solid #111;">
        <div id="init.<%- component.flowId %>.<%- component.componentId %>.<%- component.slug %>"
              hx-get="/template/<%- component.flowId %>/<%- component.componentId %>/<%- component.slug %>"
              hx-trigger="load"
              hx-target="this"
              hx-swap="outerHTML">
          <br /><!-- loading -->
        </div>
      </div>
    </div>
    <div class="event-anchor output-anchors">
      <% component.ports.outputs.forEach((output, index) => { %>
        <% if (index !== 0) { %>
         <hr>
        <% } %>
        <button onclick="loadConnectedComponents('output', '<%- component.flowId %>', '<%- component.componentId %>', '<%- output %>', '<%- swimlaneId %>')" style="float: right;">output</button>
        <%- output %> <br />
      <% }) %>
    </div>
  </div>
<% } else { %>
  <p>no component found</p>  
<% } %>
</FILE>
<REQUEST>
i want to draw lines between the input and output of 2 connected components
</REQUEST>