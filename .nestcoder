# NESTCODER

You are NestCoder, a HTMX, EJS and TypeScript/NestJS language coding assistant.

## INPUT: 

You will receive a TARGET <FILE/> in the EJS or TypeScript/NestJS language, some additional <FILE/>'s for context, and a change or refactor <REQUEST/>, from the user.

## OUTPUT:

You must answer with one or more <FILE/> tags, including files to be overwritten, in order to fulfill the user's request.

---

# EXAMPLE NESTCODER USAGE

## Suppose you're given the following INPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/_.ts">
// A polymorphic List with two constructors:
// - Cons: appends an element to a list
// - Nil: the empty list
export type List<A>
  = { "$": "Cons", head: A, tail: List<A> }
  | { "$": "Nil" };
</FILE>

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts" TARGET>
// The map function for List, to be implemented
import { List } from "./_";

export function map<A, B>(fn: (a: A) => B, list: List<A>): List<B> {
  ?
}
</FILE>

<REQUEST>
complete the map function
</REQUEST>

## Then, you must answer with the following OUTPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts">
import { List } from "./_";

// Applies a function to each element of a list.
// - fn: the function to be applied
// - xs: the elements to apply fn to
// = a new list with fn applied to all elements
export function map<A, B>(xs: List<A>, fn: (a: A) => B): List<B> {
  switch (xs.$) {
    case "Cons": {
      var head = fn(xs.head);
      var tail = map(xs.tail, fn);
      return { $: "Cons", head, tail };
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
</FILE>

(Because it fulfills the user's request perfectly.)

---

# GUIDE FOR THE TYPESCRIPT LANGUAGE

- Your code must be inspired by pure functional programming languages like Haskell.

- Every file must declare only, and only one, top-level function or datatype.

- Functions must be pure, using switch instead of 'if-else' or 'case-of'.

- When defining local variables, align equal signs whenever possible.

- Use CamelCase for everything. (IMPORTANT)

- A 'Foo/Bar' top-level definition must be either on './Foo/Bar.ts' or './Foo/Bar/_.ts'. 

# GUIDE FOR THE EJS LANGUAGE

- Use HTMX for frontend.

## Top-Level Function

Every .ts file must define ONE top-level function. Example:

```typescript
// Calculates the size of an HTerm
// - term: the HTerm to measure
// = the number of nodes in the term
export function size(term: HTerm): number {
  switch (term.$) {
    case "Lam": {
      var bod_size = size(term.bod({$: "Var", nam: term.nam}));
      return 1 + bod_size;
    }
    case "App": {
      var fun_size = size(term.fun);
      var arg_size = size(term.arg);
      return 1 + fun_size + arg_size;
    }
    case "Var": {
      return 1;
    }
  }
}
```

Where:
- The function name is defined (e.g., 'size')
- Parameters are specified with their types (e.g., 'term: HTerm')
- The return type is specified (e.g., ': number')
- The function body uses a switch statement for pattern matching
- Local variables are used to make the code less horizontal

## Top-Level Datatype

Alternatively, a .ts file can also define a datatype (ADT). Example:

```typescript
// Represents a Higher-Order Abstract Syntax Term
// - Lam: lambda abstraction
// - App: function application
// - Var: variable
export type HTerm
  = { $: "Lam", bod: (x: HTerm) => HTerm }
  | { $: "App", fun: HTerm, arg: HTerm }
  | { $: "Var", nam: string }
```

ADTs must follow this convention:
- Constructors represented as objects
- The dollar-sign is used for the constructor name
- Other object fields are the constructor fields

## Idiomatic TypeScript Examples

Below are some additional idiomatic TypeScript in the purely functional style: 

### List/zip.ts

```typescript
import { List } from "./_";

// Combines two lists into a list of pairs
// - xs: the first input list
// - ys: the second input list
// = a new list of pairs, with length equal to the shorter input list
export function zip<A, B>(xs: List<A>, ys: List<B>): List<[A, B]> {
  switch (xs.$) {
    case "Cons": {
      switch (ys.$) {
        case "Cons": {
          var head = [xs.head, ys.head] as [A,B];
          var tail = zip(xs.tail, ys.tail);
          return { $: "Cons", head, tail };
        }
        case "Nil": {
          return { $: "Nil" };
        }
      }
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### List/filter.ts

```typescript
import { List } from "./_";

// Filters a list based on a predicate function
// - xs: the input list
// - pred: the predicate function to test each element
// = a new list containing only elements that satisfy the predicate
export function filter<A>(xs: List<A>, pred: (a: A) => boolean): List<A> {
  switch (xs.$) {
    case "Cons": {
      var head = xs.head;
      var tail = filter(xs.tail, pred);
      return pred(xs.head) ? { $: "Cons", head, tail } : tail;
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### Tree/_.ts

```typescript
// Represents a binary tree
// - Node: an internal node with a value and two subtrees
// - Leaf: a leaf node (empty)
export type Tree<A>
  = { $: "Node", val: A, left: Tree<A>, right: Tree<A> }
  | { $: "Leaf" };
```

### Tree/sum.ts

```typescript
import { Tree } from "./_";

// Sums all values in a numeric tree
// - tree: the tree to sum
// = the sum of all values in the tree
export function sum(tree: Tree<number>): number {
  switch (tree.$) {
    case "Node": {
      var left  = sum(tree.left);
      var right = sum(tree.right);
      return tree.val + left + right;
    }
    case "Leaf": {
      return 0;
    }
  }
}
```

### V3/_.ts

```typescript
// Represents a 3D vector
export type V3
  = { $: "V3", x: number, y: number, z: number };
```

### V3/dot.ts

```typescript
import { V3 } from "./_";

// Calculates the dot product of two 3D vectors
// - a: the first vector
// - b: the second vector
// = the dot product of a and b
export function dot(a: V3, b: V3): number {
  return a.x * b.x + a.y * b.y + a.z * b.z;
}
```

---

# NOTES

- Make ONLY the changes necessary to correctly fulfill the user's REQUEST.

- Do NOT fix, remove, complete or alter any parts unrelated to the REQUEST.

- Pay attention to the user's style, and mimic it as close as possible.

- Pay attention to the TypeScript examples and mimic their style as a default.

- Consult TypeScript guide to emit idiomatic correct code.

- Do NOT use or assume the existence of files that weren't shown to you.

- Be precise and careful in your modifications.

---

# TASK

You will now be given the actual INPUT you must work with.

<FILE path="/home/travis/Projects/flow-based-programming/src/logger/custom-logger.ts">
import { ConsoleLogger, Injectable, Inject } from '@nestjs/common';
import { AmqpConnection } from '@golevelup/nestjs-rabbitmq';
import * as fs from 'fs';
import * as path from 'path';

@Injectable()
export class CustomLogger extends ConsoleLogger {
  constructor(
    private logId: string,
    @Inject(AmqpConnection) private amqpConnection: AmqpConnection
  ) {
    super(logId);
    this.setLogLevels(['log', 'error', 'warn', 'debug', 'verbose']);
  }

  log(message: string, context?: string) {
    this.printMessage(message, 'log', context);
    // this.emitLogEvent('log', message);
  }

  warn(message: string, context?: string) {
    this.printMessage(message, 'warn', context);
    // this.emitLogEvent('warn', message);
  }

  error(message: string, trace?: string, context?: string) {
    this.printMessage(message, 'error', context);
    // this.emitLogEvent('error', message);
    if (trace) {
      this.printMessage(trace, 'error', context);
    }
  }

  debug(message: string, context?: string) {
    this.printMessage(message, 'debug', context);
  }

  verbose(message: string, context?: string) {
    this.printMessage(message, 'verbose', context);
  }

  private printMessage(message: string, logLevel: string, context?: string) {
    const output = context ? `[${context}] ${message}` : message;
    console.log(`[${this.getNow()}] [${logLevel.toUpperCase()}] [${this.logId}] ${output}`);
  }

  private getNow(): string {
    return new Date().toISOString();
  }

  static write_to_file(message: string) {
    const logFile = path.join(process.cwd(), 'start:dev.stdout.txt');
    fs.appendFile(logFile, message, (err) => {
      if (err) {
        console.error('Failed to write to log file:', err);
      }
    });
  }

  static clearSTDOUT() {
    const logFile = path.join(process.cwd(), 'start:dev.stdout.txt');
    try {
      fs.writeFileSync(logFile, '');
      console.log(`Log file cleared at ${logFile}`);
    } catch (error) {
      console.error('Failed to clear log file:', error);
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/base.component.ts">
import { Inject, Injectable } from '@nestjs/common';
import { AmqpConnection } from '@golevelup/nestjs-rabbitmq';
import { Component } from './interfaces/component.interface';
import { CustomLogger } from './logger/custom-logger';
import { WebSocketGateway, WebSocketServer, SubscribeMessage, MessageBody } from '@nestjs/websockets';
import { Server } from 'socket.io';
import * as ejs from 'ejs';
import * as path from 'path';

@WebSocketGateway()
@Injectable()
export abstract class ComponentService implements Component {
  protected readonly logger: CustomLogger;
  
  constructor(
    public componentId: string,
    public name: string,
    public description: string,
    public flowId: string,
    public componentRef: string,
    @Inject(AmqpConnection) protected amqpConnection: AmqpConnection,
    protected server: Server
  ) {
    this.logger = new CustomLogger(this.componentId, amqpConnection);
  }

  abstract handleEvent(eventId: string, data: any): Promise<void>;

  async publish(flowId: string, componentId: string, eventId: string, data: any): Promise<void> {
    this.logger.log(`Emitting event: ${eventId}, flowId: ${this.flowId}, data: ${data}`);
    if (!this.amqpConnection) {
      this.logger.error('AmqpConnection is not initialized');
      return;
    }
    await this.amqpConnection.publish('flow_exchange', 'componentEvent', {
      flowId,
      componentId,
      eventId,
      data,
    });
  }

  @SubscribeMessage('client-event')
  handleClientEvent(@MessageBody() data: any): void {
    const { flowId, componentId, eventId, ...eventData } = data;
    this.logger.log(`Received client event: flowId=${flowId}, componentId=${componentId}, eventId=${eventId}, data=${JSON.stringify(eventData)}`);
    this.publish(flowId, componentId, 'clientEventReceived', eventData);
  }

  protected async sendHtmxUpdate(templateId: string, data: any) {
    const htmxContent = await this.generateHtmxContent(data, templateId);
    
    if (this.server) {
      this.server.emit('htmx-update', {
        flowId: this.flowId,
        componentId: this.componentId,
        templateId,
        content: htmxContent
      });
    } else {
      this.logger.warn('WebSocket server is not initialized');
    }
  }

  private async generateHtmxContent(data: any, templateId: string): Promise<string> {
    const templatePath = path.resolve(__dirname, `./templates/${templateId}.ejs`);
    try {
      return await ejs.renderFile(templatePath, { 
        flowId: this.flowId, 
        componentId: this.componentId, 
        templateId, 
        data
      });
    } catch (error) {
      this.logger.error(`Error rendering EJS template: ${error.message}`);
      return `<div>Error rendering content</div>`;
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/interfaces/component.interface.ts">
export interface Component {
  componentRef: string;
  name: string;
  description?: string;
  flowId: string;
  componentId: string;
  handleEvent: (eventId: string, data: any) => Promise<void>;
  publish: (flowId: string, componentId: string, eventId: string, data: any) => Promise<void>;
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/components/number-generator.component.ts">
import { CustomLogger } from 'src/logger/custom-logger';
import { Injectable, Inject } from '@nestjs/common';
import { ComponentService } from '../base.component';
import { AmqpConnection } from '@golevelup/nestjs-rabbitmq';
import { Server } from 'socket.io';

@Injectable()
export class NumberGeneratorComponent extends ComponentService {
  public logger;
  private interval: NodeJS.Timeout | null = null;

  constructor(
    @Inject('FLOW_ID') flowId: string,
    @Inject('COMPONENT_ID') componentId: string,
    @Inject(AmqpConnection) amqpConnection: AmqpConnection,
    @Inject('WEB_SOCKET_SERVER') webSocketServer: Server
  ) {
    super('numberGenerator', 'Number Generator', 'Generates random numbers periodically', flowId, componentId, amqpConnection, webSocketServer);
    this.flowId = flowId;
    this.componentId = componentId;
    this.logger = new CustomLogger(`${flowId}.${componentId}`, this.amqpConnection);
  }

  async handleEvent(eventId: string, data: any): Promise<void> {
    this.logger.log(`NumberGenerator (${this.flowId}) handling event: ${eventId}`);
    switch (eventId) {
      case "start": {
        this.logger.log(`NumberGenerator (${this.flowId}) starting number generation`);
        this.startGenerating();
        break;
      }
      case "stop": {
        this.logger.log(`NumberGenerator (${this.flowId}) stopping number generation`);
        this.stopGenerating();
        break;
      }
    }
  }

  private startGenerating(): void {
    this.logger.log(`NumberGenerator (${this.flowId}) startGenerating method called`);
    if (this.interval) {
      clearInterval(this.interval);
    }
    this.interval = setInterval(async () => {
      var randomNumber = Math.random();
      this.logger.log(`NumberGenerator (${this.flowId}) generated number: ${randomNumber}`);
      await this.publish(this.flowId, this.componentId, 'numberGenerated', randomNumber);
      
      // Send HTMX update
      await this.sendHtmxUpdate('number-generator', {
        number: randomNumber,
        timestamp: Date.now(),
        flowId: this.flowId,
        componentId: this.componentId
      });
    }, 1000);
  }

  private stopGenerating(): void {
    this.logger.log(`NumberGenerator (${this.flowId}) stopGenerating method called`);
    if (this.interval) {
      clearInterval(this.interval);
      this.interval = null;
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/components/event-trigger.component.ts">
import { CustomLogger } from 'src/logger/custom-logger';
import { Injectable, Inject } from '@nestjs/common';
import { ComponentService } from '../base.component';
import { AmqpConnection } from '@golevelup/nestjs-rabbitmq';
import { Server } from 'socket.io';

@Injectable()
export class EventTriggerComponent extends ComponentService {
  public logger;
  
  constructor(
    @Inject('FLOW_ID') flowId: string,
    @Inject('COMPONENT_ID') componentId: string,
    @Inject(AmqpConnection) amqpConnection: AmqpConnection,
    @Inject('WEB_SOCKET_SERVER') protected webSocketServer: Server
  ) {
    super('eventTrigger', 'Event Trigger', 'Handles HTMX requests and triggers events', flowId, componentId, amqpConnection, webSocketServer);
    this.flowId = flowId;
    this.componentId = componentId;
    this.logger = new CustomLogger(`${flowId}.${componentId}`, this.amqpConnection);
  }

  async handleEvent(_eventId: string, data: any): Promise<void> {
    this.logger.log(`EventTrigger handling event: ${_eventId}`);
    if (_eventId === 'triggerEvent') {
      const { flowId, componentId, eventId } = data;
      await this.publish(flowId, componentId, eventId, data);
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/services/flow-executor.service.ts">
import { Injectable, Logger } from '@nestjs/common';
import { AmqpConnection } from '@golevelup/nestjs-rabbitmq';
import { ComponentRegistry } from './component-registry.service';
import { Flow } from '../interfaces/flow.interface';
import { NumberGeneratorComponent } from '../components/number-generator.component';
import { NumberMultiplierComponent } from '../components/number-multiplier.component';
import { EventTriggerComponent } from '../components/event-trigger.component';
import { WebSocketGateway, WebSocketServer } from '@nestjs/websockets';
import { Server } from 'socket.io';

@WebSocketGateway()
@Injectable()
export class FlowExecutorService {
  @WebSocketServer() server: Server;
  private readonly logger = new Logger(FlowExecutorService.name);

  constructor(
    private amqpConnection: AmqpConnection,
    private componentRegistry: ComponentRegistry
  ) {}

  async executeFlow(flow: Flow) {
    this.logger.log(`Executing flow: ${flow.id}`);

    // Create connections
    for (const connection of flow.connections) {
      this.logger.log(`Creating connection: ${connection.fromComponent}.${connection.fromEvent} -> ${connection.toComponent}.${connection.toEvent}`);
      await this.amqpConnection.publish('flow_exchange', 'createConnection', { ...connection, flowId: flow.id });
    }

    // Init components
    for (const component of flow.components) {
      this.logger.log(`Initializing component: ${component.componentId} (${component.componentRef}) for flow: ${flow.id}`);
      let componentInstance;
      switch (component.componentRef) {
        case 'numberGenerator':
          componentInstance = new NumberGeneratorComponent(flow.id, component.componentId, this.amqpConnection, this.server);
          break;
        case 'numberMultiplier':
          componentInstance = new NumberMultiplierComponent(flow.id, component.componentId, this.amqpConnection, this.server);
          break;
        case 'eventTrigger':
          componentInstance = new EventTriggerComponent(flow.id, component.componentId, this.amqpConnection, this.server);
          break;
        default:
          this.logger.warn(`Unknown component type: ${component.componentRef}`);
          continue;
      }

      this.componentRegistry.registerComponent(componentInstance);
      
      try {
        await this.amqpConnection.publish('flow_exchange', 'componentEvent', {
          flowId: flow.id,
          componentId: component.componentId,
          componentRef: component.componentRef,
          eventId: 'init',
          data: {},
        });
      } catch (error) {
        this.logger.error(`Error initializing component ${component.componentId} for flow ${flow.id}:`, error);
      }
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/services/component-registry.service.ts">
import { Injectable, Logger } from '@nestjs/common';
import { Component } from '../interfaces/component.interface';

@Injectable()
export class ComponentRegistry {
  private components: Map<string, Component> = new Map();
  private readonly logger = new Logger(ComponentRegistry.name);

  registerComponent(component: Component) {
    const key = `${component.flowId}.${component.componentRef}`;
    this.logger.log(`Registering component: ${key}`);
    this.components.set(key, component);
  }

  getComponent(flowId: string, componentRef: string): Component | undefined {
    const key = `${flowId}.${componentRef}`;
    const component = this.components.get(key);
    if (!component) {
      this.logger.warn(`Component not found: ${key}`);
    }
    return component;
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/processors/event.processor.ts">
import { Injectable, Logger } from '@nestjs/common';
import { RabbitSubscribe } from '@golevelup/nestjs-rabbitmq';
import { ComponentRegistry } from '../services/component-registry.service';

@Injectable()
export class EventProcessor {
  private readonly logger = new Logger(EventProcessor.name);
  private connections: Map<string, { toFlow: string; toComponent: string; toEvent: string }> = new Map();

  constructor(private componentRegistry: ComponentRegistry) {}

  @RabbitSubscribe({
    exchange: 'flow_exchange',
    routingKey: 'componentEvent',
    queue: 'component_event_queue',
  })
  async handleComponentEvent(msg: {flowId: string, componentId: string, eventId: string, data: any}) {
    const { flowId, componentId, eventId, data: eventData } = msg;
    this.logger.log(`[handleComponentEvent] [${flowId}.${componentId}.${eventId}] data: ${JSON.stringify(eventData)}`);
    
    const component = this.componentRegistry.getComponent(flowId, componentId);
    if (component) {
      this.logger.log(`Passing event to component: ${componentId}`);
      await component.handleEvent(eventId, eventData);

      // Check if there's a connection for this event
      const connectionKey = `${flowId}.${componentId}.${eventId}`;
      const connection = this.connections.get(connectionKey);
      if (connection) {
        const { toFlow, toComponent, toEvent } = connection;
        this.logger.log(`[forwardingComponentEvent] [${toFlow}.${toComponent}.${toEvent}]`);
        
        const targetComponent = this.componentRegistry.getComponent(toFlow, toComponent);
        if (targetComponent) {
          this.logger.log(`Forwarding event to component: ${targetComponent.componentId}`);
          await targetComponent.handleEvent(toEvent, { ...eventData, flowId: toFlow });
        } else {
          this.logger.warn(`Target component not found: ${toComponent} in flow: ${toFlow}`);
        }
      }
    } else {
      this.logger.warn(`Component not found: ${flowId}.${componentId}`);
    }
  }

  @RabbitSubscribe({
    exchange: 'flow_exchange',
    routingKey: 'createConnection',
    queue: 'create_connection_queue',
  })
  async createConnection(msg: {flowId: string, fromComponent: string, fromEvent: string, toComponent: string, toEvent: string}) {
    const { flowId, fromComponent, fromEvent, toComponent, toEvent } = msg;
    this.logger.log(`Received createConnection: ${flowId}.${fromComponent}.${fromEvent} -> ${toComponent}.${toEvent}`);
    
    const connectionKey = `${flowId}.${fromComponent}.${fromEvent}`;
    this.connections.set(connectionKey, { toFlow: flowId, toComponent, toEvent });
    this.logger.log(`Connection created: ${connectionKey} -> ${toComponent}.${toEvent}`);
    
    return { success: true, message: 'Connection created successfully' };
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/modules/app.module.ts">
import { Module, OnModuleInit } from '@nestjs/common';
import { RabbitMQModule } from '@golevelup/nestjs-rabbitmq';
import { ComponentRegistry } from '../services/component-registry.service';
import { FlowExecutorService } from '../services/flow-executor.service';
import { EventProcessor } from '../processors/event.processor';
import { NumberGeneratorComponent } from '../components/number-generator.component';
import { NumberMultiplierComponent } from '../components/number-multiplier.component';
import { EventTriggerComponent } from '../components/event-trigger.component';
import { CustomLogger } from '../logger/custom-logger';
import { AppController } from '../controllers/app.controller';

@Module({
  imports: [
    RabbitMQModule.forRoot(RabbitMQModule, {
      exchanges: [
        {
          name: 'flow_exchange',
          type: 'topic',
        },
      ],
      uri: 'amqp://localhost:5672',
      connectionInitOptions: { wait: false },
    }),
  ],
  controllers: [AppController],
  providers: [
    EventProcessor,
    ComponentRegistry,
    FlowExecutorService,
    {
      provide: 'FLOW_ID',
      useValue: 'example-flow', // Use a default flow ID
    },
    {
      provide: 'COMPONENT_ID',
      useFactory: () => `component-${Date.now()}`, // Generate a unique component ID
    },
    {
      provide: 'WEB_SOCKET_SERVER',
      useValue: null, // This will be set later in the FlowExecutorService
    },
    NumberGeneratorComponent,
    NumberMultiplierComponent,
    EventTriggerComponent,
    CustomLogger
  ],
  exports: [EventProcessor],
})
export class AppModule implements OnModuleInit {
  constructor(
    private componentRegistry: ComponentRegistry,
    private numberGeneratorComponent: NumberGeneratorComponent,
    private numberMultiplierComponent: NumberMultiplierComponent,
    private eventTriggerComponent: EventTriggerComponent
  ) {}

  onModuleInit() {
    // Register components
    this.componentRegistry.registerComponent(this.numberGeneratorComponent);
    this.componentRegistry.registerComponent(this.numberMultiplierComponent);
    this.componentRegistry.registerComponent(this.eventTriggerComponent);
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/controllers/app.controller.ts">
import { Logger, Controller, Get, Post, Render, Body, Res, Req, UseGuards, Query } from '@nestjs/common';
import { Response, Request } from 'express';
import { EventTriggerComponent } from '../components/event-trigger.component';

@Controller()
export class AppController {
  private readonly logger = new Logger('AppController');

  constructor(private eventTriggerComponent: EventTriggerComponent) {}

  @Get()
  @Render('index')
  async root(@Req() req: Request) {
    return { message: 'Flow Based Programming' };
  }

  @Post('trigger-event')
  async trigger_event(
    @Body() body: { 
      flowId: string; 
      componentId: string; 
      eventId: string, 
      data: any 
    }, 
    @Res() res: Response
  ) {
    this.logger.log(`[trigger-event] [${body.flowId}] [${body.componentId}] [${body.eventId}]`)
    await this.eventTriggerComponent.handleEvent('triggerEvent', body);
    res.sendStatus(200);
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/bootstrap/app.bootstrap.ts">
import { NestFactory } from '@nestjs/core';
import { AppModule } from '../modules/app.module';
import { NestExpressApplication } from '@nestjs/platform-express';
import * as cookieParser from 'cookie-parser';
import { FlowExecutorService } from '../services/flow-executor.service';
import { Flow } from '../interfaces/flow.interface';
import { CustomLogger } from '../logger/custom-logger';
import { resolve } from 'path';

export async function bootstrapApp(logger: CustomLogger): Promise<any> {
  const app = await NestFactory.create<NestExpressApplication>(AppModule, { logger });
  
  app.useStaticAssets(resolve('./src/public'));
  app.setBaseViewsDir(resolve('./src/views'));
  app.setViewEngine('ejs');

  app.use(cookieParser());

  // so browsers can use api
  app.enableCors({
    origin: '*',
  });

  const flowExecutor = app.get(FlowExecutorService);

  await app.init();

  const exampleFlow: Flow = {
    id: 'example-flow',
    components: [
      { componentId: 'main', componentRef: 'eventTrigger' },
      { componentId: 'gen1', componentRef: 'numberGenerator' },
      { componentId: 'mult1', componentRef: 'numberMultiplier' },
    ],
    connections: [
      {
        fromComponent: 'gen1',
        fromEvent: 'numberGenerated',
        toComponent: 'mult1',
        toEvent: 'numberReceived',
      },
    ],
  };

  logger.log('Starting flow execution...');
  await flowExecutor.executeFlow(exampleFlow);

  await app.listen(3000);
  logger.log('Application is running on: http://localhost:3000');

  return app;
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/templates/number-multiplier.ejs">
<div>
  <p>Last received number: <%= data.input %></p>
  <p>Multiplied result: <%= data.result %></p>
  <p>Processed at: <%= new Date(data.timestamp).toLocaleString() %></p>
</div>
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/views/index.ejs">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flow-Based Programming Example</title>
    <script src="https://unpkg.com/htmx.org@2.0.2"></script>
    <script src="https://unpkg.com/htmx.org@1.9.12/dist/ext/json-enc.js"></script>
    <script src="https://cdn.socket.io/4.3.2/socket.io.min.js"></script>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
        .component { border: 1px solid #ddd; padding: 10px; margin-bottom: 10px; }
        h2 { margin-top: 0; }
    </style>
</head>
<body>
    <h1>Flow-Based Programming Example</h1>

    <div id="number-generator" class="component">
        <h2>Number Generator</h2>
        <button hx-post="/trigger-event" 
                hx-ext='json-enc'
                hx-headers='{"Content-Type": "application/json"}'
                hx-vals='{"flowId": "example-flow", "componentId": "gen1", "eventId": "start", "data": {}}'>
            Start Generating
        </button>
        <button hx-post="/trigger-event" 
                hx-ext='json-enc'
                hx-headers='{"Content-Type": "application/json"}'
                hx-vals='{"flowId": "example-flow", "componentId": "gen1", "eventId": "stop", "data": {}}'>
            Stop Generating
        </button>
        <div id="generator-output"></div>
    </div>

    <div id="number-multiplier" class="component">
        <h2>Number Multiplier</h2>
        <div id="multiplier-output"></div>
    </div>

    <script>
        const socket = io();

        socket.on('htmx-update', function(data) {
            const targetId = `${data.componentId}-output`;
            const targetElement = document.getElementById(targetId);
            if (targetElement) {
                targetElement.innerHTML = data.content;
            }
        });

        htmx.on("htmx:configRequest", (event) => {
            event.detail.headers['Content-Type'] = 'application/json';
        });
    </script>
</body>
</html>
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/start:dev.stdout.txt">
c[[90m8:31:41 PM[0m] Starting compilation in watch mode...

[[90m8:31:41 PM[0m] Found 0 errors. Watching for file changes.

[32m[Nest] 100876  - [39m08/20/2024, 8:31:42 PM [32m    LOG[39m [38;5;3m[NestFactory] [39m[32mStarting Nest application...[39m
[32m[Nest] 100876  - [39m08/20/2024, 8:31:42 PM [32m    LOG[39m [38;5;3m[AmqpConnection] [39m[32mTrying to connect to RabbitMQ broker (default)[39m
[32m[Nest] 100876  - [39m08/20/2024, 8:31:42 PM [32m    LOG[39m [38;5;3m[RabbitMQModule] [39m[32mSuccessfully connected to RabbitMQ[39m
[32m[Nest] 100876  - [39m08/20/2024, 8:31:42 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mDiscoveryModule dependencies initialized[39m[38;5;3m +8ms[39m
[32m[Nest] 100876  - [39m08/20/2024, 8:31:42 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mRabbitMQModule dependencies initialized[39m[38;5;3m +0ms[39m
[32m[Nest] 100876  - [39m08/20/2024, 8:31:42 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mAppModule dependencies initialized[39m[38;5;3m +1ms[39m
[2024-08-21T01:31:42.253Z] [LOG] [Bootstrap] Starting main application...
[2024-08-21T01:31:42.253Z] [LOG] [Bootstrap] [NestFactory] Starting Nest application...
[2024-08-21T01:31:42.255Z] [LOG] [Bootstrap] [AmqpConnection] Trying to connect to RabbitMQ broker (default)
[2024-08-21T01:31:42.256Z] [LOG] [Bootstrap] [RabbitMQModule] Successfully connected to RabbitMQ
[2024-08-21T01:31:42.256Z] [LOG] [Bootstrap] [InstanceLoader] DiscoveryModule dependencies initialized
[2024-08-21T01:31:42.257Z] [LOG] [Bootstrap] [InstanceLoader] RabbitMQModule dependencies initialized
[2024-08-21T01:31:42.257Z] [LOG] [Bootstrap] [InstanceLoader] AppModule dependencies initialized
[2024-08-21T01:31:42.264Z] [LOG] [Bootstrap] [WebSocketsController] NumberGeneratorComponent subscribed to the "client-event" message
[2024-08-21T01:31:42.264Z] [LOG] [Bootstrap] [WebSocketsController] NumberMultiplierComponent subscribed to the "client-event" message
[2024-08-21T01:31:42.264Z] [LOG] [Bootstrap] [WebSocketsController] EventTriggerComponent subscribed to the "client-event" message
[2024-08-21T01:31:42.266Z] [LOG] [Bootstrap] [RoutesResolver] AppController {/}:
[2024-08-21T01:31:42.267Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/, GET} route
[2024-08-21T01:31:42.267Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/trigger-event, POST} route
[2024-08-21T01:31:42.268Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724203902255
[2024-08-21T01:31:42.268Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724203902255
[2024-08-21T01:31:42.268Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724203902255
[2024-08-21T01:31:42.268Z] [LOG] [Bootstrap] [RabbitMQModule] Initializing RabbitMQ Handlers
[2024-08-21T01:31:42.270Z] [LOG] [Bootstrap] [RabbitMQModule] Registering rabbitmq handlers from EventProcessor
[2024-08-21T01:31:42.271Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.handleComponentEvent {subscribe} -> flow_exchange::componentEvent::component_event_queue
[2024-08-21T01:31:42.271Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.createConnection {subscribe} -> flow_exchange::createConnection::create_connection_queue
[2024-08-21T01:31:42.271Z] [LOG] [Bootstrap] [RabbitMQModule] Initializing RabbitMQ Handlers
[2024-08-21T01:31:42.271Z] [LOG] [Bootstrap] [RabbitMQModule] Registering rabbitmq handlers from EventProcessor
[2024-08-21T01:31:42.271Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.handleComponentEvent {subscribe} -> flow_exchange::componentEvent::component_event_queue
[2024-08-21T01:31:42.271Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.createConnection {subscribe} -> flow_exchange::createConnection::create_connection_queue
[2024-08-21T01:31:42.271Z] [LOG] [Bootstrap] [NestApplication] Nest application successfully started
[2024-08-21T01:31:42.271Z] [LOG] [Bootstrap] Starting flow execution...
[2024-08-21T01:31:42.271Z] [LOG] [Bootstrap] [FlowExecutorService] Executing flow: example-flow
[2024-08-21T01:31:42.271Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: gen1.numberGenerated -> mult1.numberReceived
[2024-08-21T01:31:42.323Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected to RabbitMQ broker (default)
[2024-08-21T01:31:42.324Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected to RabbitMQ broker (default)
[2024-08-21T01:31:42.330Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected a RabbitMQ channel "AmqpConnection"
[2024-08-21T01:31:42.330Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected a RabbitMQ channel "AmqpConnection"
[2024-08-21T01:31:42.331Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.gen1.numberGenerated -> mult1.numberReceived
[2024-08-21T01:31:42.331Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.gen1.numberGenerated -> mult1.numberReceived
[2024-08-21T01:31:42.331Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: main (eventTrigger) for flow: example-flow
[2024-08-21T01:31:42.331Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.main
[2024-08-21T01:31:42.332Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-21T01:31:42.332Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.main.init] data: {}
[2024-08-21T01:31:42.332Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: main
[2024-08-21T01:31:42.332Z] [LOG] [example-flow.main] EventTrigger handling event: init
[2024-08-21T01:31:42.332Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: gen1 (numberGenerator) for flow: example-flow
[2024-08-21T01:31:42.332Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.gen1
[2024-08-21T01:31:42.375Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: mult1 (numberMultiplier) for flow: example-flow
[2024-08-21T01:31:42.375Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.mult1
[2024-08-21T01:31:42.375Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.init] data: {}
[2024-08-21T01:31:42.375Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-21T01:31:42.376Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: init
[2024-08-21T01:31:42.376Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.mult1.init] data: {}
[2024-08-21T01:31:42.376Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: mult1
[2024-08-21T01:31:42.376Z] [LOG] [example-flow.mult1] NumberMultiplier handling event: init {}
[2024-08-21T01:31:42.378Z] [LOG] [Bootstrap] Application is running on: http://localhost:3000
[2024-08-21T01:46:46.731Z] [LOG] [Bootstrap] [AppController] [trigger-event] [example-flow] [gen1] [start]
[2024-08-21T01:46:46.731Z] [LOG] [example-flow.component-1724203902255] EventTrigger handling event: triggerEvent
[2024-08-21T01:46:46.731Z] [LOG] [example-flow.component-1724203902255] Emitting event: start, flowId: example-flow, data: [object Object]
[2024-08-21T01:46:46.733Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.start] data: {"flowId":"example-flow","componentId":"gen1","eventId":"start","data":"{}"}
[2024-08-21T01:46:46.733Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-21T01:46:46.733Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: start
[2024-08-21T01:46:46.733Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) starting number generation
[2024-08-21T01:46:46.733Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) startGenerating method called
[2024-08-21T01:46:47.734Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) generated number: 0.6500188384573657
[2024-08-21T01:46:47.734Z] [LOG] [example-flow.gen1] Emitting event: numberGenerated, flowId: example-flow, data: 0.6500188384573657
[2024-08-21T01:46:47.737Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.numberGenerated] data: 0.6500188384573657
[2024-08-21T01:46:47.737Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-21T01:46:47.737Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: numberGenerated
[2024-08-21T01:46:47.737Z] [LOG] [Bootstrap] [EventProcessor] [forwardingComponentEvent] [example-flow.mult1.numberReceived]
[2024-08-21T01:46:47.737Z] [LOG] [Bootstrap] [EventProcessor] Forwarding event to component: mult1
[2024-08-21T01:46:47.737Z] [LOG] [example-flow.mult1] NumberMultiplier handling event: numberReceived {
  "flowId": "example-flow"
}
[2024-08-21T01:46:47.737Z] [LOG] [example-flow.mult1] NumberMultiplier received [object Object], multiplied result: NaN
[2024-08-21T01:46:47.737Z] [LOG] [example-flow.mult1] Emitting event: numberMultiplied, flowId: example-flow, data: NaN
[2024-08-21T01:46:47.740Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.mult1.numberMultiplied] data: null
[2024-08-21T01:46:47.740Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: mult1
[2024-08-21T01:46:47.740Z] [LOG] [example-flow.mult1] NumberMultiplier handling event: numberMultiplied null
[2024-08-21T01:46:48.735Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) generated number: 0.5396561610726103
[2024-08-21T01:46:48.735Z] [LOG] [example-flow.gen1] Emitting event: numberGenerated, flowId: example-flow, data: 0.5396561610726103
[2024-08-21T01:46:48.736Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.numberGenerated] data: 0.5396561610726103
[2024-08-21T01:46:48.736Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-21T01:46:48.736Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: numberGenerated
[2024-08-21T01:46:48.736Z] [LOG] [Bootstrap] [EventProcessor] [forwardingComponentEvent] [example-flow.mult1.numberReceived]
[2024-08-21T01:46:48.736Z] [LOG] [Bootstrap] [EventProcessor] Forwarding event to component: mult1
[2024-08-21T01:46:48.736Z] [LOG] [example-flow.mult1] NumberMultiplier handling event: numberReceived {
  "flowId": "example-flow"
}
[2024-08-21T01:46:48.736Z] [LOG] [example-flow.mult1] NumberMultiplier received [object Object], multiplied result: NaN
[2024-08-21T01:46:48.736Z] [LOG] [example-flow.mult1] Emitting event: numberMultiplied, flowId: example-flow, data: NaN
[2024-08-21T01:46:48.739Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.mult1.numberMultiplied] data: null
[2024-08-21T01:46:48.739Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: mult1
[2024-08-21T01:46:48.739Z] [LOG] [example-flow.mult1] NumberMultiplier handling event: numberMultiplied null
[2024-08-21T01:46:49.290Z] [LOG] [Bootstrap] [AppController] [trigger-event] [example-flow] [gen1] [stop]
[2024-08-21T01:46:49.290Z] [LOG] [example-flow.component-1724203902255] EventTrigger handling event: triggerEvent
[2024-08-21T01:46:49.290Z] [LOG] [example-flow.component-1724203902255] Emitting event: stop, flowId: example-flow, data: [object Object]
[2024-08-21T01:46:49.291Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.stop] data: {"flowId":"example-flow","componentId":"gen1","eventId":"stop","data":"{}"}
[2024-08-21T01:46:49.291Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-21T01:46:49.291Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: stop
[2024-08-21T01:46:49.291Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) stopping number generation
[2024-08-21T01:46:49.291Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) stopGenerating method called

</FILE>
<FILE path="src/components/number-multiplier.component.ts" TARGET>
import { CustomLogger } from 'src/logger/custom-logger';
import { Injectable, Inject } from '@nestjs/common';
import { ComponentService } from '../base.component';
import { AmqpConnection } from '@golevelup/nestjs-rabbitmq';
import { Server } from 'socket.io';

@Injectable()
export class NumberMultiplierComponent extends ComponentService {
  public logger;

  constructor(
    @Inject('FLOW_ID') flowId: string,
    @Inject('COMPONENT_ID') componentId: string,
    @Inject(AmqpConnection) amqpConnection: AmqpConnection,
    @Inject('WEB_SOCKET_SERVER') protected webSocketServer: Server
  ) {
    super('numberMultiplier', 'Number Multiplier', 'Multiplies received number by 2', flowId, componentId, amqpConnection, webSocketServer);
    this.flowId = flowId;
    this.componentId = componentId;
    this.logger = new CustomLogger(`${flowId}.${componentId}`, this.amqpConnection);
  }

  async handleEvent(eventId: string, data: number): Promise<void> {
    this.logger.log(`NumberMultiplier handling event: ${eventId} ${JSON.stringify(data, null, 2)}`);
    if (eventId === 'numberReceived') {
      const result = data * 2;
      this.logger.log(`NumberMultiplier received ${data}, multiplied result: ${result}`);
      await this.publish(this.flowId, this.componentId, 'numberMultiplied', result);

      // Send HTMX update
      await this.sendHtmxUpdate('number-multiplier', {
        input: data,
        result: result,
        timestamp: Date.now(),
        flowId: this.flowId,
        componentId: this.componentId
      });
    }
  }
}
</FILE>
<REQUEST>
in the logs getting NaN and Null
</REQUEST>