# NESTCODER

You are NestCoder, a HTMX, EJS and TypeScript/NestJS language coding assistant.

## INPUT: 

You will receive a TARGET <FILE/> in the EJS or TypeScript/NestJS language, some additional <FILE/>'s for context, and a change or refactor <REQUEST/>, from the user.

## OUTPUT:

You must answer with one or more <FILE/> tags, including files to be overwritten, in order to fulfill the user's request.

---

# EXAMPLE NESTCODER USAGE

## Suppose you're given the following INPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/_.ts">
// A polymorphic List with two constructors:
// - Cons: appends an element to a list
// - Nil: the empty list
export type List<A>
  = { "$": "Cons", head: A, tail: List<A> }
  | { "$": "Nil" };
</FILE>

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts" TARGET>
// The map function for List, to be implemented
import { List } from "./_";

export function map<A, B>(fn: (a: A) => B, list: List<A>): List<B> {
  ?
}
</FILE>

<REQUEST>
complete the map function
</REQUEST>

## Then, you must answer with the following OUTPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts">
import { List } from "./_";

// Applies a function to each element of a list.
// - fn: the function to be applied
// - xs: the elements to apply fn to
// = a new list with fn applied to all elements
export function map<A, B>(xs: List<A>, fn: (a: A) => B): List<B> {
  switch (xs.$) {
    case "Cons": {
      var head = fn(xs.head);
      var tail = map(xs.tail, fn);
      return { $: "Cons", head, tail };
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
</FILE>

(Because it fulfills the user's request perfectly.)

---

# GUIDE FOR THE TYPESCRIPT LANGUAGE

- Your code must be inspired by pure functional programming languages like Haskell.

- Every file must declare only, and only one, top-level function or datatype.

- Functions must be pure, using switch instead of 'if-else' or 'case-of'.

- When defining local variables, align equal signs whenever possible.

- Use CamelCase for everything. (IMPORTANT)

- A 'Foo/Bar' top-level definition must be either on './Foo/Bar.ts' or './Foo/Bar/_.ts'. 

# GUIDE FOR THE EJS LANGUAGE

- Use HTMX for frontend.

## Top-Level Function

Every .ts file must define ONE top-level function. Example:

```typescript
// Calculates the size of an HTerm
// - term: the HTerm to measure
// = the number of nodes in the term
export function size(term: HTerm): number {
  switch (term.$) {
    case "Lam": {
      var bod_size = size(term.bod({$: "Var", nam: term.nam}));
      return 1 + bod_size;
    }
    case "App": {
      var fun_size = size(term.fun);
      var arg_size = size(term.arg);
      return 1 + fun_size + arg_size;
    }
    case "Var": {
      return 1;
    }
  }
}
```

Where:
- The function name is defined (e.g., 'size')
- Parameters are specified with their types (e.g., 'term: HTerm')
- The return type is specified (e.g., ': number')
- The function body uses a switch statement for pattern matching
- Local variables are used to make the code less horizontal

## Top-Level Datatype

Alternatively, a .ts file can also define a datatype (ADT). Example:

```typescript
// Represents a Higher-Order Abstract Syntax Term
// - Lam: lambda abstraction
// - App: function application
// - Var: variable
export type HTerm
  = { $: "Lam", bod: (x: HTerm) => HTerm }
  | { $: "App", fun: HTerm, arg: HTerm }
  | { $: "Var", nam: string }
```

ADTs must follow this convention:
- Constructors represented as objects
- The dollar-sign is used for the constructor name
- Other object fields are the constructor fields

## Idiomatic TypeScript Examples

Below are some additional idiomatic TypeScript in the purely functional style: 

### List/zip.ts

```typescript
import { List } from "./_";

// Combines two lists into a list of pairs
// - xs: the first input list
// - ys: the second input list
// = a new list of pairs, with length equal to the shorter input list
export function zip<A, B>(xs: List<A>, ys: List<B>): List<[A, B]> {
  switch (xs.$) {
    case "Cons": {
      switch (ys.$) {
        case "Cons": {
          var head = [xs.head, ys.head] as [A,B];
          var tail = zip(xs.tail, ys.tail);
          return { $: "Cons", head, tail };
        }
        case "Nil": {
          return { $: "Nil" };
        }
      }
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### List/filter.ts

```typescript
import { List } from "./_";

// Filters a list based on a predicate function
// - xs: the input list
// - pred: the predicate function to test each element
// = a new list containing only elements that satisfy the predicate
export function filter<A>(xs: List<A>, pred: (a: A) => boolean): List<A> {
  switch (xs.$) {
    case "Cons": {
      var head = xs.head;
      var tail = filter(xs.tail, pred);
      return pred(xs.head) ? { $: "Cons", head, tail } : tail;
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### Tree/_.ts

```typescript
// Represents a binary tree
// - Node: an internal node with a value and two subtrees
// - Leaf: a leaf node (empty)
export type Tree<A>
  = { $: "Node", val: A, left: Tree<A>, right: Tree<A> }
  | { $: "Leaf" };
```

### Tree/sum.ts

```typescript
import { Tree } from "./_";

// Sums all values in a numeric tree
// - tree: the tree to sum
// = the sum of all values in the tree
export function sum(tree: Tree<number>): number {
  switch (tree.$) {
    case "Node": {
      var left  = sum(tree.left);
      var right = sum(tree.right);
      return tree.val + left + right;
    }
    case "Leaf": {
      return 0;
    }
  }
}
```

### V3/_.ts

```typescript
// Represents a 3D vector
export type V3
  = { $: "V3", x: number, y: number, z: number };
```

### V3/dot.ts

```typescript
import { V3 } from "./_";

// Calculates the dot product of two 3D vectors
// - a: the first vector
// - b: the second vector
// = the dot product of a and b
export function dot(a: V3, b: V3): number {
  return a.x * b.x + a.y * b.y + a.z * b.z;
}
```

---

# NOTES

- Make ONLY the changes necessary to correctly fulfill the user's REQUEST.

- Do NOT fix, remove, complete or alter any parts unrelated to the REQUEST.

- Pay attention to the user's style, and mimic it as close as possible.

- Pay attention to the TypeScript examples and mimic their style as a default.

- Consult TypeScript guide to emit idiomatic correct code.

- Do NOT use or assume the existence of files that weren't shown to you.

- Be precise and careful in your modifications.

---

# TASK

You will now be given the actual INPUT you must work with.

<FILE path="/home/travis/Projects/flow-based-programming/src/views/document/style.ejs">
<style>
  h2 { margin-top: 0; }
  .event-anchor { cursor: pointer; color: blue; text-decoration: underline; }
  
  body {
    font-family: Arial, sans-serif; 
    margin: 0; 
    padding: 0;
    background: #eee; 
  }
  .swimlane { 
    display: flex; 
    justify-content: space-between;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    overflow: hidden;
  }
  .input-swimlane, .output-swimlane {
    width: 33.33%; 
    width: calc(100%/3);
    height: 100%;
    padding: 0 1em;

  }
  .input-swimlane {
    border-right: 5px dashed #ccc;
  }
  .output-swimlane {
    border-left: 5px dashed #ccc;
  }
  .main-swimlane {
    width: 33.33%; 
    width: calc(100%/3);
    padding: 0 1em;
    height: 100%;
    overflow-y: auto;
  }
  .component {
    background: #fff; 
    border: 1px solid #111; 
    padding: 10px; 
    margin-bottom: 10px; 
    position: relative;
  }
  .input-anchors { 
    margin-top: 1em;
    background: #fff; 
    border: 1px solid #111;
    padding: 0.5em;
    margin-bottom: 10px; 
  }
  .output-anchors { 
    margin-bottom: 1em;
    background: #fff; 
    border: 1px solid #111; 
    padding: 0.5em 0.5em 0.2em; 
  }
  .output-anchor-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 5px;
  }
  .output-anchor-row button {
    flex: 1;
    margin: 0 2px;
  }
</style>
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/views/style.ejs">

<style>
  body { 
    font-family: Arial, sans-serif; 
    margin: 0; 
    padding: 20px;
    background: #eee; 
  }
  main {
    border: 1px solid #111;
    margin: 0 auto;
    max-width: 600px;
    padding: 1em;
    background: #fff;
  }
  h1 {
    margin: 0;
  }
  .navigation {
    margin: 0;
    padding: 0;
    list-style: none outside none;
    position: relative;
  }
  .navigation li {
    margin: 0 0.5em 0.5em 0;
    list-style-type: none;
    float: left;
  }
  .navigation li button {
    font-size: 1.2em;
  }
</style>
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/flows/example-flow.flow.ts">
import { FlowBase } from "../bases/flow.base"

export let exampleFlow = new FlowBase(
  'example-flow',
  [
    { componentId: 'main', componentRef: 'eventTrigger' },
    { componentId: 'gen1', componentRef: 'numberGenerator' },
    { componentId: 'mult1', componentRef: 'numberMultiplier' },
  ],
  [
    {
      fromComponent: 'gen1',
      fromEvent: 'numberGenerated',
      toComponent: 'mult1',
      toEvent: 'numberReceived',
    },
  ],
)
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/components/event-trigger/event-trigger.handler.ts">
import { CustomLogger } from '../../logger/custom-logger';
import { Injectable, Inject } from '@nestjs/common';
import { ComponentBase } from '../../bases/component.base';
import { AmqpConnection } from '@golevelup/nestjs-rabbitmq';
import { Server } from 'socket.io';

import { triggerEvent } from './trigger-event.event';

@Injectable()
export class EventTriggerComponent extends ComponentBase {
  public logger;

  constructor(
    @Inject('FLOW_ID') flowId: string,
    @Inject('COMPONENT_ID') componentId: string,
    @Inject(AmqpConnection) amqpConnection: AmqpConnection,
    @Inject('WEB_SOCKET_SERVER') protected server: Server
  ) {
    super('eventTrigger', 'Event Trigger', 'Handles HTMX requests and triggers events', flowId, componentId, amqpConnection, server);
    this.flowId = flowId;
    this.componentId = componentId;
    this.logger = new CustomLogger(`${flowId}.${componentId}`, this.amqpConnection);
  }

  async handleEvent(eventId: string, data: any): Promise<void> {
    switch (eventId) {
      case 'triggerEvent':
        await this.triggerEvent(data);
        break;
      default:
        break;
    }
  }

  private async triggerEvent(data): Promise<void> {
    return await triggerEvent(this, data);
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/components/number-generator/number-generator.handler.ts">
import { CustomLogger } from '../../logger/custom-logger';
import { Injectable, Inject } from '@nestjs/common';
import { ComponentBase } from '../../bases/component.base';
import { AmqpConnection } from '@golevelup/nestjs-rabbitmq';
import { Server } from 'socket.io';

import { startGenerating } from './start-generating.event';
import { stopGenerating } from './stop-generating.event';

@Injectable()
export class NumberGeneratorComponent extends ComponentBase {
  public logger;
  private interval: NodeJS.Timeout | null = null;

  constructor(
    @Inject('FLOW_ID') flowId: string,
    @Inject('COMPONENT_ID') componentId: string,
    @Inject(AmqpConnection) amqpConnection: AmqpConnection,
    @Inject('WEB_SOCKET_SERVER') protected server: Server
  ) {
    super('numberGenerator', 'Number Generator', 'Generates random numbers periodically', flowId, componentId, amqpConnection, server);
    this.flowId = flowId;
    this.componentId = componentId;
    this.logger = new CustomLogger(`${flowId}.${componentId}`, this.amqpConnection);
  }

  async handleEvent(eventId: string, data: any): Promise<void> {
    this.logger.log(`NumberGenerator (${this.flowId}) handling event: ${eventId}`);
    switch (eventId) {
      case "start": {
        this.logger.log(`NumberGenerator (${this.flowId}) starting number generation`);
        this.startGenerating(data);
        break;
      }
      case "stop": {
        this.logger.log(`NumberGenerator (${this.flowId}) stopping number generation`);
        this.stopGenerating(data);
        break;
      }
    }
  }

  private startGenerating(data): void {
    return startGenerating(this, data);
  }

  private stopGenerating(data): void {
    return stopGenerating(this, data);
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/components/number-multiplier/number-multiplier.handler.ts">
import { CustomLogger } from '../../logger/custom-logger';
import { Injectable, Inject } from '@nestjs/common';
import { ComponentBase } from '../../bases/component.base';
import { AmqpConnection } from '@golevelup/nestjs-rabbitmq';
import { Server } from 'socket.io';

import { numberReceived } from './number-received.event';

@Injectable()
export class NumberMultiplierComponent extends ComponentBase {
  public logger;

  constructor(
    @Inject('FLOW_ID') flowId: string,
    @Inject('COMPONENT_ID') componentId: string,
    @Inject(AmqpConnection) amqpConnection: AmqpConnection,
    @Inject('WEB_SOCKET_SERVER') protected server: Server
  ) {
    super('numberMultiplier', 'Number Multiplier', 'Multiplies received number by 2', flowId, componentId, amqpConnection, server);
    this.flowId = flowId;
    this.componentId = componentId;
    this.logger = new CustomLogger(`${flowId}.${componentId}`, this.amqpConnection);
  }

  async handleEvent(eventId: string, data: any): Promise<void> {
    this.logger.log(`NumberMultiplier handling event: ${eventId} ${JSON.stringify(data, null, 2)}`);
    switch (eventId) {
      case 'numberReceived':
        await this.numberReceived(data);
        break;
      default:
        break;
    }
  }

  private numberReceived(data): Promise<void> {
    return numberReceived(this, data);
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/services/flow-executor.service.ts">
import { Injectable, Logger } from '@nestjs/common';
import { AmqpConnection } from '@golevelup/nestjs-rabbitmq';
import { ComponentRegistry } from './component-registry.service';
import { Flow } from '../interfaces/flow.interface';
import { WebSocketGateway, WebSocketServer } from '@nestjs/websockets';
import { Server } from 'socket.io';
import { initializeComponent } from '../initializers/component.initialize';

@WebSocketGateway()
@Injectable()
export class FlowExecutorService {
  @WebSocketServer() server: Server;
  private readonly logger = new Logger(FlowExecutorService.name);

  constructor(
    private amqpConnection: AmqpConnection,
    private componentRegistry: ComponentRegistry
  ) {}

  async executeFlow(flow: Flow) {
    this.logger.log(`Executing flow: ${flow.id}`);

    // Create connections
    for (const connection of flow.connections) {
      this.logger.log(`Creating connection: ${connection.fromComponent}.${connection.fromEvent} -> ${connection.toComponent}.${connection.toEvent}`);
      await this.amqpConnection.publish('flow_exchange', 'createConnection', { ...connection, flowId: flow.id });
    }

    // Init components
    for (const component of flow.components) {
      this.logger.log(`Initializing component: ${component.componentId} (${component.componentRef}) for flow: ${flow.id}`);
      
      // initialize a new component instance
      let componentInstance = initializeComponent(flow, component, this.amqpConnection, this.server);

      // register new instance with component registery 
      this.componentRegistry.registerComponent(componentInstance);
 
      // publish init eventId command 
      try {
        await this.amqpConnection.publish('flow_exchange', 'componentEvent', {
          flowId: flow.id,
          componentId: component.componentId,
          componentRef: component.componentRef,
          eventId: 'init',
          data: {},
        });
      } catch (error) {
        this.logger.error(`Error initializing component ${component.componentId} for flow ${flow.id}:`, error);
      }
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/services/component-registry.service.ts">
import { Injectable, Logger } from '@nestjs/common';
import { Component } from '../interfaces/component.interface';

@Injectable()
export class ComponentRegistry {
  private components: Map<string, Component> = new Map();
  private readonly logger = new Logger(ComponentRegistry.name);

  registerComponent(component: Component) {
    const key = `${component.flowId}.${component.componentRef}`;
    this.logger.log(`Registering component: ${key}`);
    this.components.set(key, component);
  }

  getComponent(flowId: string, componentRef: string): Component | undefined {
    const key = `${flowId}.${componentRef}`;
    const component = this.components.get(key);
    if (!component) {
      this.logger.warn(`Component not found: ${key}`);
    }
    return component;
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/interfaces/flow.interface.ts">
export interface Flow {
  id: string;
  components: {
    componentId: string;
    componentRef: string;
  }[];
  connections: {
    fromComponent: string;
    fromEvent: string;
    toComponent: string;
    toEvent: string;
  }[];
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/interfaces/component.interface.ts">
export interface Component {
  componentRef: string;
  name: string;
  description?: string;
  flowId: string;
  componentId: string;
  handleEvent: (eventId: string, data: any) => Promise<void>;
  publish: (flowId: string, componentId: string, eventId: string, data: any) => Promise<void>;
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/initializers/flows.initialize.ts">
import { exampleFlow } from "src/flows/example-flow.flow";

const flows = [
  exampleFlow
];

export async function initializeFlows(flowExecutor) {
  flows.forEach(async (flow) => {
    await flowExecutor.executeFlow(flow);
  })
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/initializers/component.initialize.ts">
import { NumberGeneratorComponent } from '../components/number-generator/number-generator.handler';
import { NumberMultiplierComponent } from '../components/number-multiplier/number-multiplier.handler';
import { EventTriggerComponent } from '../components/event-trigger/event-trigger.handler';

export function initializeComponent(flow, component, amqpConnection, server) {
  let componentInstance;
  switch (component.componentRef) {
    case 'numberGenerator':
      componentInstance = new NumberGeneratorComponent(flow.id, component.componentId, amqpConnection, server);
      break;
    case 'numberMultiplier':
      componentInstance = new NumberMultiplierComponent(flow.id, component.componentId, amqpConnection, server);
      break;
    case 'eventTrigger':
      componentInstance = new EventTriggerComponent(flow.id, component.componentId, amqpConnection, server);
      break;
    default:
      this.logger.warn(`Unknown component type: ${component.componentRef}`);
      break;
  }
  return componentInstance;
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/controllers/app.controller.ts">
import { Logger, Controller, Get, Post, Render, Body, Param, Res, Req } from '@nestjs/common';
import { Response, Request } from 'express';
import { EventTriggerComponent } from '../components/event-trigger/event-trigger.handler';

@Controller()
export class AppController {
  private readonly logger = new Logger('AppController');

  constructor(private eventTriggerComponent: EventTriggerComponent) {}

  @Get()
  @Render('index')
  async root(@Req() req: Request) {
    return { message: 'steam engine = chart + document + logger // FBP' };
  }

  /**
   * svelte app generated in:
   * ./src/public/chart/*
   */

  @Get('document')
  @Render('document/index')
  async documentIndex(@Req() req: Request) {
    return { message: 'document - steam engine // FBP' };
  }

  @Get('logger')
  @Render('logger/index')
  async loggerIndex(@Req() req: Request) {
    return { message: 'logger - steam engine // FBP' };
  }

  @Post('trigger-event/:flowComponentEvent')
  async triggerEvent(
    @Param('flowComponentEvent') flowComponentEvent: string,
    @Body() data: any,
    @Res() res: Response
  ) {
    const fceArray = flowComponentEvent.split('.');
    const flowId = fceArray[0];
    const componentId = fceArray[1];
    const eventId = fceArray[2];
    
    this.logger.log(`[trigger-event] [${flowId}] [${componentId}] [${eventId}]`);
    data._flowId = flowId;
    data._componentId = componentId;
    data._eventId = eventId;
    await this.eventTriggerComponent.handleEvent('triggerEvent', data);
    res.sendStatus(200);
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/modules/app.module.ts">
import { RabbitMQModule } from '@golevelup/nestjs-rabbitmq';
import { ComponentRegistry } from '../services/component-registry.service';
import { FlowExecutorService } from '../services/flow-executor.service';
import { EventProcessor } from '../processors/event.processor';
import { CustomLogger } from '../logger/custom-logger';
import { AppController } from '../controllers/app.controller';

import { initializeAppModule, components } from '../initializers/app.initialize';

const metadata = {
  imports: [
    RabbitMQModule.forRoot(RabbitMQModule, {
      exchanges: [
        {
          name: 'flow_exchange',
          type: 'topic',
        },
      ],
      uri: 'amqp://localhost:5672',
      connectionInitOptions: { wait: false },
    }),
  ],
  controllers: [AppController],
  providers: [
    EventProcessor,
    ComponentRegistry,
    FlowExecutorService,
    {
      provide: 'FLOW_ID',
      useValue: 'example-flow', // Use a default flow ID
    },
    {
      provide: 'COMPONENT_ID',
      useFactory: () => `component-${Date.now()}`, // Generate a unique component ID
    },
    {
      provide: 'WEB_SOCKET_SERVER',
      useValue: null, // This will be set later in the FlowExecutorService
    },
    ...components,
    CustomLogger
  ],
  exports: [EventProcessor],
}

export const AppModule = initializeAppModule(metadata)
</FILE>
<FILE path="src/views/document/index.ejs" TARGET>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%- message %></title>
  <script src="https://unpkg.com/htmx.org@2.0.2"></script>
  <script src="https://unpkg.com/htmx.org@1.9.12/dist/ext/json-enc.js"></script>
  <script src="https://cdn.socket.io/4.3.2/socket.io.min.js"></script>
  <%- include('style') %>
</head>
<body>
  <div class="swimlane">
    <div id="input-swimlane" class="input-swimlane"></div>
    <div id="main-swimlane" class="main-swimlane">
      <div class="event-anchor input-anchors">
        <button onclick="loadConnectedComponents('example-flow', 'gen1', 'input', 'start')">start</button>
        <button onclick="loadConnectedComponents('example-flow', 'gen1', 'input', 'stop')">stop</button>
      </div>
      <div id="number-generator" class="component">
        <h2>Number Generator</h2>
        <button hx-post="/trigger-event/example-flow.gen1.start"
          hx-swap="none" 
          hx-ext='json-enc'
          hx-headers='{"Content-Type": "application/json"}'
          hx-vals='{}'
        >
          Start Generating
        </button>
        <button hx-post="/trigger-event/example-flow.gen1.stop"
          hx-swap="none" 
          hx-ext='json-enc'
          hx-headers='{"Content-Type": "application/json"}'
          hx-vals='{}'
        >
          Stop Generating
        </button>
        <!-- <div id="example-flow.gen1.number-generator"></div> -->
      </div>
      <div class="event-anchor output-anchors">
        <div class="output-anchor-row">
          <button>publish</button>
          <button onclick="loadConnectedComponents('example-flow', 'gen1', 'output', 'numberGenerated')">numberGenerated</button>
          <button onclick="loadConnectedComponents('example-flow', 'gen1', 'output', 'numberGenerated')">output</button>
        </div>
        <hr>
        <div class="output-anchor-row">
          <button>display</button>
          <button onclick="loadConnectedComponents('example-flow', 'mult1', 'output', 'number-multiplier')">number-multiplier</button>
          <button onclick="loadConnectedComponents('example-flow', 'mult1', 'output', 'number-multiplier')">output</button>
        </div>
        <hr>
        <div class="output-anchor-row">
          <button>display</button>
          <button onclick="loadConnectedComponents('example-flow', 'gen1', 'output', 'number-generator')">number-generator</button>
          <button onclick="loadConnectedComponents('example-flow', 'gen1', 'output', 'number-generator')">output</button>
        </div>
      </div>
    </div>
    <div id="output-swimlane" class="output-swimlane"></div>
  </div>

  <script>
    const socket = io();

    socket.on('display-flow-component-template-content', function(event) {
      const targetId = `${event.flowId}.${event.componentId}.${event.templateId}`;
      const targetElement = document.getElementById(targetId);
      if (targetElement) {
        targetElement.outerHTML = event.content;
      }
    });

    htmx.on("htmx:configRequest", (event) => {
      event.detail.headers['Content-Type'] = 'application/json';
    });

    function loadConnectedComponents(flowId, componentId, direction, eventId) {
      // This function would typically make an AJAX call to the server
      // to get the connected components. For now, we'll use mock data.
      const mockConnections = {
        'example-flow': {
          'gen1': {
            'input': ['start', 'stop'],
            'output': ['numberGenerated', 'number-generator']
          },
          'mult1': {
            'input': ['numberReceived'],
            'output': ['numberMultiplied', 'number-multiplier']
          }
        }
      };

      const connectedEvents = eventId ? [eventId] : mockConnections[flowId][componentId][direction];
      const swimlane = direction === 'input' ? document.getElementById('input-swimlane') : document.getElementById('output-swimlane');
      
      swimlane.innerHTML = '';
      connectedEvents.forEach(event => {
        const eventElement = document.createElement('div');
        eventElement.className = 'component';
        eventElement.innerHTML = `<div id="${flowId}.${componentId}.${event}"></div>`;
        swimlane.appendChild(eventElement);
      });
    }
  </script>
</body>
</html>
</FILE>
<REQUEST>
i want input event anchors to each be on their own row. within each row i want a button on the right that indicates type (publish or display) then in the middle a button that indicates the name then on the left a button that says input (when clicked it loads connected component)
</REQUEST>