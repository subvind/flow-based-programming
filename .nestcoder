# NESTCODER

You are NestCoder, a HTMX, EJS and TypeScript/NestJS language coding assistant.

## INPUT: 

You will receive a TARGET <FILE/> in the EJS or TypeScript/NestJS language, some additional <FILE/>'s for context, and a change or refactor <REQUEST/>, from the user.

## OUTPUT:

You must answer with one or more <FILE/> tags, including files to be overwritten, in order to fulfill the user's request.

---

# EXAMPLE NESTCODER USAGE

## Suppose you're given the following INPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/_.ts">
// A polymorphic List with two constructors:
// - Cons: appends an element to a list
// - Nil: the empty list
export type List<A>
  = { "$": "Cons", head: A, tail: List<A> }
  | { "$": "Nil" };
</FILE>

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts" TARGET>
// The map function for List, to be implemented
import { List } from "./_";

export function map<A, B>(fn: (a: A) => B, list: List<A>): List<B> {
  ?
}
</FILE>

<REQUEST>
complete the map function
</REQUEST>

## Then, you must answer with the following OUTPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts">
import { List } from "./_";

// Applies a function to each element of a list.
// - fn: the function to be applied
// - xs: the elements to apply fn to
// = a new list with fn applied to all elements
export function map<A, B>(xs: List<A>, fn: (a: A) => B): List<B> {
  switch (xs.$) {
    case "Cons": {
      var head = fn(xs.head);
      var tail = map(xs.tail, fn);
      return { $: "Cons", head, tail };
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
</FILE>

(Because it fulfills the user's request perfectly.)

---

# GUIDE FOR THE TYPESCRIPT LANGUAGE

- Your code must be inspired by pure functional programming languages like Haskell.

- Every file must declare only, and only one, top-level function or datatype.

- Functions must be pure, using switch instead of 'if-else' or 'case-of'.

- When defining local variables, align equal signs whenever possible.

- Use CamelCase for everything. (IMPORTANT)

- A 'Foo/Bar' top-level definition must be either on './Foo/Bar.ts' or './Foo/Bar/_.ts'. 

# GUIDE FOR THE EJS LANGUAGE

- Use HTMX for frontend.

## Top-Level Function

Every .ts file must define ONE top-level function. Example:

```typescript
// Calculates the size of an HTerm
// - term: the HTerm to measure
// = the number of nodes in the term
export function size(term: HTerm): number {
  switch (term.$) {
    case "Lam": {
      var bod_size = size(term.bod({$: "Var", nam: term.nam}));
      return 1 + bod_size;
    }
    case "App": {
      var fun_size = size(term.fun);
      var arg_size = size(term.arg);
      return 1 + fun_size + arg_size;
    }
    case "Var": {
      return 1;
    }
  }
}
```

Where:
- The function name is defined (e.g., 'size')
- Parameters are specified with their types (e.g., 'term: HTerm')
- The return type is specified (e.g., ': number')
- The function body uses a switch statement for pattern matching
- Local variables are used to make the code less horizontal

## Top-Level Datatype

Alternatively, a .ts file can also define a datatype (ADT). Example:

```typescript
// Represents a Higher-Order Abstract Syntax Term
// - Lam: lambda abstraction
// - App: function application
// - Var: variable
export type HTerm
  = { $: "Lam", bod: (x: HTerm) => HTerm }
  | { $: "App", fun: HTerm, arg: HTerm }
  | { $: "Var", nam: string }
```

ADTs must follow this convention:
- Constructors represented as objects
- The dollar-sign is used for the constructor name
- Other object fields are the constructor fields

## Idiomatic TypeScript Examples

Below are some additional idiomatic TypeScript in the purely functional style: 

### List/zip.ts

```typescript
import { List } from "./_";

// Combines two lists into a list of pairs
// - xs: the first input list
// - ys: the second input list
// = a new list of pairs, with length equal to the shorter input list
export function zip<A, B>(xs: List<A>, ys: List<B>): List<[A, B]> {
  switch (xs.$) {
    case "Cons": {
      switch (ys.$) {
        case "Cons": {
          var head = [xs.head, ys.head] as [A,B];
          var tail = zip(xs.tail, ys.tail);
          return { $: "Cons", head, tail };
        }
        case "Nil": {
          return { $: "Nil" };
        }
      }
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### List/filter.ts

```typescript
import { List } from "./_";

// Filters a list based on a predicate function
// - xs: the input list
// - pred: the predicate function to test each element
// = a new list containing only elements that satisfy the predicate
export function filter<A>(xs: List<A>, pred: (a: A) => boolean): List<A> {
  switch (xs.$) {
    case "Cons": {
      var head = xs.head;
      var tail = filter(xs.tail, pred);
      return pred(xs.head) ? { $: "Cons", head, tail } : tail;
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### Tree/_.ts

```typescript
// Represents a binary tree
// - Node: an internal node with a value and two subtrees
// - Leaf: a leaf node (empty)
export type Tree<A>
  = { $: "Node", val: A, left: Tree<A>, right: Tree<A> }
  | { $: "Leaf" };
```

### Tree/sum.ts

```typescript
import { Tree } from "./_";

// Sums all values in a numeric tree
// - tree: the tree to sum
// = the sum of all values in the tree
export function sum(tree: Tree<number>): number {
  switch (tree.$) {
    case "Node": {
      var left  = sum(tree.left);
      var right = sum(tree.right);
      return tree.val + left + right;
    }
    case "Leaf": {
      return 0;
    }
  }
}
```

### V3/_.ts

```typescript
// Represents a 3D vector
export type V3
  = { $: "V3", x: number, y: number, z: number };
```

### V3/dot.ts

```typescript
import { V3 } from "./_";

// Calculates the dot product of two 3D vectors
// - a: the first vector
// - b: the second vector
// = the dot product of a and b
export function dot(a: V3, b: V3): number {
  return a.x * b.x + a.y * b.y + a.z * b.z;
}
```

---

# NOTES

- Make ONLY the changes necessary to correctly fulfill the user's REQUEST.

- Do NOT fix, remove, complete or alter any parts unrelated to the REQUEST.

- Pay attention to the user's style, and mimic it as close as possible.

- Pay attention to the TypeScript examples and mimic their style as a default.

- Consult TypeScript guide to emit idiomatic correct code.

- Do NOT use or assume the existence of files that weren't shown to you.

- Be precise and careful in your modifications.

---

# TASK

You will now be given the actual INPUT you must work with.

<FILE path="/home/travis/Projects/flow-based-programming/src/views/document/component.ejs">
<% if (component) { %>
  <div id="<%- component.flowId %>.<%- component.componentId %>" class="swimlane-content">
    <div class="event-anchor input-anchors">
      <% component.ports.inputs.forEach((input, index) => { %>
        <% if (index !== 0) { %>
         <hr>
        <% } %>
        <button onclick="loadConnectedComponents('input', '<%- component.flowId %>', '<%- component.componentId %>', '<%- input %>', '<%- swimlaneId %>')">input</button>
        <div style="float: right;">
          <%- input %>
        </div>
        <br />
      <% }) %>
    </div>
    <div id="number-generator" class="component">
      <h2><%- component.slug %></h2>
      <p><%- component.description %> </p>
      <button hx-post="/trigger-event/<%- component.flowId %>.<%- component.componentId %>.start"
        hx-swap="none" 
        hx-ext='json-enc'
        hx-headers='{"Content-Type": "application/json"}'
        hx-vals='{}'
      >
        Start Generating
      </button>
      <button hx-post="/trigger-event/<%- component.flowId %>.<%- component.componentId %>.stop"
        hx-swap="none" 
        hx-ext='json-enc'
        hx-headers='{"Content-Type": "application/json"}'
        hx-vals='{}'
      >
        Stop Generating
      </button>
    </div>
    <div class="event-anchor output-anchors">
      <% component.ports.outputs.forEach((output, index) => { %>
        <% if (index !== 0) { %>
         <hr>
        <% } %>
        <button onclick="loadConnectedComponents('output', '<%- component.flowId %>', '<%- component.componentId %>', '<%- output %>', '<%- swimlaneId %>')" style="float: right;">output</button>
        <%- output %> <br />
      <% }) %>
    </div>
  </div>
<% } else { %>
  <p>no component found</p>  
<% } %>
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/views/document/methods.ejs">
<script>
  function loadConnectedComponents(direction, flowId, componentId, port, swimlaneId) {
    const mainSwimlane = document.getElementById(swimlaneId);
    const mainIndex = parseInt(mainSwimlane.getAttribute('data-index'));
    
    let targetIndex, targetSwimlane;
    if (direction === 'input') {
      targetIndex = mainIndex - 1;
      targetSwimlane = getOrCreateSwimlane(targetIndex);
    } else {
      targetIndex = mainIndex + 1;
      targetSwimlane = getOrCreateSwimlane(targetIndex);
    }

    const eventElement = document.createElement('div');
    eventElement.setAttribute("id", `${flowId}.${componentId}.${port}`);
    targetSwimlane.innerHTML = '';
    targetSwimlane.appendChild(eventElement);
    
    htmx.ajax('GET', `/document/${flowId}/${componentId}/${port}`, {
      swap: 'none',
      handler: (dom, event) => {
        document.getElementById(`${flowId}.${componentId}.${port}`).outerHTML = event.xhr.response;
      }
    });
  }

  function loadMainComponent(flowId, componentId) {
    const clickedSwimlane = event.target.closest('.swimlane');
    const clickedIndex = parseInt(clickedSwimlane.getAttribute('data-index'));
    
    // Move the clicked swimlane to the center
    const container = document.getElementById('swimlane-container');
    const swimlanes = Array.from(container.children);
    swimlanes.forEach(swimlane => {
      const currentIndex = parseInt(swimlane.getAttribute('data-index'));
      swimlane.setAttribute('data-index', currentIndex - clickedIndex);
    });

    // Update the main swimlane
    const mainSwimlane = document.getElementById('main-swimlane');
    mainSwimlane.setAttribute('data-index', '0');
    mainSwimlane.innerHTML = '';
    
    htmx.ajax('GET', `/document/${flowId}/${componentId}`, {
      swap: 'none',
      handler: (dom, event) => {
        mainSwimlane.innerHTML = event.xhr.response;
      }
    });

    // Remove unnecessary swimlanes
    swimlanes.forEach(swimlane => {
      const index = parseInt(swimlane.getAttribute('data-index'));
      if (Math.abs(index) > 5) {
        swimlane.remove();
      }
    });
  }

  function getOrCreateSwimlane(index) {
    let swimlane = document.querySelector(`.swimlane[data-index="${index}"]`);
    if (!swimlane) {
      swimlane = document.createElement('div');
      swimlane.className = 'swimlane';
      swimlane.setAttribute('data-index', index);
      swimlane.id = `swimlane-${index}`;
      
      const container = document.getElementById('swimlane-container');
      if (index < 0) {
        container.insertBefore(swimlane, container.firstChild);
      } else {
        container.appendChild(swimlane);
      }
    }
    return swimlane;
  }
</script>
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/views/document/style.ejs">
<style>
  h2 { margin-top: 0; }
  
  body {
    font-family: Arial, sans-serif; 
    margin: 0; 
    padding: 0;
    background: #eee; 
  }
  .swimlane-container {
    display: flex;
    overflow-x: auto;
    width: 100%;
    height: 100vh;
  }
  .swimlane {
    flex: 0 0 33.33%;
    min-width: 300px;
    padding: 0 2em;
    border-right: 4px dashed #ccc;
    overflow-y: auto;
  }
  .input-swimlane, .output-swimlane {
    width: 33.33%; 
    width: calc(100%/3);
    height: 100%;
    padding: 0 1em;

  }
  .input-swimlane {
    border-right: 5px dashed #ccc;
  }
  .output-swimlane {
    border-left: 5px dashed #ccc;
  }
  .main-swimlane {
    width: 33.33%; 
    width: calc(100%/3);
    padding: 0 1em;
    height: 100%;
    overflow-y: auto;
  }
  .component {
    background: #fff; 
    border: 1px solid #111; 
    padding: 10px; 
    margin-bottom: 10px; 
    position: relative;
  }
  .input-anchors { 
    margin-top: 1em;
    background: #fff; 
    border: 1px solid #111;
    padding: 0.5em; 
    margin-bottom: 10px; 
  }
  .input-anchor-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 5px;
  }
  .input-anchor-row button {
    flex: 1;
    margin: 0 2px;
  }
  .output-anchors { 
    margin-bottom: 1em;
    background: #fff; 
    border: 1px solid #111; 
    padding: 0.5em; 
  }
  .output-anchor-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 5px;
  }
  .output-anchor-row button {
    flex: 1;
    margin: 0 2px;
  }
</style>
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/views/document/connections.ejs">
<div id="<%- flowId %>.<%- componentId %>.<%- portId %>">
  <% if (port && port.dataMethod) { %>
    <% if (port.dataMethod === 'publish') { %>
      <% if (connections.length) { %>
        <% connections.forEach(connection => { %>
          <% if (connection.connectedTo) { %>
            <%- include('component', { component: connection.connectedTo }); %> 
          <% } else { %>
            <%- include('component', { component: connection.connectedFrom }); %> 
          <% } %>
        <% }) %>
      <% } else { %>
        <br />
        <div class="component">no connections found</div>  
      <% } %>
    <% } %>
  
    <% if (port.dataMethod === 'display') { %>
      <div class="event-anchor input-anchors">
        <button onclick="loadMainComponent('<%- flowId %>', '<%- componentId %>')">input</button>
        <div style="float: right;">
          <%- portId %> 
        </div>
        <br>
      </div>
      <div class="component">
        <div id="<%- displayHtmxId %>"></div>
      </div>
    <% } %>
  <% } else { %>
    <div>component not found</div>  
  <% } %>
</div>

</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/controllers/app.controller.ts">
import { Logger, Controller, Get, Post, Render, Body, Param, Res, Req } from '@nestjs/common';
import { Response, Request } from 'express';
import { EventTriggerComponent } from '../components/event-trigger/event-trigger.handler';

import { ComponentRegistry } from 'src/services/component-registry.service';
import { Connection } from 'src/interfaces/connection.interface';
import { Port } from 'src/interfaces/port.interface';

@Controller()
export class AppController {
  private readonly logger = new Logger('AppController');
  
  constructor(
    private eventTriggerComponent: EventTriggerComponent,
    private componentRegistry: ComponentRegistry
  ) {}

  @Get()
  @Render('index')
  async root(@Req() req: Request) {
    return { message: 'steam engine = chart + document + logger // FBP' };
  }

  /**
   * svelte app generated in:
   * ./src/public/chart/*
   */

  @Get('document')
  @Render('document/index')
  async documentIndex(@Req() req: Request) {
    return {
      selected: {
        flowId: 'example-flow',
        componentId: 'gen1'
      },
      message: 'document - steam engine // FBP' 
    };
  }

  @Get('document/:flowId/:componentId')
  @Render('document/component')
  async documentComponent(
    @Param('flowId') flowId: string,
    @Param('componentId') componentId: string
  ) {
    const component = this.componentRegistry.getComponent(flowId, componentId);
  
    if (component) {
      return {
        component,
        swimlaneId: 'main-swimlane'
      };
    }
    return {
      component: null,
      swimlaneId: 'main-swimlane'
    };
  }

  @Get('document/:flowId/:componentId/:portId')
  @Render('document/connections')
  async documentConnections( 
    @Param('flowId') flowId: string, 
    @Param('componentId') componentId: string,
    @Param('portId') portId: string,
  ) {
    const params = { flowId, componentId, portId };
    const component = this.componentRegistry.getComponent(flowId, componentId);
    
    if (component) {
      let port: Port = await component.findPort(portId);

      let connections: Connection[] = await component.findConnections(port);

      if (port) {
        if (port.dataMethod === 'publish') {
          return {
            ...params,
            port,
            connections
          };
        } else {
          let displayHtmxId = `${flowId}.${componentId}.${port.eventId}`
          return {
            ...params,
            port,
            displayHtmxId
          }
        }
      }
    }
    return {
      ...params,
      port: null
    };
  }

  @Get('logger')
  @Render('logger/index')
  async loggerIndex(@Req() req: Request) {
    return { message: 'logger - steam engine // FBP' };
  }

  @Post('trigger-event/:flowComponentEvent')
  async triggerEvent(
    @Param('flowComponentEvent') flowComponentEvent: string,
    @Body() data: any,
    @Res() res: Response
  ) {
    const fceArray = flowComponentEvent.split('.');
    const flowId = fceArray[0];
    const componentId = fceArray[1];
    const eventId = fceArray[2];
    
    this.logger.log(`[trigger-event] [${flowId}] [${componentId}] [${eventId}]`);
    data._flowId = flowId;
    data._componentId = componentId;
    data._eventId = eventId;
    await this.eventTriggerComponent.handleEvent('triggerEvent', data);
    res.sendStatus(200);
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/services/flow-executor.service.ts">
import { Injectable, Logger } from '@nestjs/common';
import { AmqpConnection } from '@golevelup/nestjs-rabbitmq';
import { ComponentRegistry } from './component-registry.service';
import { Flow } from '../interfaces/flow.interface';
import { WebSocketGateway, WebSocketServer } from '@nestjs/websockets';
import { Server } from 'socket.io';
import { initializeComponent } from '../initializers/component.initialize';

@WebSocketGateway()
@Injectable()
export class FlowExecutorService {
  @WebSocketServer() server: Server;
  private readonly logger = new Logger(FlowExecutorService.name);

  constructor(
    private amqpConnection: AmqpConnection,
    private componentRegistry: ComponentRegistry
  ) {}

  async executeFlow(flow: Flow) {
    this.logger.log(`Executing flow: ${flow.id}`);

    // Create connections
    for (const connection of flow.connections) {
      this.logger.log(`Creating connection: ${connection.fromComponent}.${connection.fromEvent} -> ${connection.toComponent}.${connection.toEvent}`);
      await this.amqpConnection.publish('flow_exchange', 'createConnection', { ...connection, flowId: flow.id });
    }

    // Init components
    for (const component of flow.components) {
      this.logger.log(`Initializing component: ${component.componentId} (${component.componentRef}) for flow: ${flow.id}`);
      
      // initialize a new component instance
      let componentInstance = initializeComponent(flow, component, this.amqpConnection, this.server);

      // register new instance with component registery 
      this.componentRegistry.registerComponent(componentInstance);

      // sync connections with component
      componentInstance.syncConnections(flow.connections, this.componentRegistry);
 
      // publish init eventId command 
      try {
        await this.amqpConnection.publish('flow_exchange', 'componentEvent', {
          flowId: flow.id,
          componentId: component.componentId, // dynamically defined
          componentRef: component.componentRef, // hard code defined
          eventId: 'init',
          data: {},
        });
      } catch (error) {
        this.logger.error(`Error initializing component ${component.componentId} for flow ${flow.id}:`, error);
      }
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/services/component-registry.service.ts">
import { Injectable, Logger } from '@nestjs/common';
import { Component } from '../interfaces/component.interface';

@Injectable()
export class ComponentRegistry {
  private components: Map<string, Component> = new Map();
  private readonly logger = new Logger(ComponentRegistry.name);

  registerComponent(component: Component) {
    const key = `${component.flowId}.${component.componentId}`;
    this.logger.log(`Registering component: ${key}`);
    this.components.set(key, component);
  }

  getComponent(flowId: string, componentId: string): Component | undefined {
    const key = `${flowId}.${componentId}`;
    const component = this.components.get(key);
    if (!component) {
      this.logger.warn(`Component not found: ${key}`);
    }
    return component;
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/interfaces/component.interface.ts">
import { Connection } from "./connection.interface";
import { Port } from "./port.interface";

export interface Component {
  ports: { inputs: string[]; outputs: string[]; };
  componentRef: string;
  slug: string;
  description?: string;
  flowId: string;
  componentId: string;
  handleEvent: (eventId: string, data: any) => Promise<void>;
  publish: (flowId: string, componentId: string, eventId: string, data: any) => Promise<void>;
  getPorts: () => Promise<{ inputs: Port[], outputs: Port[] }>;
  findPort: (portId: string) => Promise<Port>;
  findConnections: (port: Port) => Promise<Connection[]>
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/interfaces/flow.interface.ts">
import { Connection } from "./connection.interface";

export interface Flow {
  id: string;
  components: {
    componentId: string;
    componentRef: string;
  }[];
  connections: Connection[];
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/interfaces/connection.interface.ts">
import { Component } from "./component.interface";

export interface Connection {
  toFlow: string;
  toComponent: string;
  toEvent: string;
  connectedTo: Component | undefined;
  fromFlow: string;
  fromComponent: string;
  fromEvent: string;
  connectedFrom: Component | undefined;
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/bootstrap/app.bootstrap.ts">
import { NestFactory } from '@nestjs/core';
import { AppModule } from '../modules/app.module';
import { NestExpressApplication } from '@nestjs/platform-express';
import * as cookieParser from 'cookie-parser';
import { FlowExecutorService } from '../services/flow-executor.service';
import { CustomLogger } from '../logger/custom-logger';
import { resolve } from 'path';
import { initializeFlows } from '../initializers/flows.initialize';

export async function bootstrapApp(logger: CustomLogger): Promise<any> {
  const app = await NestFactory.create<NestExpressApplication>(AppModule, { logger });
  
  app.useStaticAssets(resolve('./src/public'));
  app.setBaseViewsDir(resolve('./src/views'));
  app.setViewEngine('ejs');

  app.use(cookieParser());

  // so browsers can use api
  app.enableCors({
    origin: '*',
  });

  const flowExecutor = app.get(FlowExecutorService);

  await app.init();

  logger.log('Starting flow execution...');
  await initializeFlows(flowExecutor);

  await app.listen(3000);
  logger.log('Application is running on: http://localhost:3000');

  return app;
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/modules/app.module.ts">
import { RabbitMQModule } from '@golevelup/nestjs-rabbitmq';
import { ComponentRegistry } from '../services/component-registry.service';
import { FlowExecutorService } from '../services/flow-executor.service';
import { EventProcessor } from '../processors/event.processor';
import { CustomLogger } from '../logger/custom-logger';
import { AppController } from '../controllers/app.controller';

import { initializeAppModule, components } from '../initializers/app.initialize';

const metadata = {
  imports: [
    RabbitMQModule.forRoot(RabbitMQModule, {
      exchanges: [
        {
          name: 'flow_exchange',
          type: 'topic',
        },
      ],
      uri: 'amqp://localhost:5672',
      connectionInitOptions: { wait: false },
    }),
  ],
  controllers: [AppController],
  providers: [
    EventProcessor,
    ComponentRegistry,
    FlowExecutorService,
    {
      provide: 'FLOW_ID',
      useValue: 'example-flow', // Use a default flow ID
    },
    {
      provide: 'COMPONENT_ID',
      useFactory: () => `component-${Date.now()}`, // Generate a unique component ID
    },
    {
      provide: 'WEB_SOCKET_SERVER',
      useValue: null, // This will be set later in the FlowExecutorService
    },
    ...components,
    CustomLogger
  ],
  exports: [EventProcessor],
}

export const AppModule = initializeAppModule(metadata)
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/main.ts">
import { NestFactory } from '@nestjs/core';
import { AppModule } from './modules/app.module';
import { CustomLogger } from './logger/custom-logger';
import { bootstrapApp } from './bootstrap/app.bootstrap';
import { AmqpConnection } from '@golevelup/nestjs-rabbitmq';

async function bootstrap(): Promise<void> {
  const app = await NestFactory.create(AppModule);
  
  // Get the AmqpConnection from the app context
  const amqpConnection = app.get(AmqpConnection);
  
  // Create the CustomLogger with the AmqpConnection
  const logger = new CustomLogger('Bootstrap', amqpConnection);
  
  try {
    logger.log('Starting main application...');
    const mainApp = await bootstrapApp(logger);

    process.on('SIGINT', async () => {
      CustomLogger.clearSTDOUT();
      await mainApp.close();
      process.exit();
    });
  } catch (error) {
    logger.error(`Bootstrap error: ${error.message}`, error.stack);
    process.exit(1);
  }
}

bootstrap().catch((error) => {
  console.error('Unhandled bootstrap error:', error);
  process.exit(1);
});
</FILE>
<FILE path="src/views/document/index.ejs" TARGET>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%- message %></title>
  <script src="https://unpkg.com/htmx.org@2.0.2"></script>
  <script src="https://unpkg.com/htmx.org@1.9.12/dist/ext/json-enc.js"></script>
  <script src="https://cdn.socket.io/4.3.2/socket.io.min.js"></script>
  <%- include('style') %>
</head>
<body>
  <div id="swimlane-container" class="swimlane-container">
    <div id="main-swimlane" class="swimlane" data-index="0"
         hx-get="/document/<%= selected.flowId %>/<%= selected.componentId %>"
         hx-trigger="load"
         hx-target="#main-swimlane">
      <!-- Main component will be loaded here -->
    </div>
  </div>

  <script>
    const socket = io();

    socket.on('display-flow-component-template-content', function(event) {
      const targetId = `${event.flowId}.${event.componentId}.${event.templateId}`;
      const targetElement = document.getElementById(targetId);
      if (targetElement) {
        targetElement.outerHTML = event.content;
      }
    });

    htmx.on("htmx:configRequest", (event) => {
      event.detail.headers['Content-Type'] = 'application/json';
    });
  </script>
  <%- include('methods') %> 
</body>
</html>
</FILE>
<REQUEST>
component.ejs and method.ejs should both include swimlane id because none of the swimlanes are loading properly except main.... also swimlaneId needs to exists for connectedComponents
</REQUEST>