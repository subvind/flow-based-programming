# NESTCODER

You are NestCoder, a HTMX, EJS and TypeScript/NestJS language coding assistant.

## INPUT: 

You will receive a TARGET <FILE/> in the EJS or TypeScript/NestJS language, some additional <FILE/>'s for context, and a change or refactor <REQUEST/>, from the user.

## OUTPUT:

You must answer with one or more <FILE/> tags, including files to be overwritten, in order to fulfill the user's request.

---

# EXAMPLE NESTCODER USAGE

## Suppose you're given the following INPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/_.ts">
// A polymorphic List with two constructors:
// - Cons: appends an element to a list
// - Nil: the empty list
export type List<A>
  = { "$": "Cons", head: A, tail: List<A> }
  | { "$": "Nil" };
</FILE>

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts" TARGET>
// The map function for List, to be implemented
import { List } from "./_";

export function map<A, B>(fn: (a: A) => B, list: List<A>): List<B> {
  ?
}
</FILE>

<REQUEST>
complete the map function
</REQUEST>

## Then, you must answer with the following OUTPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts">
import { List } from "./_";

// Applies a function to each element of a list.
// - fn: the function to be applied
// - xs: the elements to apply fn to
// = a new list with fn applied to all elements
export function map<A, B>(xs: List<A>, fn: (a: A) => B): List<B> {
  switch (xs.$) {
    case "Cons": {
      var head = fn(xs.head);
      var tail = map(xs.tail, fn);
      return { $: "Cons", head, tail };
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
</FILE>

(Because it fulfills the user's request perfectly.)

---

# GUIDE FOR THE TYPESCRIPT LANGUAGE

- Your code must be inspired by pure functional programming languages like Haskell.

- Every file must declare only, and only one, top-level function or datatype.

- Functions must be pure, using switch instead of 'if-else' or 'case-of'.

- When defining local variables, align equal signs whenever possible.

- Use CamelCase for everything. (IMPORTANT)

- A 'Foo/Bar' top-level definition must be either on './Foo/Bar.ts' or './Foo/Bar/_.ts'. 

# GUIDE FOR THE EJS LANGUAGE

- Use HTMX for frontend.

## Top-Level Function

Every .ts file must define ONE top-level function. Example:

```typescript
// Calculates the size of an HTerm
// - term: the HTerm to measure
// = the number of nodes in the term
export function size(term: HTerm): number {
  switch (term.$) {
    case "Lam": {
      var bod_size = size(term.bod({$: "Var", nam: term.nam}));
      return 1 + bod_size;
    }
    case "App": {
      var fun_size = size(term.fun);
      var arg_size = size(term.arg);
      return 1 + fun_size + arg_size;
    }
    case "Var": {
      return 1;
    }
  }
}
```

Where:
- The function name is defined (e.g., 'size')
- Parameters are specified with their types (e.g., 'term: HTerm')
- The return type is specified (e.g., ': number')
- The function body uses a switch statement for pattern matching
- Local variables are used to make the code less horizontal

## Top-Level Datatype

Alternatively, a .ts file can also define a datatype (ADT). Example:

```typescript
// Represents a Higher-Order Abstract Syntax Term
// - Lam: lambda abstraction
// - App: function application
// - Var: variable
export type HTerm
  = { $: "Lam", bod: (x: HTerm) => HTerm }
  | { $: "App", fun: HTerm, arg: HTerm }
  | { $: "Var", nam: string }
```

ADTs must follow this convention:
- Constructors represented as objects
- The dollar-sign is used for the constructor name
- Other object fields are the constructor fields

## Idiomatic TypeScript Examples

Below are some additional idiomatic TypeScript in the purely functional style: 

### List/zip.ts

```typescript
import { List } from "./_";

// Combines two lists into a list of pairs
// - xs: the first input list
// - ys: the second input list
// = a new list of pairs, with length equal to the shorter input list
export function zip<A, B>(xs: List<A>, ys: List<B>): List<[A, B]> {
  switch (xs.$) {
    case "Cons": {
      switch (ys.$) {
        case "Cons": {
          var head = [xs.head, ys.head] as [A,B];
          var tail = zip(xs.tail, ys.tail);
          return { $: "Cons", head, tail };
        }
        case "Nil": {
          return { $: "Nil" };
        }
      }
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### List/filter.ts

```typescript
import { List } from "./_";

// Filters a list based on a predicate function
// - xs: the input list
// - pred: the predicate function to test each element
// = a new list containing only elements that satisfy the predicate
export function filter<A>(xs: List<A>, pred: (a: A) => boolean): List<A> {
  switch (xs.$) {
    case "Cons": {
      var head = xs.head;
      var tail = filter(xs.tail, pred);
      return pred(xs.head) ? { $: "Cons", head, tail } : tail;
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### Tree/_.ts

```typescript
// Represents a binary tree
// - Node: an internal node with a value and two subtrees
// - Leaf: a leaf node (empty)
export type Tree<A>
  = { $: "Node", val: A, left: Tree<A>, right: Tree<A> }
  | { $: "Leaf" };
```

### Tree/sum.ts

```typescript
import { Tree } from "./_";

// Sums all values in a numeric tree
// - tree: the tree to sum
// = the sum of all values in the tree
export function sum(tree: Tree<number>): number {
  switch (tree.$) {
    case "Node": {
      var left  = sum(tree.left);
      var right = sum(tree.right);
      return tree.val + left + right;
    }
    case "Leaf": {
      return 0;
    }
  }
}
```

### V3/_.ts

```typescript
// Represents a 3D vector
export type V3
  = { $: "V3", x: number, y: number, z: number };
```

### V3/dot.ts

```typescript
import { V3 } from "./_";

// Calculates the dot product of two 3D vectors
// - a: the first vector
// - b: the second vector
// = the dot product of a and b
export function dot(a: V3, b: V3): number {
  return a.x * b.x + a.y * b.y + a.z * b.z;
}
```

---

# NOTES

- Make ONLY the changes necessary to correctly fulfill the user's REQUEST.

- Do NOT fix, remove, complete or alter any parts unrelated to the REQUEST.

- Pay attention to the user's style, and mimic it as close as possible.

- Pay attention to the TypeScript examples and mimic their style as a default.

- Consult TypeScript guide to emit idiomatic correct code.

- Do NOT use or assume the existence of files that weren't shown to you.

- Be precise and careful in your modifications.

---

# TASK

You will now be given the actual INPUT you must work with.

<FILE path="/home/travis/Projects/flow-based-programming/src/controllers/app.controller.ts">
import { Logger, Controller, Get, Post, Render, Body, Param, Res, Req } from '@nestjs/common';
import { Response, Request } from 'express';
import { EventTriggerComponent } from '../components/event-trigger/event-trigger.handler';

@Controller()
export class AppController {
  private readonly logger = new Logger('AppController');

  constructor(private eventTriggerComponent: EventTriggerComponent) {}

  @Get()
  @Render('index')
  async root(@Req() req: Request) {
    return { message: 'Flow Based Programming' };
  }

  @Post('trigger-event/:flowComponentEvent')
  async triggerEvent(
    @Param('flowComponentEvent') flowComponentEvent: string,
    @Body() data: any,
    @Res() res: Response
  ) {
    const fceArray = flowComponentEvent.split('.');
    const flowId = fceArray[0];
    const componentId = fceArray[1];
    const eventId = fceArray[2];
    
    this.logger.log(`[trigger-event] [${flowId}] [${componentId}] [${eventId}]`);
    data._flowId = flowId;
    data._componentId = componentId;
    data._eventId = eventId;
    await this.eventTriggerComponent.handleEvent('triggerEvent', data);
    res.sendStatus(200);
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/components/event-trigger/event-trigger.handler.ts">
import { CustomLogger } from '../../logger/custom-logger';
import { Injectable, Inject } from '@nestjs/common';
import { ComponentService } from '../../bases/component.base';
import { AmqpConnection } from '@golevelup/nestjs-rabbitmq';
import { Server } from 'socket.io';

import { triggerEvent } from './trigger-event.event';

@Injectable()
export class EventTriggerComponent extends ComponentService {
  public logger;

  constructor(
    @Inject('FLOW_ID') flowId: string,
    @Inject('COMPONENT_ID') componentId: string,
    @Inject(AmqpConnection) amqpConnection: AmqpConnection,
    @Inject('WEB_SOCKET_SERVER') protected server: Server
  ) {
    super('eventTrigger', 'Event Trigger', 'Handles HTMX requests and triggers events', flowId, componentId, amqpConnection, server);
    this.flowId = flowId;
    this.componentId = componentId;
    this.logger = new CustomLogger(`${flowId}.${componentId}`, this.amqpConnection);
  }

  async handleEvent(eventId: string, data: any): Promise<void> {
    switch (eventId) {
      case 'triggerEvent':
        await this.triggerEvent(data);
        break;
      default:
        break;
    }
  }

  private async triggerEvent(data): Promise<void> {
    return await triggerEvent(this, data);
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/components/event-trigger/trigger-event.event.ts">
export async function triggerEvent(process, message): Promise<void> {
  const { _flowId, _componentId, _eventId } = message;
  return await process.publish(_flowId, _componentId, _eventId, message);
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/components/number-generator/start-generating.event.ts">
export function startGenerating (process, message) {
  const fid = process.flowId;
  const cid = process.componentId;

  process.logger.log(`NumberGenerator (${process.flowId}) startGenerating method called`);
  if (process.interval) {
    clearInterval(process.interval);
  }
  process.interval = setInterval(async () => {
    var randomNumber = Math.random();
    process.logger.log(`NumberGenerator (${process.flowId}) generated number: ${randomNumber}`);
    await process.publish(fid, cid, 'numberGenerated', randomNumber);
    
    // Send HTMX update
    await process.display(fid, cid, 'number-generator', {
      number: randomNumber,
      timestamp: Date.now()
    });
  }, 1000);
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/components/number-generator/stop-generating.event.ts">
export function stopGenerating(process, message) {
  process.logger.log(`NumberGenerator (${process.flowId}) stopGenerating method called`);
  if (process.interval) {
    clearInterval(process.interval);
    process.interval = null;
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/services/component-registry.service.ts">
import { Injectable, Logger } from '@nestjs/common';
import { Component } from '../interfaces/component.interface';

@Injectable()
export class ComponentRegistry {
  private components: Map<string, Component> = new Map();
  private readonly logger = new Logger(ComponentRegistry.name);

  registerComponent(component: Component) {
    const key = `${component.flowId}.${component.componentRef}`;
    this.logger.log(`Registering component: ${key}`);
    this.components.set(key, component);
  }

  getComponent(flowId: string, componentRef: string): Component | undefined {
    const key = `${flowId}.${componentRef}`;
    const component = this.components.get(key);
    if (!component) {
      this.logger.warn(`Component not found: ${key}`);
    }
    return component;
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/services/flow-executor.service.ts">
import { Injectable, Logger } from '@nestjs/common';
import { AmqpConnection } from '@golevelup/nestjs-rabbitmq';
import { ComponentRegistry } from './component-registry.service';
import { Flow } from '../interfaces/flow.interface';
import { WebSocketGateway, WebSocketServer } from '@nestjs/websockets';
import { Server } from 'socket.io';
import { initializeComponent } from '../initializers/component.initialize';

@WebSocketGateway()
@Injectable()
export class FlowExecutorService {
  @WebSocketServer() server: Server;
  private readonly logger = new Logger(FlowExecutorService.name);

  constructor(
    private amqpConnection: AmqpConnection,
    private componentRegistry: ComponentRegistry
  ) {}

  async executeFlow(flow: Flow) {
    this.logger.log(`Executing flow: ${flow.id}`);

    // Create connections
    for (const connection of flow.connections) {
      this.logger.log(`Creating connection: ${connection.fromComponent}.${connection.fromEvent} -> ${connection.toComponent}.${connection.toEvent}`);
      await this.amqpConnection.publish('flow_exchange', 'createConnection', { ...connection, flowId: flow.id });
    }

    // Init components
    for (const component of flow.components) {
      this.logger.log(`Initializing component: ${component.componentId} (${component.componentRef}) for flow: ${flow.id}`);
      
      // initialize a new component instance
      let componentInstance = initializeComponent(flow, component, this.amqpConnection, this.server);

      // register new instance with component registery 
      this.componentRegistry.registerComponent(componentInstance);
 
      // publish init eventId command 
      try {
        await this.amqpConnection.publish('flow_exchange', 'componentEvent', {
          flowId: flow.id,
          componentId: component.componentId,
          componentRef: component.componentRef,
          eventId: 'init',
          data: {},
        });
      } catch (error) {
        this.logger.error(`Error initializing component ${component.componentId} for flow ${flow.id}:`, error);
      }
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/templates/event-trigger.ejs">
<div id="<%= _flowId %>.<%= _componentId %>.<%= _templateId %>" class="event-trigger-content">
  <h3>Event Triggered</h3>
  <p>Flow ID: <%= flowId %></p>
  <p>Component ID: <%= componentId %></p>
  <p>Template ID: <%= templateId %></p>
  <% if (typeof data === 'object') { %>
    <ul>
      <% for (const [key, value] of Object.entries(data)) { %>
        <li><strong><%= key %>:</strong> <%= value %></li>
      <% } %>
    </ul>
  <% } else { %>
    <p>Data: <%= data %></p>
  <% } %>
  <p>Timestamp: <%= new Date().toISOString() %></p>
</div>
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/flows/example-flow.flow.ts">
import { FlowService } from "../bases/flow.base"

export let exampleFlow = new FlowService(
  'example-flow',
  [
    { componentId: 'main', componentRef: 'eventTrigger' },
    { componentId: 'gen1', componentRef: 'numberGenerator' },
    { componentId: 'mult1', componentRef: 'numberMultiplier' },
  ],
  [
    {
      fromComponent: 'gen1',
      fromEvent: 'numberGenerated',
      toComponent: 'mult1',
      toEvent: 'numberReceived',
    },
  ],
)
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/processors/event.processor.ts">
import { Injectable, Logger } from '@nestjs/common';
import { RabbitSubscribe } from '@golevelup/nestjs-rabbitmq';
import { ComponentRegistry } from '../services/component-registry.service';

@Injectable()
export class EventProcessor {
  private readonly logger = new Logger(EventProcessor.name);
  private connections: Map<string, { toFlow: string; toComponent: string; toEvent: string }> = new Map();

  constructor(private componentRegistry: ComponentRegistry) {}

  @RabbitSubscribe({
    exchange: 'flow_exchange',
    routingKey: 'componentEvent',
    queue: 'component_event_queue',
  })
  async handleComponentEvent(msg: {flowId: string, componentId: string, eventId: string, data: any}) {
    const { flowId, componentId, eventId, data: eventData } = msg;
    this.logger.log(`[handleComponentEvent] [${flowId}.${componentId}.${eventId}] data: ${JSON.stringify(eventData)}`);
    
    const component = this.componentRegistry.getComponent(flowId, componentId);
    if (component) {
      this.logger.log(`Passing event to component: ${componentId}`);
      await component.handleEvent(eventId, eventData);

      // Check if there's a connection for this event
      const connectionKey = `${flowId}.${componentId}.${eventId}`;
      const connection = this.connections.get(connectionKey);
      if (connection) {
        const { toFlow, toComponent, toEvent } = connection;
        this.logger.log(`[forwardingComponentEvent] [${toFlow}.${toComponent}.${toEvent}]`);
        
        const targetComponent = this.componentRegistry.getComponent(toFlow, toComponent);
        if (targetComponent) {
          this.logger.log(`Forwarding event to component: ${targetComponent.componentId}`);
          await targetComponent.handleEvent(toEvent, eventData);
        } else {
          this.logger.warn(`Target component not found: ${toComponent} in flow: ${toFlow}`);
        }
      }
    } else {
      this.logger.warn(`Component not found: ${flowId}.${componentId}`);
    }
  }

  @RabbitSubscribe({
    exchange: 'flow_exchange',
    routingKey: 'createConnection',
    queue: 'create_connection_queue',
  })
  async createConnection(msg: {flowId: string, fromComponent: string, fromEvent: string, toComponent: string, toEvent: string}) {
    const { flowId, fromComponent, fromEvent, toComponent, toEvent } = msg;
    this.logger.log(`Received createConnection: ${flowId}.${fromComponent}.${fromEvent} -> ${toComponent}.${toEvent}`);
    
    const connectionKey = `${flowId}.${fromComponent}.${fromEvent}`;
    this.connections.set(connectionKey, { toFlow: flowId, toComponent, toEvent });
    this.logger.log(`Connection created: ${connectionKey} -> ${toComponent}.${toEvent}`);
    
    return { success: true, message: 'Connection created successfully' };
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/bootstrap/app.bootstrap.ts">
import { NestFactory } from '@nestjs/core';
import { AppModule } from '../modules/app.module';
import { NestExpressApplication } from '@nestjs/platform-express';
import * as cookieParser from 'cookie-parser';
import { FlowExecutorService } from '../services/flow-executor.service';
import { CustomLogger } from '../logger/custom-logger';
import { resolve } from 'path';
import { initializeFlows } from '../initializers/flows.initialize';

export async function bootstrapApp(logger: CustomLogger): Promise<any> {
  const app = await NestFactory.create<NestExpressApplication>(AppModule, { logger });
  
  app.useStaticAssets(resolve('./src/public'));
  app.setBaseViewsDir(resolve('./src/views'));
  app.setViewEngine('ejs');

  app.use(cookieParser());

  // so browsers can use api
  app.enableCors({
    origin: '*',
  });

  const flowExecutor = app.get(FlowExecutorService);

  await app.init();

  logger.log('Starting flow execution...');
  await initializeFlows(flowExecutor);

  await app.listen(3000);
  logger.log('Application is running on: http://localhost:3000');

  return app;
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/modules/app.module.ts">
import { RabbitMQModule } from '@golevelup/nestjs-rabbitmq';
import { ComponentRegistry } from '../services/component-registry.service';
import { FlowExecutorService } from '../services/flow-executor.service';
import { EventProcessor } from '../processors/event.processor';
import { CustomLogger } from '../logger/custom-logger';
import { AppController } from '../controllers/app.controller';

import { initializeAppModule, components } from '../initializers/app.initialize';

const metadata = {
  imports: [
    RabbitMQModule.forRoot(RabbitMQModule, {
      exchanges: [
        {
          name: 'flow_exchange',
          type: 'topic',
        },
      ],
      uri: 'amqp://localhost:5672',
      connectionInitOptions: { wait: false },
    }),
  ],
  controllers: [AppController],
  providers: [
    EventProcessor,
    ComponentRegistry,
    FlowExecutorService,
    {
      provide: 'FLOW_ID',
      useValue: 'example-flow', // Use a default flow ID
    },
    {
      provide: 'COMPONENT_ID',
      useFactory: () => `component-${Date.now()}`, // Generate a unique component ID
    },
    {
      provide: 'WEB_SOCKET_SERVER',
      useValue: null, // This will be set later in the FlowExecutorService
    },
    ...components,
    CustomLogger
  ],
  exports: [EventProcessor],
}

export const AppModule = initializeAppModule(metadata)
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/start:dev.stdout.txt">
c[[90m7:52:38 PM[0m] Starting compilation in watch mode...

[[90m7:52:39 PM[0m] Found 0 errors. Watching for file changes.

[32m[Nest] 181750  - [39m08/21/2024, 7:52:40 PM [32m    LOG[39m [38;5;3m[NestFactory] [39m[32mStarting Nest application...[39m
[32m[Nest] 181750  - [39m08/21/2024, 7:52:40 PM [32m    LOG[39m [38;5;3m[AmqpConnection] [39m[32mTrying to connect to RabbitMQ broker (default)[39m
[32m[Nest] 181750  - [39m08/21/2024, 7:52:40 PM [32m    LOG[39m [38;5;3m[RabbitMQModule] [39m[32mSuccessfully connected to RabbitMQ[39m
[32m[Nest] 181750  - [39m08/21/2024, 7:52:40 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mDiscoveryModule dependencies initialized[39m[38;5;3m +8ms[39m
[32m[Nest] 181750  - [39m08/21/2024, 7:52:40 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mRabbitMQModule dependencies initialized[39m[38;5;3m +1ms[39m
[32m[Nest] 181750  - [39m08/21/2024, 7:52:40 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mAppModule dependencies initialized[39m[38;5;3m +0ms[39m
[2024-08-22T00:52:40.028Z] [LOG] [Bootstrap] Starting main application...
[2024-08-22T00:52:40.029Z] [LOG] [Bootstrap] [NestFactory] Starting Nest application...
[2024-08-22T00:52:40.031Z] [LOG] [Bootstrap] [AmqpConnection] Trying to connect to RabbitMQ broker (default)
[2024-08-22T00:52:40.032Z] [LOG] [Bootstrap] [RabbitMQModule] Successfully connected to RabbitMQ
[2024-08-22T00:52:40.032Z] [LOG] [Bootstrap] [InstanceLoader] DiscoveryModule dependencies initialized
[2024-08-22T00:52:40.033Z] [LOG] [Bootstrap] [InstanceLoader] RabbitMQModule dependencies initialized
[2024-08-22T00:52:40.033Z] [LOG] [Bootstrap] [InstanceLoader] AppModule dependencies initialized
[2024-08-22T00:52:40.039Z] [LOG] [Bootstrap] [WebSocketsController] NumberGeneratorComponent subscribed to the "client-event" message
[2024-08-22T00:52:40.040Z] [LOG] [Bootstrap] [WebSocketsController] NumberMultiplierComponent subscribed to the "client-event" message
[2024-08-22T00:52:40.040Z] [LOG] [Bootstrap] [WebSocketsController] EventTriggerComponent subscribed to the "client-event" message
[2024-08-22T00:52:40.041Z] [LOG] [Bootstrap] [RoutesResolver] AppController {/}:
[2024-08-22T00:52:40.043Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/, GET} route
[2024-08-22T00:52:40.043Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/trigger-event/:flowComponentEvent, POST} route
[2024-08-22T00:52:40.044Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724287960031
[2024-08-22T00:52:40.044Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724287960031
[2024-08-22T00:52:40.044Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724287960031
[2024-08-22T00:52:40.045Z] [LOG] [Bootstrap] [RabbitMQModule] Initializing RabbitMQ Handlers
[2024-08-22T00:52:40.046Z] [LOG] [Bootstrap] [RabbitMQModule] Registering rabbitmq handlers from EventProcessor
[2024-08-22T00:52:40.047Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.handleComponentEvent {subscribe} -> flow_exchange::componentEvent::component_event_queue
[2024-08-22T00:52:40.047Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.createConnection {subscribe} -> flow_exchange::createConnection::create_connection_queue
[2024-08-22T00:52:40.047Z] [LOG] [Bootstrap] [RabbitMQModule] Initializing RabbitMQ Handlers
[2024-08-22T00:52:40.047Z] [LOG] [Bootstrap] [RabbitMQModule] Registering rabbitmq handlers from EventProcessor
[2024-08-22T00:52:40.047Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.handleComponentEvent {subscribe} -> flow_exchange::componentEvent::component_event_queue
[2024-08-22T00:52:40.047Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.createConnection {subscribe} -> flow_exchange::createConnection::create_connection_queue
[2024-08-22T00:52:40.048Z] [LOG] [Bootstrap] [NestApplication] Nest application successfully started
[2024-08-22T00:52:40.048Z] [LOG] [Bootstrap] Starting flow execution...
[2024-08-22T00:52:40.048Z] [LOG] [Bootstrap] [FlowExecutorService] Executing flow: example-flow
[2024-08-22T00:52:40.048Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: gen1.numberGenerated -> mult1.numberReceived
[2024-08-22T00:52:40.050Z] [LOG] [Bootstrap] Application is running on: http://localhost:3000
[2024-08-22T00:52:40.100Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected to RabbitMQ broker (default)
[2024-08-22T00:52:40.102Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected to RabbitMQ broker (default)
[2024-08-22T00:52:40.109Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected a RabbitMQ channel "AmqpConnection"
[2024-08-22T00:52:40.109Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected a RabbitMQ channel "AmqpConnection"
[2024-08-22T00:52:40.110Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.gen1.numberGenerated -> mult1.numberReceived
[2024-08-22T00:52:40.110Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.gen1.numberGenerated -> mult1.numberReceived
[2024-08-22T00:52:40.110Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: main (eventTrigger) for flow: example-flow
[2024-08-22T00:52:40.110Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.main
[2024-08-22T00:52:40.110Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-22T00:52:40.111Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.main.init] data: {}
[2024-08-22T00:52:40.111Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: main
[2024-08-22T00:52:40.111Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: gen1 (numberGenerator) for flow: example-flow
[2024-08-22T00:52:40.111Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.gen1
[2024-08-22T00:52:40.156Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.init] data: {}
[2024-08-22T00:52:40.156Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-22T00:52:40.157Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: init
[2024-08-22T00:52:40.157Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: mult1 (numberMultiplier) for flow: example-flow
[2024-08-22T00:52:40.157Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.mult1
[2024-08-22T00:52:40.158Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.mult1.init] data: {}
[2024-08-22T00:52:40.158Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: mult1
[2024-08-22T00:52:40.158Z] [LOG] [example-flow.mult1] NumberMultiplier handling event: init {}
[2024-08-22T01:41:18.269Z] [LOG] [Bootstrap] [AppController] [trigger-event] [example-flow] [gen1] [start]
[2024-08-22T01:41:18.269Z] [LOG] [example-flow.component-1724287960031] Publishing: example-flow.gen1.start -> [object Object]
[2024-08-22T01:41:18.271Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.start] data: {"_flowId":"example-flow","_componentId":"gen1","_eventId":"start"}
[2024-08-22T01:41:18.271Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-22T01:41:18.271Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: start
[2024-08-22T01:41:18.271Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) starting number generation
[2024-08-22T01:41:18.271Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) startGenerating method called
[2024-08-22T01:41:19.272Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) generated number: 0.6627034714253173
[2024-08-22T01:41:19.272Z] [LOG] [example-flow.gen1] Publishing: example-flow.gen1.numberGenerated -> 0.6627034714253173
[2024-08-22T01:41:19.274Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.numberGenerated] data: 0.6627034714253173
[2024-08-22T01:41:19.274Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-22T01:41:19.274Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: numberGenerated
[2024-08-22T01:41:19.274Z] [LOG] [Bootstrap] [EventProcessor] [forwardingComponentEvent] [example-flow.mult1.numberReceived]
[2024-08-22T01:41:19.274Z] [LOG] [Bootstrap] [EventProcessor] Forwarding event to component: mult1
[2024-08-22T01:41:19.274Z] [LOG] [example-flow.mult1] NumberMultiplier handling event: numberReceived 0.6627034714253173
[2024-08-22T01:41:19.274Z] [LOG] [example-flow.mult1] NumberMultiplier received 0.6627034714253173, multiplied result: 1.3254069428506345
[2024-08-22T01:41:19.274Z] [LOG] [example-flow.mult1] Publishing: example-flow.mult1.numberMultiplied -> 1.3254069428506345
[2024-08-22T01:41:19.275Z] [LOG] [example-flow.gen1] <div id="example-flow.gen1.number-generator">
  <p>Last generated number: 0.6627034714253173</p>
  <p>Generated at: 8/21/2024, 8:41:19 PM</p>
</div>
[2024-08-22T01:41:19.276Z] [LOG] [example-flow.mult1] <div id="example-flow.mult1.number-multiplier">
  <p>Last received number: 0.6627034714253173</p>
  <p>Multiplied result: 1.3254069428506345</p>
  <p>Processed at: 8/21/2024, 8:41:19 PM</p>
</div>
[2024-08-22T01:41:19.276Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.mult1.numberMultiplied] data: 1.3254069428506345
[2024-08-22T01:41:19.276Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: mult1
[2024-08-22T01:41:19.276Z] [LOG] [example-flow.mult1] NumberMultiplier handling event: numberMultiplied 1.3254069428506345
[2024-08-22T01:41:20.273Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) generated number: 0.7289631057945167
[2024-08-22T01:41:20.273Z] [LOG] [example-flow.gen1] Publishing: example-flow.gen1.numberGenerated -> 0.7289631057945167
[2024-08-22T01:41:20.274Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.numberGenerated] data: 0.7289631057945167
[2024-08-22T01:41:20.274Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-22T01:41:20.274Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: numberGenerated
[2024-08-22T01:41:20.275Z] [LOG] [Bootstrap] [EventProcessor] [forwardingComponentEvent] [example-flow.mult1.numberReceived]
[2024-08-22T01:41:20.275Z] [LOG] [Bootstrap] [EventProcessor] Forwarding event to component: mult1
[2024-08-22T01:41:20.275Z] [LOG] [example-flow.mult1] NumberMultiplier handling event: numberReceived 0.7289631057945167
[2024-08-22T01:41:20.275Z] [LOG] [example-flow.mult1] NumberMultiplier received 0.7289631057945167, multiplied result: 1.4579262115890335
[2024-08-22T01:41:20.275Z] [LOG] [example-flow.mult1] Publishing: example-flow.mult1.numberMultiplied -> 1.4579262115890335
[2024-08-22T01:41:20.276Z] [LOG] [example-flow.gen1] <div id="example-flow.gen1.number-generator">
  <p>Last generated number: 0.7289631057945167</p>
  <p>Generated at: 8/21/2024, 8:41:20 PM</p>
</div>
[2024-08-22T01:41:20.276Z] [LOG] [example-flow.mult1] <div id="example-flow.mult1.number-multiplier">
  <p>Last received number: 0.7289631057945167</p>
  <p>Multiplied result: 1.4579262115890335</p>
  <p>Processed at: 8/21/2024, 8:41:20 PM</p>
</div>
[2024-08-22T01:41:20.277Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.mult1.numberMultiplied] data: 1.4579262115890335
[2024-08-22T01:41:20.277Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: mult1
[2024-08-22T01:41:20.277Z] [LOG] [example-flow.mult1] NumberMultiplier handling event: numberMultiplied 1.4579262115890335
[2024-08-22T01:41:20.829Z] [LOG] [Bootstrap] [AppController] [trigger-event] [example-flow] [gen1] [stop]
[2024-08-22T01:41:20.829Z] [LOG] [example-flow.component-1724287960031] Publishing: example-flow.gen1.stop -> [object Object]
[2024-08-22T01:41:20.830Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.stop] data: {"_flowId":"example-flow","_componentId":"gen1","_eventId":"stop"}
[2024-08-22T01:41:20.830Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-22T01:41:20.830Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: stop
[2024-08-22T01:41:20.830Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) stopping number generation
[2024-08-22T01:41:20.830Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) stopGenerating method called
[2024-08-22T01:42:52.445Z] [LOG] [Bootstrap] [AppController] [trigger-event] [example-flow] [gen1] [start]
[2024-08-22T01:42:52.445Z] [LOG] [example-flow.component-1724287960031] Publishing: example-flow.gen1.start -> [object Object]
[2024-08-22T01:42:52.446Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.start] data: {"_flowId":"example-flow","_componentId":"gen1","_eventId":"start"}
[2024-08-22T01:42:52.447Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-22T01:42:52.447Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: start
[2024-08-22T01:42:52.447Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) starting number generation
[2024-08-22T01:42:52.447Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) startGenerating method called
[2024-08-22T01:42:53.447Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) generated number: 0.19065524822052105
[2024-08-22T01:42:53.447Z] [LOG] [example-flow.gen1] Publishing: example-flow.gen1.numberGenerated -> 0.19065524822052105
[2024-08-22T01:42:53.448Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.numberGenerated] data: 0.19065524822052105
[2024-08-22T01:42:53.448Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-22T01:42:53.448Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: numberGenerated
[2024-08-22T01:42:53.448Z] [LOG] [Bootstrap] [EventProcessor] [forwardingComponentEvent] [example-flow.mult1.numberReceived]
[2024-08-22T01:42:53.448Z] [LOG] [Bootstrap] [EventProcessor] Forwarding event to component: mult1
[2024-08-22T01:42:53.448Z] [LOG] [example-flow.mult1] NumberMultiplier handling event: numberReceived 0.19065524822052105
[2024-08-22T01:42:53.448Z] [LOG] [example-flow.mult1] NumberMultiplier received 0.19065524822052105, multiplied result: 0.3813104964410421
[2024-08-22T01:42:53.448Z] [LOG] [example-flow.mult1] Publishing: example-flow.mult1.numberMultiplied -> 0.3813104964410421
[2024-08-22T01:42:53.449Z] [LOG] [example-flow.gen1] <div id="example-flow.gen1.number-generator">
  <p>Last generated number: 0.19065524822052105</p>
  <p>Generated at: 8/21/2024, 8:42:53 PM</p>
</div>
[2024-08-22T01:42:53.450Z] [LOG] [example-flow.mult1] <div id="example-flow.mult1.number-multiplier">
  <p>Last received number: 0.19065524822052105</p>
  <p>Multiplied result: 0.3813104964410421</p>
  <p>Processed at: 8/21/2024, 8:42:53 PM</p>
</div>
[2024-08-22T01:42:53.450Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.mult1.numberMultiplied] data: 0.3813104964410421
[2024-08-22T01:42:53.450Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: mult1
[2024-08-22T01:42:53.450Z] [LOG] [example-flow.mult1] NumberMultiplier handling event: numberMultiplied 0.3813104964410421
[2024-08-22T01:42:54.447Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) generated number: 0.04957384191767078
[2024-08-22T01:42:54.447Z] [LOG] [example-flow.gen1] Publishing: example-flow.gen1.numberGenerated -> 0.04957384191767078
[2024-08-22T01:42:54.449Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.numberGenerated] data: 0.04957384191767078
[2024-08-22T01:42:54.449Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-22T01:42:54.449Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: numberGenerated
[2024-08-22T01:42:54.449Z] [LOG] [Bootstrap] [EventProcessor] [forwardingComponentEvent] [example-flow.mult1.numberReceived]
[2024-08-22T01:42:54.449Z] [LOG] [Bootstrap] [EventProcessor] Forwarding event to component: mult1
[2024-08-22T01:42:54.449Z] [LOG] [example-flow.mult1] NumberMultiplier handling event: numberReceived 0.04957384191767078
[2024-08-22T01:42:54.449Z] [LOG] [example-flow.mult1] NumberMultiplier received 0.04957384191767078, multiplied result: 0.09914768383534156
[2024-08-22T01:42:54.449Z] [LOG] [example-flow.mult1] Publishing: example-flow.mult1.numberMultiplied -> 0.09914768383534156
[2024-08-22T01:42:54.449Z] [LOG] [example-flow.gen1] <div id="example-flow.gen1.number-generator">
  <p>Last generated number: 0.04957384191767078</p>
  <p>Generated at: 8/21/2024, 8:42:54 PM</p>
</div>
[2024-08-22T01:42:54.450Z] [LOG] [example-flow.mult1] <div id="example-flow.mult1.number-multiplier">
  <p>Last received number: 0.04957384191767078</p>
  <p>Multiplied result: 0.09914768383534156</p>
  <p>Processed at: 8/21/2024, 8:42:54 PM</p>
</div>
[2024-08-22T01:42:54.451Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.mult1.numberMultiplied] data: 0.09914768383534156
[2024-08-22T01:42:54.451Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: mult1
[2024-08-22T01:42:54.451Z] [LOG] [example-flow.mult1] NumberMultiplier handling event: numberMultiplied 0.09914768383534156
[2024-08-22T01:42:55.208Z] [LOG] [Bootstrap] [AppController] [trigger-event] [example-flow] [gen1] [stop]
[2024-08-22T01:42:55.208Z] [LOG] [example-flow.component-1724287960031] Publishing: example-flow.gen1.stop -> [object Object]
[2024-08-22T01:42:55.209Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.stop] data: {"_flowId":"example-flow","_componentId":"gen1","_eventId":"stop"}
[2024-08-22T01:42:55.209Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-22T01:42:55.209Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: stop
[2024-08-22T01:42:55.209Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) stopping number generation
[2024-08-22T01:42:55.209Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) stopGenerating method called
[2024-08-22T01:42:56.259Z] [LOG] [Bootstrap] [AppController] [trigger-event] [example-flow] [gen1] [stop]
[2024-08-22T01:42:56.259Z] [LOG] [example-flow.component-1724287960031] Publishing: example-flow.gen1.stop -> [object Object]
[2024-08-22T01:42:56.261Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.stop] data: {"_flowId":"example-flow","_componentId":"gen1","_eventId":"stop"}
[2024-08-22T01:42:56.261Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-22T01:42:56.261Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: stop
[2024-08-22T01:42:56.261Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) stopping number generation
[2024-08-22T01:42:56.261Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) stopGenerating method called
[2024-08-22T01:46:44.784Z] [LOG] [Bootstrap] [AppController] [trigger-event] [example-flow] [gen1] [start]
[2024-08-22T01:46:44.784Z] [LOG] [example-flow.component-1724287960031] Publishing: example-flow.gen1.start -> [object Object]
[2024-08-22T01:46:44.785Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.start] data: {"_flowId":"example-flow","_componentId":"gen1","_eventId":"start"}
[2024-08-22T01:46:44.785Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-22T01:46:44.785Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: start
[2024-08-22T01:46:44.785Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) starting number generation
[2024-08-22T01:46:44.785Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) startGenerating method called
[2024-08-22T01:46:45.786Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) generated number: 0.8702194554366165
[2024-08-22T01:46:45.786Z] [LOG] [example-flow.gen1] Publishing: example-flow.gen1.numberGenerated -> 0.8702194554366165
[2024-08-22T01:46:45.788Z] [LOG] [example-flow.gen1] <div id="example-flow.gen1.number-generator">
  <p>Last generated number: 0.8702194554366165</p>
  <p>Generated at: 8/21/2024, 8:46:45 PM</p>
</div>
[2024-08-22T01:46:45.788Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.numberGenerated] data: 0.8702194554366165
[2024-08-22T01:46:45.788Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-22T01:46:45.788Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: numberGenerated
[2024-08-22T01:46:45.788Z] [LOG] [Bootstrap] [EventProcessor] [forwardingComponentEvent] [example-flow.mult1.numberReceived]
[2024-08-22T01:46:45.788Z] [LOG] [Bootstrap] [EventProcessor] Forwarding event to component: mult1
[2024-08-22T01:46:45.788Z] [LOG] [example-flow.mult1] NumberMultiplier handling event: numberReceived 0.8702194554366165
[2024-08-22T01:46:45.789Z] [LOG] [example-flow.mult1] NumberMultiplier received 0.8702194554366165, multiplied result: 1.740438910873233
[2024-08-22T01:46:45.789Z] [LOG] [example-flow.mult1] Publishing: example-flow.mult1.numberMultiplied -> 1.740438910873233
[2024-08-22T01:46:45.790Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.mult1.numberMultiplied] data: 1.740438910873233
[2024-08-22T01:46:45.790Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: mult1
[2024-08-22T01:46:45.790Z] [LOG] [example-flow.mult1] NumberMultiplier handling event: numberMultiplied 1.740438910873233
[2024-08-22T01:46:45.790Z] [LOG] [example-flow.mult1] <div id="example-flow.mult1.number-multiplier">
  <p>Last received number: 0.8702194554366165</p>
  <p>Multiplied result: 1.740438910873233</p>
  <p>Processed at: 8/21/2024, 8:46:45 PM</p>
</div>
[2024-08-22T01:46:46.786Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) generated number: 0.37241894618066484
[2024-08-22T01:46:46.786Z] [LOG] [example-flow.gen1] Publishing: example-flow.gen1.numberGenerated -> 0.37241894618066484
[2024-08-22T01:46:46.787Z] [LOG] [example-flow.gen1] <div id="example-flow.gen1.number-generator">
  <p>Last generated number: 0.37241894618066484</p>
  <p>Generated at: 8/21/2024, 8:46:46 PM</p>
</div>
[2024-08-22T01:46:46.787Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.numberGenerated] data: 0.37241894618066484
[2024-08-22T01:46:46.787Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-22T01:46:46.787Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: numberGenerated
[2024-08-22T01:46:46.788Z] [LOG] [Bootstrap] [EventProcessor] [forwardingComponentEvent] [example-flow.mult1.numberReceived]
[2024-08-22T01:46:46.788Z] [LOG] [Bootstrap] [EventProcessor] Forwarding event to component: mult1
[2024-08-22T01:46:46.788Z] [LOG] [example-flow.mult1] NumberMultiplier handling event: numberReceived 0.37241894618066484
[2024-08-22T01:46:46.788Z] [LOG] [example-flow.mult1] NumberMultiplier received 0.37241894618066484, multiplied result: 0.7448378923613297
[2024-08-22T01:46:46.788Z] [LOG] [example-flow.mult1] Publishing: example-flow.mult1.numberMultiplied -> 0.7448378923613297
[2024-08-22T01:46:46.788Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.mult1.numberMultiplied] data: 0.7448378923613297
[2024-08-22T01:46:46.788Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: mult1
[2024-08-22T01:46:46.788Z] [LOG] [example-flow.mult1] NumberMultiplier handling event: numberMultiplied 0.7448378923613297
[2024-08-22T01:46:46.789Z] [LOG] [example-flow.mult1] <div id="example-flow.mult1.number-multiplier">
  <p>Last received number: 0.37241894618066484</p>
  <p>Multiplied result: 0.7448378923613297</p>
  <p>Processed at: 8/21/2024, 8:46:46 PM</p>
</div>
[2024-08-22T01:46:46.964Z] [LOG] [Bootstrap] [AppController] [trigger-event] [example-flow] [gen1] [stop]
[2024-08-22T01:46:46.964Z] [LOG] [example-flow.component-1724287960031] Publishing: example-flow.gen1.stop -> [object Object]
[2024-08-22T01:46:46.965Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.stop] data: {"_flowId":"example-flow","_componentId":"gen1","_eventId":"stop"}
[2024-08-22T01:46:46.965Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-22T01:46:46.965Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: stop
[2024-08-22T01:46:46.965Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) stopping number generation
[2024-08-22T01:46:46.965Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) stopGenerating method called

</FILE>
<FILE path="src/views/index.ejs" TARGET>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Flow-Based Programming Example</title>
  <script src="https://unpkg.com/htmx.org@2.0.2"></script>
  <script src="https://unpkg.com/htmx.org@1.9.12/dist/ext/json-enc.js"></script>
  <script src="https://cdn.socket.io/4.3.2/socket.io.min.js"></script>
  <style>
    body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
    .component { border: 1px solid #ddd; padding: 10px; margin-bottom: 10px; position: relative; }
    h2 { margin-top: 0; }
    .swimlane { display: flex; justify-content: space-between; }
    .input-swimlane, .output-swimlane { width: 20%; padding: 10px; background-color: #f0f0f0; }
    .main-content { width: 60%; padding: 10px; }
    .event-anchor { cursor: pointer; color: blue; text-decoration: underline; }
    .input-anchor { position: absolute; top: -20px; left: 50%; transform: translateX(-50%); }
    .output-anchor { position: absolute; bottom: -20px; left: 50%; transform: translateX(-50%); }
  </style>
</head>
<body>
  <h1>Flow-Based Programming Example</h1>

  <div class="swimlane">
    <div id="input-swimlane" class="input-swimlane"></div>
    <div class="main-content">
      <div id="number-generator" class="component">
        <span class="event-anchor input-anchor" onclick="loadConnectedComponents('example-flow', 'gen1', 'input')">start, stop</span>
        <h2>Number Generator</h2>
        <button hx-post="/trigger-event/example-flow.gen1.start"
          hx-swap="none" 
          hx-ext='json-enc'
          hx-headers='{"Content-Type": "application/json"}'
          hx-vals='{}'
        >
          Start Generating
        </button>
        <button hx-post="/trigger-event/example-flow.gen1.stop"
          hx-swap="none" 
          hx-ext='json-enc'
          hx-headers='{"Content-Type": "application/json"}'
          hx-vals='{}'
        >
          Stop Generating
        </button>
        <div id="example-flow.gen1.number-generator"></div>
        <span class="event-anchor output-anchor" onclick="loadConnectedComponents('example-flow', 'gen1', 'output')">numberGenerated</span>
      </div>
    </div>
    <div id="output-swimlane" class="output-swimlane">

      <div id="number-multiplier" class="component">
        <span class="event-anchor input-anchor" onclick="loadConnectedComponents('example-flow', 'mult1', 'input')">numberReceived</span>
        <h2>Number Multiplier</h2>
        <div id="example-flow.mult1.number-multiplier"></div>
        <span class="event-anchor output-anchor" onclick="loadConnectedComponents('example-flow', 'mult1', 'output')">numberMultiplied</span>
      </div>
    </div>
  </div>

  <script>
    const socket = io();

    socket.on('display-flow-component-template-content', function(event) {
      const targetId = `${event.flowId}.${event.componentId}.${event.templateId}`;
      const targetElement = document.getElementById(targetId);
      if (targetElement) {
        targetElement.outerHTML = event.content;
      }
    });

    htmx.on("htmx:configRequest", (event) => {
      event.detail.headers['Content-Type'] = 'application/json';
    });

    function loadConnectedComponents(flowId, componentId, direction) {
      // This function would typically make an AJAX call to the server
      // to get the connected components. For now, we'll use mock data.
      const mockConnections = {
        'example-flow': {
          'gen1': {
            'input': ['start', 'stop'],
            'output': ['numberGenerated']
          },
          'mult1': {
            'input': ['numberReceived'],
            'output': ['numberMultiplied']
          }
        }
      };

      const connectedEvents = mockConnections[flowId][componentId][direction];
      const swimlane = direction === 'input' ? document.getElementById('input-swimlane') : document.getElementById('output-swimlane');
      
      swimlane.innerHTML = '';
      connectedEvents.forEach(eventName => {
        const eventElement = document.createElement('div');
        eventElement.className = 'component';
        eventElement.innerHTML = `<h3>${eventName}</h3>`;
        swimlane.appendChild(eventElement);
      });
    }
  </script>
</body>
</html>
</FILE>
<REQUEST>
there should be a button to load start and a button to load stop
</REQUEST>