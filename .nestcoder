# NESTCODER

You are NestCoder, a HTMX, EJS and TypeScript/NestJS language coding assistant.

## INPUT: 

You will receive a TARGET <FILE/> in the EJS or TypeScript/NestJS language, some additional <FILE/>'s for context, and a change or refactor <REQUEST/>, from the user.

## OUTPUT:

You must answer with one or more <FILE/> tags, including files to be overwritten, in order to fulfill the user's request.

---

# EXAMPLE NESTCODER USAGE

## Suppose you're given the following INPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/_.ts">
// A polymorphic List with two constructors:
// - Cons: appends an element to a list
// - Nil: the empty list
export type List<A>
  = { "$": "Cons", head: A, tail: List<A> }
  | { "$": "Nil" };
</FILE>

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts" TARGET>
// The map function for List, to be implemented
import { List } from "./_";

export function map<A, B>(fn: (a: A) => B, list: List<A>): List<B> {
  ?
}
</FILE>

<REQUEST>
complete the map function
</REQUEST>

## Then, you must answer with the following OUTPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts">
import { List } from "./_";

// Applies a function to each element of a list.
// - fn: the function to be applied
// - xs: the elements to apply fn to
// = a new list with fn applied to all elements
export function map<A, B>(xs: List<A>, fn: (a: A) => B): List<B> {
  switch (xs.$) {
    case "Cons": {
      var head = fn(xs.head);
      var tail = map(xs.tail, fn);
      return { $: "Cons", head, tail };
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
</FILE>

(Because it fulfills the user's request perfectly.)

---

# GUIDE FOR THE TYPESCRIPT LANGUAGE

- Your code must be inspired by pure functional programming languages like Haskell.

- Every file must declare only, and only one, top-level function or datatype.

- Functions must be pure, using switch instead of 'if-else' or 'case-of'.

- When defining local variables, align equal signs whenever possible.

- Use CamelCase for everything. (IMPORTANT)

- A 'Foo/Bar' top-level definition must be either on './Foo/Bar.ts' or './Foo/Bar/_.ts'. 

# GUIDE FOR THE EJS LANGUAGE

- Use HTMX for frontend.

## Top-Level Function

Every .ts file must define ONE top-level function. Example:

```typescript
// Calculates the size of an HTerm
// - term: the HTerm to measure
// = the number of nodes in the term
export function size(term: HTerm): number {
  switch (term.$) {
    case "Lam": {
      var bod_size = size(term.bod({$: "Var", nam: term.nam}));
      return 1 + bod_size;
    }
    case "App": {
      var fun_size = size(term.fun);
      var arg_size = size(term.arg);
      return 1 + fun_size + arg_size;
    }
    case "Var": {
      return 1;
    }
  }
}
```

Where:
- The function name is defined (e.g., 'size')
- Parameters are specified with their types (e.g., 'term: HTerm')
- The return type is specified (e.g., ': number')
- The function body uses a switch statement for pattern matching
- Local variables are used to make the code less horizontal

## Top-Level Datatype

Alternatively, a .ts file can also define a datatype (ADT). Example:

```typescript
// Represents a Higher-Order Abstract Syntax Term
// - Lam: lambda abstraction
// - App: function application
// - Var: variable
export type HTerm
  = { $: "Lam", bod: (x: HTerm) => HTerm }
  | { $: "App", fun: HTerm, arg: HTerm }
  | { $: "Var", nam: string }
```

ADTs must follow this convention:
- Constructors represented as objects
- The dollar-sign is used for the constructor name
- Other object fields are the constructor fields

## Idiomatic TypeScript Examples

Below are some additional idiomatic TypeScript in the purely functional style: 

### List/zip.ts

```typescript
import { List } from "./_";

// Combines two lists into a list of pairs
// - xs: the first input list
// - ys: the second input list
// = a new list of pairs, with length equal to the shorter input list
export function zip<A, B>(xs: List<A>, ys: List<B>): List<[A, B]> {
  switch (xs.$) {
    case "Cons": {
      switch (ys.$) {
        case "Cons": {
          var head = [xs.head, ys.head] as [A,B];
          var tail = zip(xs.tail, ys.tail);
          return { $: "Cons", head, tail };
        }
        case "Nil": {
          return { $: "Nil" };
        }
      }
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### List/filter.ts

```typescript
import { List } from "./_";

// Filters a list based on a predicate function
// - xs: the input list
// - pred: the predicate function to test each element
// = a new list containing only elements that satisfy the predicate
export function filter<A>(xs: List<A>, pred: (a: A) => boolean): List<A> {
  switch (xs.$) {
    case "Cons": {
      var head = xs.head;
      var tail = filter(xs.tail, pred);
      return pred(xs.head) ? { $: "Cons", head, tail } : tail;
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### Tree/_.ts

```typescript
// Represents a binary tree
// - Node: an internal node with a value and two subtrees
// - Leaf: a leaf node (empty)
export type Tree<A>
  = { $: "Node", val: A, left: Tree<A>, right: Tree<A> }
  | { $: "Leaf" };
```

### Tree/sum.ts

```typescript
import { Tree } from "./_";

// Sums all values in a numeric tree
// - tree: the tree to sum
// = the sum of all values in the tree
export function sum(tree: Tree<number>): number {
  switch (tree.$) {
    case "Node": {
      var left  = sum(tree.left);
      var right = sum(tree.right);
      return tree.val + left + right;
    }
    case "Leaf": {
      return 0;
    }
  }
}
```

### V3/_.ts

```typescript
// Represents a 3D vector
export type V3
  = { $: "V3", x: number, y: number, z: number };
```

### V3/dot.ts

```typescript
import { V3 } from "./_";

// Calculates the dot product of two 3D vectors
// - a: the first vector
// - b: the second vector
// = the dot product of a and b
export function dot(a: V3, b: V3): number {
  return a.x * b.x + a.y * b.y + a.z * b.z;
}
```

---

# NOTES

- Make ONLY the changes necessary to correctly fulfill the user's REQUEST.

- Do NOT fix, remove, complete or alter any parts unrelated to the REQUEST.

- Pay attention to the user's style, and mimic it as close as possible.

- Pay attention to the TypeScript examples and mimic their style as a default.

- Consult TypeScript guide to emit idiomatic correct code.

- Do NOT use or assume the existence of files that weren't shown to you.

- Be precise and careful in your modifications.

---

# TASK

You will now be given the actual INPUT you must work with.

<FILE path="/home/travis/Projects/flow-based-programming/src/logger/custom-logger.ts">
import { ConsoleLogger, Injectable, Inject } from '@nestjs/common';
import * as fs from 'fs';
import * as path from 'path';

@Injectable()
export class CustomLogger extends ConsoleLogger {
  constructor(
    private logId: string,
  ) {
    super(logId);
    this.setLogLevels(['log', 'error', 'warn', 'debug', 'verbose']);
  }

  log(message: string, context?: string) {
    this.printMessage(message, 'log', context);
    // this.emitLogEvent('log', message);
  }

  warn(message: string, context?: string) {
    this.printMessage(message, 'warn', context);
    // this.emitLogEvent('warn', message);
  }

  error(message: string, trace?: string, context?: string) {
    this.printMessage(message, 'error', context);
    // this.emitLogEvent('error', message);
    if (trace) {
      this.printMessage(trace, 'error', context);
    }
  }

  debug(message: string, context?: string) {
    this.printMessage(message, 'debug', context);
  }

  verbose(message: string, context?: string) {
    this.printMessage(message, 'verbose', context);
  }

  private printMessage(message: string, logLevel: string, context?: string) {
    const output = context ? `[${context}] ${message}` : message;
    console.log(`[${this.getNow()}] [${logLevel.toUpperCase()}] [${this.logId}] ${output}`);
  }

  private getNow(): string {
    return new Date().toISOString();
  }

  static write_to_file(message: string) {
    const logFile = path.join(process.cwd(), 'start:dev.stdout.txt');
    fs.appendFile(logFile, message, (err) => {
      if (err) {
        console.error('Failed to write to log file:', err);
      }
    });
  }

  static clearSTDOUT() {
    const logFile = path.join(process.cwd(), 'start:dev.stdout.txt');
    try {
      fs.writeFileSync(logFile, '');
      console.log(`Log file cleared at ${logFile}`);
    } catch (error) {
      console.error('Failed to clear log file:', error);
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/modules/app.module.ts">
import { ComponentRegistry } from '../services/component-registry.service';
import { FlowExecutorService } from '../services/flow-executor.service';
import { EventProcessor } from '../processors/event.processor';
import { CustomLogger } from '../logger/custom-logger';
import { AppController } from '../controllers/app.controller';
import { TemplateCacheService } from 'src/services/template-cache.service';
import { BackplaneService } from '../services/backplane.service';

import { initializeAppModule, components } from '../initializers/app.initialize';

const rabbitmqUri = process.env.RABBITMQ || 'amqp://localhost:5672';
console.log(`[AppModule] RabbitMQ URI: ${rabbitmqUri}`);

const metadata = {
  imports: [],
  controllers: [AppController],
  providers: [
    EventProcessor,
    ComponentRegistry,
    FlowExecutorService,
    TemplateCacheService,
    BackplaneService,
    {
      provide: 'BACKPLANE',
      useFactory: (backplaneService: BackplaneService) => {
        return () => backplaneService.onModuleInit();
      },
      inject: [BackplaneService],
      multi: true,
    },
    {
      provide: 'FLOW_ID',
      useValue: 'example-flow', // Use a default flow ID
    },
    {
      provide: 'COMPONENT_ID',
      useFactory: () => `component-${Date.now()}`, // Generate a unique component ID
    },
    {
      provide: 'WEB_SOCKET_SERVER',
      useValue: null, // This will be set later in the FlowExecutorService
    },
    {
      provide: 'TEMPLATES',
      useValue: null, // This will be set later (?)
    },
    ...components,
    CustomLogger
  ],
  exports: [EventProcessor],
}

export const AppModule = initializeAppModule(metadata)
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/main.ts">
import { NestFactory } from '@nestjs/core';
import { AppModule } from './modules/app.module';
import { CustomLogger } from './logger/custom-logger';
import { bootstrapApp } from './bootstrap/app.bootstrap';
import { EventEmitter } from 'events';

async function bootstrap(): Promise<void> {
  // Increase the maximum number of listeners
  EventEmitter.defaultMaxListeners = 100;

  const app = await NestFactory.create(AppModule);
  
  // Create the CustomLogger
  const logger = new CustomLogger('Bootstrap');
  
  try {
    logger.log('Starting main application...');
    const mainApp = await bootstrapApp(logger);

    process.on('SIGINT', async () => {
      CustomLogger.clearSTDOUT();
      await mainApp.close();
      process.exit();
    });
  } catch (error) {
    logger.error(`Bootstrap error: ${error.message}`, error.stack);
    process.exit(1);
  }
}

bootstrap().catch((error) => {
  console.error('Unhandled bootstrap error:', error);
  process.exit(1);
});
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/bootstrap/app.bootstrap.ts">
import { NestFactory } from '@nestjs/core';
import { AppModule } from '../modules/app.module';
import { NestExpressApplication } from '@nestjs/platform-express';
import * as cookieParser from 'cookie-parser';
import { FlowExecutorService } from '../services/flow-executor.service';
import { CustomLogger } from '../logger/custom-logger';
import { resolve } from 'path';
import { initializeFlows } from '../initializers/flows.initialize';

export async function bootstrapApp(logger: CustomLogger): Promise<any> {
  const app = await NestFactory.create<NestExpressApplication>(AppModule, { logger });
  
  app.useStaticAssets(resolve('./src/public'));
  app.setBaseViewsDir(resolve('./src/views'));
  app.setViewEngine('ejs');

  app.use(cookieParser());

  // so browsers can use api
  app.enableCors({
    origin: '*',
  });

  const flowExecutor = app.get(FlowExecutorService);

  await app.init();

  logger.log('Starting flow execution...');
  await initializeFlows(flowExecutor);

  await app.listen(3000);
  logger.log('Application is running on: http://localhost:3000');

  return app;
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/initializers/app.initialize.ts">
import { Module, OnModuleInit } from '@nestjs/common';
import { ComponentRegistry } from '../services/component-registry.service';

import { NumberGeneratorComponent } from '../components/number-generator/number-generator.handler';
import { NumberMultiplierComponent } from '../components/number-multiplier/number-multiplier.handler';
import { EventTriggerComponent } from '../components/event-trigger/event-trigger.handler';
import { StateMachineComponent } from '../components/state-machine/state-machine.handler';
import { JobStateMachineComponent } from '../components/job-state-machine/job-state-machine.handler';
import { ButtonTriggerComponent } from 'src/components/button-trigger/button-trigger.handler';

export function initializeAppModule(metadata): any {
  @Module(metadata)
  class AppModule implements OnModuleInit {
    constructor(
      private componentRegistry: ComponentRegistry,
      private eventTriggerComponent: EventTriggerComponent,
      private numberGeneratorComponent: NumberGeneratorComponent,
      private numberMultiplierComponent: NumberMultiplierComponent,
      private stateMachineComponent: StateMachineComponent,
      private jobStateMachineComponent: JobStateMachineComponent,
      private buttonTriggerComponent: ButtonTriggerComponent,
    ) {}

    onModuleInit() {
      // Register components
      this.componentRegistry.registerComponent(this.eventTriggerComponent);
      this.componentRegistry.registerComponent(this.numberGeneratorComponent);
      this.componentRegistry.registerComponent(this.numberMultiplierComponent);
      this.componentRegistry.registerComponent(this.stateMachineComponent);
      this.componentRegistry.registerComponent(this.jobStateMachineComponent);
      this.componentRegistry.registerComponent(this.buttonTriggerComponent);
    }
  }

  return AppModule;
}

export const components = [
  EventTriggerComponent,
  NumberGeneratorComponent,
  NumberMultiplierComponent,
  StateMachineComponent,
  JobStateMachineComponent,
  ButtonTriggerComponent,
]
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/services/component-registry.service.ts">
import { Injectable, Logger } from '@nestjs/common';
import { Component } from '../interfaces/component.interface';

@Injectable()
export class ComponentRegistry {
  private components: Map<string, Component> = new Map();
  private readonly logger = new Logger(ComponentRegistry.name);

  registerComponent(component: Component) {
    const key = `${component.flowId}.${component.componentId}`;
    this.logger.log(`Registering component: ${key}`);
    this.components.set(key, component);
  }

  getComponent(flowId: string, componentId: string): Component | undefined {
    const key = `${flowId}.${componentId}`;
    const component = this.components.get(key);
    if (!component) {
      this.logger.warn(`Component not found: ${key}`);
    }
    return component;
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/services/flow-executor.service.ts">
import { Injectable, Logger } from '@nestjs/common';
import { ComponentRegistry } from './component-registry.service';
import { Flow } from '../interfaces/flow.interface';
import { WebSocketGateway, WebSocketServer } from '@nestjs/websockets';
import { Server } from 'socket.io';
import { initializeComponent } from '../initializers/component.initialize';
import { Component } from 'src/interfaces/component.interface';
import { TemplateCacheService } from './template-cache.service';
import { BackplaneService } from './backplane.service';

@WebSocketGateway()
@Injectable()
export class FlowExecutorService {
  @WebSocketServer() server: Server;
  private readonly logger = new Logger(FlowExecutorService.name);
  private flows: Flow[] = [];
  
  constructor(
    private backplaneService: BackplaneService,
    private componentRegistry: ComponentRegistry,
    private templateCacheService: TemplateCacheService
  ) {}

  async getFlows(): Promise<Flow[]> {
    return this.flows;
  }

  async getFlow(flowId: string): Promise<Flow | undefined> {
    return this.flows.find(flow => flow.id === flowId);
  }

  async executeFlow(flow: Flow) {
    this.logger.log(`Executing flow: ${flow.id}`);

    // Remove old flow and add new flow
    var filteredFlows = this.flows.filter(function(f: Flow) { 
      return f.id != flow.id; 
    });
    this.flows = filteredFlows;
    this.flows.push(flow);

    // Create connections
    for (const connection of flow.connections) {
      this.logger.log(`Creating connection: ${connection.fromComponent}.${connection.fromEvent} -> ${connection.toComponent}.${connection.toEvent}`);
      await this.backplaneService.publish('flow_exchange', 'createConnection', { ...connection, flowId: flow.id });
    }

    // Construct components
    let instances = [];
    for (const component of flow.components) {
      this.logger.log(`Constructing component: ${component.componentId} (${component.componentRef}) for flow: ${flow.id}`);
      
      // initialize a new component instance
      let componentInstance: Component = initializeComponent(flow, component, this.backplaneService, this.server, this.templateCacheService);

      // register new instance with component registery
      this.componentRegistry.registerComponent(componentInstance);
      instances.push(componentInstance);
    }

    // Sync connections for component
    for (const instance of instances) {
      this.logger.log(`Sync connections for component: ${instance.componentId} (${instance.componentRef}) for flow: ${instance.flowId}`);
      instance.syncConnections(flow.connections, this.componentRegistry);
    }
    
    // Init component
    for (const component of flow.components) {
      this.logger.log(`Initializing component: ${component.componentId} (${component.componentRef}) for flow: ${flow.id}`);

      try {
        await this.backplaneService.publish('flow_exchange', 'componentEvent', {
          flowId: flow.id,
          componentId: component.componentId,
          componentRef: component.componentRef,
          eventId: 'init',
          data: component.init,
        });
      } catch (error) {
        this.logger.error(`Error initializing component ${component.componentId} for flow ${flow.id}:`, error);
      }
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/processors/event.processor.ts">
import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { ComponentRegistry } from '../services/component-registry.service';
import { BackplaneService } from '../services/backplane.service';

@Injectable()
export class EventProcessor implements OnModuleInit {
  private readonly logger = new Logger(EventProcessor.name);
  private connections: Map<string, Array<{ toFlow: string; toComponent: string; toEvent: string }>> = new Map();

  constructor(
    private componentRegistry: ComponentRegistry,
    private backplaneService: BackplaneService
  ) {}

  async onModuleInit() {
    await this.subscribeToEvents();
  }

  private async subscribeToEvents() {
    try {
      await this.backplaneService.subscribe(
        'flow_exchange',
        'componentEvent',
        'component_event_queue',
        this.handleComponentEvent.bind(this)
      );

      await this.backplaneService.subscribe(
        'flow_exchange',
        'createConnection',
        'create_connection_queue',
        this.createConnection.bind(this)
      );
    } catch (error) {
      this.logger.error(`Failed to subscribe to events: ${error.message}`, error.stack);
    }
  }

  async handleComponentEvent(msg: {flowId: string, componentId: string, eventId: string, data: any}): Promise<void> {
    const { flowId, componentId, eventId, data: eventData } = msg;
    this.logger.log(`[handleComponentEvent] [${flowId}.${componentId}.${eventId}] data: ${JSON.stringify(eventData)}`);
    
    const component = this.componentRegistry.getComponent(flowId, componentId);
    if (component) {
      this.logger.log(`Passing event to component: ${componentId}`);
      await component.handleEvent(eventId, eventData);

      // Check if there are connections for this event
      const connectionKey = `${flowId}.${componentId}.${eventId}`;
      const connections = this.connections.get(connectionKey) || [];
      for (const connection of connections) {
        const { toFlow, toComponent, toEvent } = connection;
        this.logger.log(`[forwardingComponentEvent] [${toFlow}.${toComponent}.${toEvent}]`);
        
        const targetComponent = this.componentRegistry.getComponent(toFlow, toComponent);
        if (targetComponent) {
          this.logger.log(`Forwarding event to component: ${targetComponent.componentId}`);
          await targetComponent.handleEvent(toEvent, eventData);
        } else {
          this.logger.warn(`Target component not found: ${toComponent} in flow: ${toFlow}`);
        }
      }
    } else {
      this.logger.warn(`Component not found: ${flowId}.${componentId}`);
    }
  }

  async createConnection(msg: {flowId: string, fromComponent: string, fromEvent: string, toComponent: string, toEvent: string}): Promise<void>  {
    const { flowId, fromComponent, fromEvent, toComponent, toEvent } = msg;
    this.logger.log(`Received createConnection: ${flowId}.${fromComponent}.${fromEvent} -> ${toComponent}.${toEvent}`);
    
    const connectionKey = `${flowId}.${fromComponent}.${fromEvent}`;
    if (!this.connections.has(connectionKey)) {
      this.connections.set(connectionKey, []);
    }
    this.connections.get(connectionKey).push({ toFlow: flowId, toComponent, toEvent });
    this.logger.log(`Connection created: ${connectionKey} -> ${toComponent}.${toEvent}`);
  }
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/interfaces/component.interface.ts">
import { Connection } from "./connection.interface";
import { Port } from "./port.interface";

export interface Component {
  ports: { inputs: string[]; outputs: string[]; };
  componentRef: string;
  slug: string;
  description?: string;
  flowId: string;
  componentId: string;
  handleEvent: (eventId: string, data: any) => Promise<void>;
  publish: (flowId: string, componentId: string, eventId: string, data: any) => Promise<void>;
  getPorts: () => Promise<{ inputs: Port[], outputs: Port[] }>;
  findPort: (portId: string) => Promise<Port>;
  findConnections: (port: Port) => Promise<Connection[]>
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/interfaces/connection.interface.ts">
import { Component } from "./component.interface";

export interface Connection {
  toFlow: string;
  toComponent: string;
  toEvent: string;
  connectedTo: Component | undefined;
  fromFlow: string;
  fromComponent: string;
  fromEvent: string;
  connectedFrom: Component | undefined;
  next: Component | undefined;
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/interfaces/flow.interface.ts">
import { Connection } from "./connection.interface";

export interface Flow {
  id: string;
  components: {
    componentId: string;
    componentRef: string;
    init: any | undefined;
  }[];
  connections: Connection[];
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/src/schema/flow.schema.ts">
import { Flow } from "../interfaces/flow.interface";

export function schema(flow: any): Flow {
  const components = Object.entries(flow.components).map(([componentId, component]) => {
    const [componentRef] = Object.keys(component);
    let init;
    let ports = { inputs: [], outputs: [] };

    if (component[componentRef].init) {
      init = component[componentRef].init;
    }

    if (component[componentRef].ports) {
      if (component[componentRef].ports.inputs) {
        ports.inputs = Object.keys(component[componentRef].ports.inputs);
      }
      if (component[componentRef].ports.outputs) {
        ports.outputs = Object.keys(component[componentRef].ports.outputs);
      }
    }

    return { componentId, componentRef, init, ports };
  });

  const connections = flow.connections.map((connection) => {
    const fromParts = connection.from.split('.');
    const toParts = connection.to.split('.');

    // parts format: components.<componentId>.<componentRef>.ports.inputs.<eventId>
    
    return {
      fromFlow: flow.id,
      fromComponent: fromParts[1],
      fromEvent: fromParts[5],
      toFlow: flow.id,
      toComponent: toParts[1],
      toEvent: toParts[5],
    };
  });

  let code = {
    id: flow.id,
    components,
    connections,
  };

  // console.log('code', code);

  return code;
}
</FILE>
<FILE path="/home/travis/Projects/flow-based-programming/start:dev.stdout.txt">
c[[90m2:50:36 PM[0m] Starting compilation in watch mode...

[[90m2:50:37 PM[0m] Found 0 errors. Watching for file changes.

[AppModule] RabbitMQ URI: amqp://localhost:5672
[32m[Nest] 2175844  - [39m09/10/2024, 2:50:37 PM [32m    LOG[39m [38;5;3m[NestFactory] [39m[32mStarting Nest application...[39m
[32m[Nest] 2175844  - [39m09/10/2024, 2:50:37 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mAppModule dependencies initialized[39m[38;5;3m +9ms[39m
[2024-09-10T19:50:37.384Z] [LOG] [Bootstrap] Starting main application...
[2024-09-10T19:50:37.384Z] [LOG] [Bootstrap] [NestFactory] Starting Nest application...
[2024-09-10T19:50:37.386Z] [LOG] [Bootstrap] [InstanceLoader] AppModule dependencies initialized
[2024-09-10T19:50:37.395Z] [LOG] [Bootstrap] [WebSocketsController] EventTriggerComponent subscribed to the "client-event" message
[2024-09-10T19:50:37.395Z] [LOG] [Bootstrap] [WebSocketsController] NumberGeneratorComponent subscribed to the "client-event" message
[2024-09-10T19:50:37.395Z] [LOG] [Bootstrap] [WebSocketsController] NumberMultiplierComponent subscribed to the "client-event" message
[2024-09-10T19:50:37.396Z] [LOG] [Bootstrap] [WebSocketsController] StateMachineComponent subscribed to the "client-event" message
[2024-09-10T19:50:37.396Z] [LOG] [Bootstrap] [WebSocketsController] JobStateMachineComponent subscribed to the "client-event" message
[2024-09-10T19:50:37.396Z] [LOG] [Bootstrap] [WebSocketsController] ButtonTriggerComponent subscribed to the "client-event" message
[2024-09-10T19:50:37.397Z] [LOG] [Bootstrap] [RoutesResolver] AppController {/}:
[2024-09-10T19:50:37.398Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/, GET} route
[2024-09-10T19:50:37.398Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/flows, GET} route
[2024-09-10T19:50:37.399Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/flow/:flowId, GET} route
[2024-09-10T19:50:37.399Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/document/:flowId/:componentId, GET} route
[2024-09-10T19:50:37.399Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/documentComponent/:flowId/:componentId/:swimlaneId, GET} route
[2024-09-10T19:50:37.399Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/documentConnections/:flowId/:componentId/:portId/:swimlaneId, GET} route
[2024-09-10T19:50:37.399Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/logger, GET} route
[2024-09-10T19:50:37.399Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/trigger-event/:flowComponentEvent, POST} route
[2024-09-10T19:50:37.400Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/template/:flowId/:componentId/:templateId, GET} route
[2024-09-10T19:50:37.400Z] [WARN] [Bootstrap] [BackplaneService] Connection not initialized, attempting to reconnect...
[2024-09-10T19:50:37.400Z] [LOG] [Bootstrap] [BackplaneService] Connecting to ISMQ...
[2024-09-10T19:50:37.411Z] [LOG] [Bootstrap] [BackplaneService] Connecting to ISMQ...
Connected to WebSocket server
[2024-09-10T19:50:37.430Z] [LOG] [Bootstrap] [BackplaneService] Successfully connected to ISMQ
[2024-09-10T19:50:37.430Z] [LOG] [Bootstrap] [BackplaneService] Subscribing to exchange: flow_exchange, routingKey: componentEvent, queue: component_event_queue
Connected to WebSocket server
[2024-09-10T19:50:37.434Z] [LOG] [Bootstrap] [BackplaneService] Successfully connected to ISMQ
Subscription response for flow_exchange/component_event_queue: { status: 'ok', message: 'Subscribed successfully' }
[2024-09-10T19:50:37.533Z] [LOG] [Bootstrap] [BackplaneService] Successfully subscribed to queue: component_event_queue
[2024-09-10T19:50:37.533Z] [LOG] [Bootstrap] [BackplaneService] Subscribing to exchange: flow_exchange, routingKey: createConnection, queue: create_connection_queue
Subscription response for flow_exchange/create_connection_queue: { status: 'ok', message: 'Subscribed successfully' }
[2024-09-10T19:50:37.537Z] [LOG] [Bootstrap] [BackplaneService] Successfully subscribed to queue: create_connection_queue
[2024-09-10T19:50:37.537Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1725997837386
[2024-09-10T19:50:37.537Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1725997837386
[2024-09-10T19:50:37.537Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1725997837386
[2024-09-10T19:50:37.537Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1725997837386
[2024-09-10T19:50:37.537Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1725997837386
[2024-09-10T19:50:37.537Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1725997837386
[2024-09-10T19:50:37.538Z] [LOG] [Bootstrap] [NestApplication] Nest application successfully started
[2024-09-10T19:50:37.538Z] [LOG] [Bootstrap] Starting flow execution...
[2024-09-10T19:50:37.538Z] [LOG] [Bootstrap] [FlowExecutorService] Executing flow: example-flow
[2024-09-10T19:50:37.538Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: sm1.initProxyMachine -> jsm1.initProxyMachine
[2024-09-10T19:50:37.538Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: createConnection
[2024-09-10T19:50:37.540Z] [LOG] [Bootstrap] Application is running on: http://localhost:3000
[2024-09-10T19:50:37.545Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.545Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: jsm1.get-start -> gen1.start
[2024-09-10T19:50:37.545Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: createConnection
[2024-09-10T19:50:37.548Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.548Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: jsm1.get-finish -> gen1.stop
[2024-09-10T19:50:37.548Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: createConnection
[2024-09-10T19:50:37.550Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.550Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: jsm1.get-start -> gen2.start
[2024-09-10T19:50:37.550Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: createConnection
[2024-09-10T19:50:37.552Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.552Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: jsm1.get-finish -> gen2.stop
[2024-09-10T19:50:37.552Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: createConnection
[2024-09-10T19:50:37.555Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.555Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: gen1.numberGenerated -> multi.firstNumberReceived
[2024-09-10T19:50:37.555Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: createConnection
[2024-09-10T19:50:37.559Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.559Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: gen2.numberGenerated -> multi.secondNumberReceived
[2024-09-10T19:50:37.559Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: createConnection
[2024-09-10T19:50:37.561Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.561Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: btn1.buttonPressed -> jsm1.set-start
[2024-09-10T19:50:37.561Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: createConnection
[2024-09-10T19:50:37.563Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.563Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: btn2.buttonPressed -> jsm1.set-pause
[2024-09-10T19:50:37.563Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: createConnection
[2024-09-10T19:50:37.565Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.565Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: btn3.buttonPressed -> jsm1.set-resume
[2024-09-10T19:50:37.565Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: createConnection
[2024-09-10T19:50:37.566Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.567Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: btn4.buttonPressed -> jsm1.set-finish
[2024-09-10T19:50:37.567Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: createConnection
[2024-09-10T19:50:37.569Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.569Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: btn5.buttonPressed -> jsm1.set-reset
[2024-09-10T19:50:37.569Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: createConnection
[2024-09-10T19:50:37.570Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.570Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: main (eventTrigger) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.main
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: btn1 (buttonTrigger) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.btn1
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: btn2 (buttonTrigger) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.btn2
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: btn3 (buttonTrigger) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.btn3
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: btn4 (buttonTrigger) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.btn4
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: btn5 (buttonTrigger) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.btn5
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: sm1 (stateMachine) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.sm1
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: jsm1 (jobStateMachine) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.jsm1
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: gen1 (numberGenerator) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.gen1
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: gen2 (numberGenerator) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.gen2
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: multi (numberMultiplier) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.multi
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: main (main) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: btn1 (btn1) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: btn2 (btn2) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: btn3 (btn3) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: btn4 (btn4) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: btn5 (btn5) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: sm1 (sm1) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: jsm1 (jsm1) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: gen1 (gen1) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: gen2 (gen2) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: multi (multi) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: main (eventTrigger) for flow: example-flow
[2024-09-10T19:50:37.571Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: componentEvent
[2024-09-10T19:50:37.573Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.573Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: btn1 (buttonTrigger) for flow: example-flow
[2024-09-10T19:50:37.573Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: componentEvent
[2024-09-10T19:50:37.575Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.575Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: btn2 (buttonTrigger) for flow: example-flow
[2024-09-10T19:50:37.575Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: componentEvent
[2024-09-10T19:50:37.576Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.576Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: btn3 (buttonTrigger) for flow: example-flow
[2024-09-10T19:50:37.576Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: componentEvent
[2024-09-10T19:50:37.578Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.578Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: btn4 (buttonTrigger) for flow: example-flow
[2024-09-10T19:50:37.578Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: componentEvent
[2024-09-10T19:50:37.580Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.580Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: btn5 (buttonTrigger) for flow: example-flow
[2024-09-10T19:50:37.580Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: componentEvent
[2024-09-10T19:50:37.582Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.582Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: sm1 (stateMachine) for flow: example-flow
[2024-09-10T19:50:37.582Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: componentEvent
[2024-09-10T19:50:37.583Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.583Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: jsm1 (jobStateMachine) for flow: example-flow
[2024-09-10T19:50:37.583Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: componentEvent
[2024-09-10T19:50:37.585Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.585Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: gen1 (numberGenerator) for flow: example-flow
[2024-09-10T19:50:37.585Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: componentEvent
[2024-09-10T19:50:37.587Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.587Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: gen2 (numberGenerator) for flow: example-flow
[2024-09-10T19:50:37.587Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: componentEvent
[2024-09-10T19:50:37.589Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully
[2024-09-10T19:50:37.589Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: multi (numberMultiplier) for flow: example-flow
[2024-09-10T19:50:37.589Z] [LOG] [Bootstrap] [BackplaneService] Publishing message to exchange: flow_exchange, routingKey: componentEvent
[2024-09-10T19:50:37.592Z] [LOG] [Bootstrap] [BackplaneService] Message published successfully

</FILE>
<FILE path="src/services/backplane.service.ts" TARGET>
import { Injectable, OnModuleInit, OnModuleDestroy, Logger } from '@nestjs/common';
import * as amqp from 'amqplib';
import { MessageQueueClient } from 'message-queue/client';

interface MessageQueueAdapter {
  connect(): Promise<void>;
  disconnect(): Promise<void>;
  publish(exchange: string, routingKey: string, message: any): Promise<void>;
  subscribe(exchange: string, routingKey: string, queue: string, callback: (msg: any) => Promise<void>): Promise<void>;
}

class AmqpAdapter implements MessageQueueAdapter {
  private connection: amqp.Connection | null = null;
  private channel: amqp.Channel | null = null;

  constructor(private readonly logger: Logger) {}

  async connect(): Promise<void> {
    this.logger.log('Connecting to RabbitMQ...');
    this.connection = await amqp.connect('amqp://localhost:5672');
    this.channel = await this.connection.createChannel();
    this.logger.log('Successfully connected to RabbitMQ');
  }

  async disconnect(): Promise<void> {
    if (this.channel) {
      await this.channel.close();
      this.channel = null;
    }
    if (this.connection) {
      await this.connection.close();
      this.connection = null;
    }
    this.logger.log('Disconnected from RabbitMQ');
  }

  async publish(exchange: string, routingKey: string, message: any): Promise<void> {
    if (!this.channel) {
      throw new Error('Channel is not available');
    }
    await this.channel.assertExchange(exchange, 'topic', { durable: true });
    this.channel.publish(exchange, routingKey, Buffer.from(JSON.stringify(message)));
  }

  async subscribe(
    exchange: string,
    routingKey: string,
    queue: string,
    callback: (msg: any) => Promise<void>
  ): Promise<void> {
    if (!this.channel) {
      throw new Error('Channel is not available');
    }
    await this.channel.assertExchange(exchange, 'topic', { durable: true });
    const q = await this.channel.assertQueue(queue, { exclusive: false, durable: true });
    await this.channel.bindQueue(q.queue, exchange, routingKey);
    
    this.channel.consume(q.queue, async (msg) => {
      if (msg !== null) {
        const content = JSON.parse(msg.content.toString());
        await callback(content);
        this.channel.ack(msg);
      }
    });
  }
}

class IsmqAdapter implements MessageQueueAdapter {
  private client: MessageQueueClient | null = null;

  constructor(private readonly logger: Logger) {}

  async connect(): Promise<void> {
    this.logger.log('Connecting to ISMQ...');
    this.client = new MessageQueueClient('http://localhost:3030');
    await this.client.connectWebSocket();
    this.logger.log('Successfully connected to ISMQ');
  }

  async disconnect(): Promise<void> {
    if (this.client) {
      this.client.disconnectWebSocket();
      this.client = null;
    }
    this.logger.log('Disconnected from ISMQ');
  }

  async publish(exchange: string, routingKey: string, message: any): Promise<void> {
    if (!this.client) {
      throw new Error('ISMQ is not available');
    }
    this.logger.log(`Publishing message to exchange: ${exchange}, routingKey: ${routingKey}`);
    await this.client.createExchange(exchange);
    await this.client.publish(exchange, routingKey, message);
    this.logger.log('Message published successfully');
  }

  async subscribe(
    exchange: string,
    routingKey: string,
    queue: string,
    callback: (msg: any) => Promise<void>
  ): Promise<void> {
    if (!this.client) {
      throw new Error('ISMQ is not available');
    }
    this.logger.log(`Subscribing to exchange: ${exchange}, routingKey: ${routingKey}, queue: ${queue}`);
    await this.client.createExchange(exchange);
    await this.client.bind(exchange, queue, routingKey);
    let subscription = await this.client.subscribeToQueue(exchange, queue, async (message) => {
      this.logger.log(`Received message on queue: ${queue}, content: ${JSON.stringify(message)}`);
      try {
        await callback(message);
        this.logger.log(`Successfully processed message from queue: ${queue}`);
      } catch (error) {
        this.logger.error(`Error processing message from queue ${queue}: ${error.message}`);
      }
    });
    this.logger.log(`Successfully subscribed to queue: ${queue}`);
  }
}

@Injectable()
export class BackplaneService implements OnModuleInit, OnModuleDestroy {
  private adapter: MessageQueueAdapter;
  private readonly logger = new Logger(BackplaneService.name);
  private isInitialized = false;

  constructor() {
    // You can switch between 'amqp' and 'ismq' here or use an environment variable
    const adapterType = process.env.MESSAGE_QUEUE_ADAPTER || 'ismq';
    this.adapter = adapterType === 'amqp' ? new AmqpAdapter(this.logger) : new IsmqAdapter(this.logger);
  }

  async onModuleInit() {
    await this.connect();
  }

  async onModuleDestroy() {
    await this.disconnect();
  }

  private async connect() {
    try {
      await this.adapter.connect();
      this.isInitialized = true;
    } catch (error) {
      this.logger.error('Failed to connect to message queue', error);
      this.isInitialized = false;
      throw error;
    }
  }

  private async disconnect() {
    try {
      await this.adapter.disconnect();
      this.isInitialized = false;
    } catch (error) {
      this.logger.error('Error disconnecting from message queue', error);
    }
  }

  async publish(exchange: string, routingKey: string, message: any): Promise<void> {
    await this.ensureConnection();
    await this.adapter.publish(exchange, routingKey, message);
  }

  async subscribe(
    exchange: string,
    routingKey: string,
    queue: string,
    callback: (msg: any) => Promise<void>
  ): Promise<void> {
    await this.ensureConnection();
    await this.adapter.subscribe(exchange, routingKey, queue, callback);
  }

  private async ensureConnection(): Promise<void> {
    if (!this.isInitialized) {
      this.logger.warn('Connection not initialized, attempting to reconnect...');
      await this.connect();
    }
  }
}
</FILE>
<REQUEST>
looking at stdout subscription = await this.client.subscribeToQueue never logs anything even though events are being created; this could be because of node_module message-queue?
</REQUEST>