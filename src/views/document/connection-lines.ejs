<script>
  let resizeObserver;

  function drawConnectionLines() {
    const svg = document.getElementById('connection-lines');
    if (!svg) {
      const newSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      newSvg.id = 'connection-lines';
      newSvg.style.position = 'absolute';
      newSvg.style.top = '0';
      newSvg.style.left = '0';
      newSvg.style.width = '100%';
      newSvg.style.height = '100%';
      newSvg.style.pointerEvents = 'none';
      document.body.appendChild(newSvg);
    }
    
    // Clear existing lines
    document.getElementById('connection-lines').innerHTML = '';
    
    const components = document.querySelectorAll('.component-wrapper');
    components.forEach(fromComponent => {
      const fromComponentId = fromComponent.id;
      const outputPorts = fromComponent.querySelectorAll('.output-port');
      
      outputPorts.forEach(outputPort => {
        const fromEvent = outputPort.dataset.port;
        
        // Find connections for this output port
        const connections = window.flowConnections.filter(conn => 
          conn.fromComponent === fromComponentId.split('.')[1] && 
          conn.fromEvent === fromEvent.split('.')[2]
        );
        
        connections.forEach(connection => {
          const toComponentId = `${connection.toFlow}.${connection.toComponent}`;
          const toComponent = document.getElementById(toComponentId);
          
          if (toComponent) {
            const inputPort = toComponent.querySelector(`.input-port[data-port$=".${connection.toEvent}"]`);
            if (inputPort) {
              drawLine(outputPort, inputPort);
            }
          }
        });
      });
    });
  }

  function drawLine(start, end) {
    const svg = document.getElementById('connection-lines');
    const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
    
    const startRect = start.getBoundingClientRect();
    const endRect = end.getBoundingClientRect();
    
    const startX = startRect.right;
    const startY = startRect.top + startRect.height / 2;
    const endX = endRect.left;
    const endY = endRect.top + endRect.height / 2;
    
    line.setAttribute('x1', startX);
    line.setAttribute('y1', startY);
    line.setAttribute('x2', endX);
    line.setAttribute('y2', endY);
    line.setAttribute('stroke', 'black');
    line.setAttribute('stroke-width', '1');
    
    svg.appendChild(line);
  }

  function setupResizeObserver() {
    if (resizeObserver) {
      resizeObserver.disconnect();
    }

    resizeObserver = new ResizeObserver(drawConnectionLines);
    const swimlanes = document.querySelectorAll('.swimlane');
    swimlanes.forEach(swimlane => resizeObserver.observe(swimlane));
  }

  function initializeFlowConnections(flowConnections) {
    window.flowConnections = flowConnections;
    drawConnectionLines();
    setupResizeObserver();
  }

  window.addEventListener('resize', drawConnectionLines);
  window.addEventListener('scroll', drawConnectionLines);

  document.addEventListener('DOMContentLoaded', () => {
    const swimlaneContainer = document.getElementById('swimlane-container');
    if (swimlaneContainer) {
      swimlaneContainer.addEventListener('scroll', drawConnectionLines);
    }
    const mainSwimlane = document.getElementById('main-swimlane');
    if (mainSwimlane) {
      mainSwimlane.addEventListener('scroll', drawConnectionLines);
    }
  });

  // Call drawConnectionLines after any HTMX content updates
  document.body.addEventListener('htmx:afterSettle', () => {
    drawConnectionLines();
    setupResizeObserver();
  });
</script>