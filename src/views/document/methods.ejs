<script>
  function getNextSwimlane(direction, mainSwimlane) {
    const mainIndex = parseInt(mainSwimlane.getAttribute('data-index'));
    
    let targetIndex, targetSwimlane;
    if (direction === 'input') {
      targetIndex = mainIndex - 1;
      targetSwimlane = getOrCreateSwimlane(targetIndex);
    } else {
      targetIndex = mainIndex + 1;
      targetSwimlane = getOrCreateSwimlane(targetIndex);
    }

    return {
      mainIndex,
      targetIndex,
      targetSwimlane
    }
  }

  function loadConnectedComponents(direction, flowId, componentId, port, swimlaneId) {
    console.log('swimload load connected', swimlaneId, direction);
    const mainSwimlane = document.getElementById(swimlaneId);
    let next = getNextSwimlane(direction, mainSwimlane);

    const key = `${flowId}.${componentId}.${port}`;
    const eventElement = document.createElement('div');
    eventElement.setAttribute("id", key);
    next.targetSwimlane.innerHTML = '';
    next.targetSwimlane.appendChild(eventElement);
    
    htmx.ajax('GET', `/documentConnections/${flowId}/${componentId}/${port}/${next.targetSwimlane.id}`, {
      swap: 'none',
      handler: (dom, event) => {
        document.getElementById(key).outerHTML = event.xhr.response;
        htmx.process(document.getElementById(key));
      }
    });
  }

  function loadMainComponent(direction, flowId, componentId, swimlaneId) {
    console.log('swimload load main', swimlaneId, direction);
    // Update the main swimlane
    const mainSwimlane = document.getElementById(swimlaneId);
    let next = getNextSwimlane(direction, mainSwimlane);
    next.targetSwimlane.innerHTML = '';
    
    htmx.ajax('GET', `/documentComponent/${flowId}/${componentId}/${next.targetSwimlane.id}`, {
      swap: 'none',
      handler: (dom, event) => {
        next.targetSwimlane.innerHTML = event.xhr.response;
      }
    });
  }

  function getOrCreateSwimlane(index) {
    let swimlane = document.querySelector(`.swimlane[data-index="${index}"]`);
    if (swimlane) {
      console.log('swimlane found', index, swimlane)
    } else {
      console.log('swimlane not found', index)
    }
    if (!swimlane) {
      swimlane = document.createElement('div');
      swimlane.className = 'swimlane';
      swimlane.setAttribute('data-index', index);
      swimlane.id = `swimlane-${index}`;
      
      const container = document.getElementById('swimlane-container');
      if (index < 0) {
        container.insertBefore(swimlane, container.firstChild);
      } else {
        container.appendChild(swimlane);
      }
    }
    return swimlane;
  }
</script>