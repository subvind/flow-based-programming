c[[90m12:51:38 AM[0m] Starting compilation in watch mode...

[[90m12:51:39 AM[0m] Found 0 errors. Watching for file changes.

componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
components.main.eventTrigger.events.initializeMachine
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
components.jsm1.jobStateMachine.events.initializeMachine
fromParts [ 'components', 'main', 'eventTrigger', 'events', 'initializeMachine' ]
toParts [
  'components',
  'jsm1',
  'jobStateMachine',
  'events',
  'initializeMachine'
]
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
components.jsm1.jobStateMachine.events.start
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
components.gen1.numberGenerator.events.start
fromParts [ 'components', 'jsm1', 'jobStateMachine', 'events', 'start' ]
toParts [ 'components', 'gen1', 'numberGenerator', 'events', 'start' ]
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
components.jsm1.jobStateMachine.events.start
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
components.gen1.numberGenerator.events.start
fromParts [ 'components', 'jsm1', 'jobStateMachine', 'events', 'start' ]
toParts [ 'components', 'gen1', 'numberGenerator', 'events', 'start' ]
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
componentId gen1
componentRef numberGenerator
eventId stop
{}
{}
componentId gen1
componentRef numberGenerator
eventId numberGenerated
{}
{}
components.gen1.numberGenerator.events.numberGenerated
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
componentId gen1
componentRef numberGenerator
eventId stop
{}
{}
componentId gen1
componentRef numberGenerator
eventId numberGenerated
{}
{}
componentId gen2
componentRef numberGenerator
eventId start
{}
{}
componentId gen2
componentRef numberGenerator
eventId stop
{}
{}
componentId gen2
componentRef numberGenerator
eventId numberGenerated
{}
{}
componentId multi
componentRef numberMultiplier
eventId numberMultiplied
{}
{}
componentId multi
componentRef numberMultiplier
eventId firstNumberReceived
{}
{}
components.multi.numberMultiplier.events.firstNumberReceived
fromParts [
  'components',
  'gen1',
  'numberGenerator',
  'events',
  'numberGenerated'
]
toParts [
  'components',
  'multi',
  'numberMultiplier',
  'events',
  'firstNumberReceived'
]
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
componentId gen1
componentRef numberGenerator
eventId stop
{}
{}
componentId gen1
componentRef numberGenerator
eventId numberGenerated
{}
{}
components.gen1.numberGenerator.events.numberGenerated
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
componentId gen1
componentRef numberGenerator
eventId stop
{}
{}
componentId gen1
componentRef numberGenerator
eventId numberGenerated
{}
{}
componentId gen2
componentRef numberGenerator
eventId start
{}
{}
componentId gen2
componentRef numberGenerator
eventId stop
{}
{}
componentId gen2
componentRef numberGenerator
eventId numberGenerated
{}
{}
componentId multi
componentRef numberMultiplier
eventId numberMultiplied
{}
{}
componentId multi
componentRef numberMultiplier
eventId firstNumberReceived
{}
{}
componentId multi
componentRef numberMultiplier
eventId secondNumberReceived
{}
{}
components.multi.numberMultiplier.events.secondNumberReceived
fromParts [
  'components',
  'gen1',
  'numberGenerator',
  'events',
  'numberGenerated'
]
toParts [
  'components',
  'multi',
  'numberMultiplier',
  'events',
  'secondNumberReceived'
]
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
componentId gen1
componentRef numberGenerator
eventId stop
{}
{}
componentId gen1
componentRef numberGenerator
eventId numberGenerated
{}
{}
componentId gen2
componentRef numberGenerator
eventId start
{}
{}
componentId gen2
componentRef numberGenerator
eventId stop
{}
{}
componentId gen2
componentRef numberGenerator
eventId numberGenerated
{}
{}
componentId multi
componentRef numberMultiplier
eventId numberMultiplied
{}
{}
components.multi.numberMultiplier.events.numberMultiplied
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
components.jsm1.jobStateMachine.events.finish
fromParts [
  'components',
  'multi',
  'numberMultiplier',
  'events',
  'numberMultiplied'
]
toParts [ 'components', 'jsm1', 'jobStateMachine', 'events', 'finish' ]
code {
  id: 'example-flow',
  components: [
    {
      componentId: 'main',
      componentRef: 'eventTrigger',
      init: undefined
    },
    {
      componentId: 'sm1',
      componentRef: 'stateMachine',
      init: [Object]
    },
    {
      componentId: 'jsm1',
      componentRef: 'jobStateMachine',
      init: undefined
    },
    {
      componentId: 'gen1',
      componentRef: 'numberGenerator',
      init: undefined
    },
    {
      componentId: 'gen2',
      componentRef: 'numberGenerator',
      init: undefined
    },
    {
      componentId: 'multi',
      componentRef: 'numberMultiplier',
      init: undefined
    }
  ],
  connections: [
    {
      fromFlow: 'example-flow',
      fromComponent: 'main',
      fromEvent: 'initializeMachine',
      toFlow: 'example-flow',
      toComponent: 'jsm1',
      toEvent: 'initializeMachine'
    },
    {
      fromFlow: 'example-flow',
      fromComponent: 'jsm1',
      fromEvent: 'start',
      toFlow: 'example-flow',
      toComponent: 'gen1',
      toEvent: 'start'
    },
    {
      fromFlow: 'example-flow',
      fromComponent: 'jsm1',
      fromEvent: 'start',
      toFlow: 'example-flow',
      toComponent: 'gen1',
      toEvent: 'start'
    },
    {
      fromFlow: 'example-flow',
      fromComponent: 'gen1',
      fromEvent: 'numberGenerated',
      toFlow: 'example-flow',
      toComponent: 'multi',
      toEvent: 'firstNumberReceived'
    },
    {
      fromFlow: 'example-flow',
      fromComponent: 'gen1',
      fromEvent: 'numberGenerated',
      toFlow: 'example-flow',
      toComponent: 'multi',
      toEvent: 'secondNumberReceived'
    },
    {
      fromFlow: 'example-flow',
      fromComponent: 'multi',
      fromEvent: 'numberMultiplied',
      toFlow: 'example-flow',
      toComponent: 'jsm1',
      toEvent: 'finish'
    }
  ]
}
[32m[Nest] 1275638  - [39m08/29/2024, 12:51:39 AM [32m    LOG[39m [38;5;3m[NestFactory] [39m[32mStarting Nest application...[39m
[32m[Nest] 1275638  - [39m08/29/2024, 12:51:39 AM [32m    LOG[39m [38;5;3m[AmqpConnection] [39m[32mTrying to connect to RabbitMQ broker (default)[39m
[32m[Nest] 1275638  - [39m08/29/2024, 12:51:39 AM [32m    LOG[39m [38;5;3m[RabbitMQModule] [39m[32mSuccessfully connected to RabbitMQ[39m
[32m[Nest] 1275638  - [39m08/29/2024, 12:51:39 AM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mDiscoveryModule dependencies initialized[39m[38;5;3m +8ms[39m
[32m[Nest] 1275638  - [39m08/29/2024, 12:51:39 AM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mRabbitMQModule dependencies initialized[39m[38;5;3m +1ms[39m
[32m[Nest] 1275638  - [39m08/29/2024, 12:51:39 AM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mAppModule dependencies initialized[39m[38;5;3m +0ms[39m
[2024-08-29T05:51:39.986Z] [LOG] [Bootstrap] Starting main application...
[2024-08-29T05:51:39.987Z] [LOG] [Bootstrap] [NestFactory] Starting Nest application...
[2024-08-29T05:51:39.989Z] [LOG] [Bootstrap] [AmqpConnection] Trying to connect to RabbitMQ broker (default)
[2024-08-29T05:51:39.989Z] [LOG] [Bootstrap] [RabbitMQModule] Successfully connected to RabbitMQ
[2024-08-29T05:51:39.990Z] [LOG] [Bootstrap] [InstanceLoader] DiscoveryModule dependencies initialized
[2024-08-29T05:51:39.990Z] [LOG] [Bootstrap] [InstanceLoader] RabbitMQModule dependencies initialized
[2024-08-29T05:51:39.990Z] [LOG] [Bootstrap] [InstanceLoader] AppModule dependencies initialized
[2024-08-29T05:51:39.996Z] [LOG] [Bootstrap] [WebSocketsController] EventTriggerComponent subscribed to the "client-event" message
[2024-08-29T05:51:39.997Z] [LOG] [Bootstrap] [WebSocketsController] NumberGeneratorComponent subscribed to the "client-event" message
[2024-08-29T05:51:39.997Z] [LOG] [Bootstrap] [WebSocketsController] NumberMultiplierComponent subscribed to the "client-event" message
[2024-08-29T05:51:39.997Z] [LOG] [Bootstrap] [WebSocketsController] StateMachineComponent subscribed to the "client-event" message
[2024-08-29T05:51:39.997Z] [LOG] [Bootstrap] [WebSocketsController] JobStateMachineComponent subscribed to the "client-event" message
[2024-08-29T05:51:39.998Z] [LOG] [Bootstrap] [RoutesResolver] AppController {/}:
[2024-08-29T05:51:40.000Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/, GET} route
[2024-08-29T05:51:40.000Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/document, GET} route
[2024-08-29T05:51:40.000Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/documentComponent/:flowId/:componentId/:swimlaneId, GET} route
[2024-08-29T05:51:40.001Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/documentConnections/:flowId/:componentId/:portId/:swimlaneId, GET} route
[2024-08-29T05:51:40.001Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/logger, GET} route
[2024-08-29T05:51:40.001Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/trigger-event/:flowComponentEvent, POST} route
[2024-08-29T05:51:40.002Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724910699989
[2024-08-29T05:51:40.002Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724910699989
[2024-08-29T05:51:40.002Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724910699989
[2024-08-29T05:51:40.002Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724910699989
[2024-08-29T05:51:40.002Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724910699989
[2024-08-29T05:51:40.002Z] [LOG] [Bootstrap] [RabbitMQModule] Initializing RabbitMQ Handlers
[2024-08-29T05:51:40.004Z] [LOG] [Bootstrap] [RabbitMQModule] Registering rabbitmq handlers from EventProcessor
[2024-08-29T05:51:40.005Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.handleComponentEvent {subscribe} -> flow_exchange::componentEvent::component_event_queue
[2024-08-29T05:51:40.005Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.createConnection {subscribe} -> flow_exchange::createConnection::create_connection_queue
[2024-08-29T05:51:40.005Z] [LOG] [Bootstrap] [RabbitMQModule] Initializing RabbitMQ Handlers
[2024-08-29T05:51:40.005Z] [LOG] [Bootstrap] [RabbitMQModule] Registering rabbitmq handlers from EventProcessor
[2024-08-29T05:51:40.005Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.handleComponentEvent {subscribe} -> flow_exchange::componentEvent::component_event_queue
[2024-08-29T05:51:40.005Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.createConnection {subscribe} -> flow_exchange::createConnection::create_connection_queue
[2024-08-29T05:51:40.005Z] [LOG] [Bootstrap] [NestApplication] Nest application successfully started
[2024-08-29T05:51:40.005Z] [LOG] [Bootstrap] Starting flow execution...
[2024-08-29T05:51:40.005Z] [LOG] [Bootstrap] [FlowExecutorService] Executing flow: example-flow
[2024-08-29T05:51:40.005Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: main.initializeMachine -> jsm1.initializeMachine
[2024-08-29T05:51:40.008Z] [LOG] [Bootstrap] Application is running on: http://localhost:3000
[2024-08-29T05:51:40.058Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected to RabbitMQ broker (default)
[2024-08-29T05:51:40.060Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected to RabbitMQ broker (default)
[2024-08-29T05:51:40.066Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected a RabbitMQ channel "AmqpConnection"
[2024-08-29T05:51:40.066Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected a RabbitMQ channel "AmqpConnection"
[2024-08-29T05:51:40.067Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.main.initializeMachine -> jsm1.initializeMachine
[2024-08-29T05:51:40.067Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.main.initializeMachine -> jsm1.initializeMachine
[2024-08-29T05:51:40.067Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: jsm1.start -> gen1.start
[2024-08-29T05:51:40.068Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-29T05:51:40.068Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: jsm1.start -> gen1.start
[2024-08-29T05:51:40.068Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.jsm1.start -> gen1.start
[2024-08-29T05:51:40.068Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.jsm1.start -> gen1.start
[2024-08-29T05:51:40.068Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-29T05:51:40.110Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.jsm1.start -> gen1.start
[2024-08-29T05:51:40.110Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.jsm1.start -> gen1.start
[2024-08-29T05:51:40.110Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: gen1.numberGenerated -> multi.firstNumberReceived
[2024-08-29T05:51:40.111Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-29T05:51:40.111Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: gen1.numberGenerated -> multi.secondNumberReceived
[2024-08-29T05:51:40.111Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.gen1.numberGenerated -> multi.firstNumberReceived
[2024-08-29T05:51:40.111Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.gen1.numberGenerated -> multi.firstNumberReceived
[2024-08-29T05:51:40.111Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-29T05:51:40.155Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.gen1.numberGenerated -> multi.secondNumberReceived
[2024-08-29T05:51:40.155Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.gen1.numberGenerated -> multi.secondNumberReceived
[2024-08-29T05:51:40.155Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: multi.numberMultiplied -> jsm1.finish
[2024-08-29T05:51:40.155Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-29T05:51:40.156Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: main (eventTrigger) for flow: example-flow
[2024-08-29T05:51:40.156Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.main
[2024-08-29T05:51:40.156Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: sm1 (stateMachine) for flow: example-flow
[2024-08-29T05:51:40.156Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.sm1
[2024-08-29T05:51:40.156Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: jsm1 (jobStateMachine) for flow: example-flow
[2024-08-29T05:51:40.156Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.jsm1
[2024-08-29T05:51:40.156Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: gen1 (numberGenerator) for flow: example-flow
[2024-08-29T05:51:40.156Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.gen1
[2024-08-29T05:51:40.156Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: gen2 (numberGenerator) for flow: example-flow
[2024-08-29T05:51:40.156Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.gen2
[2024-08-29T05:51:40.156Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: multi (numberMultiplier) for flow: example-flow
[2024-08-29T05:51:40.156Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.multi
[2024-08-29T05:51:40.156Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: main (main) for flow: example-flow
[2024-08-29T05:51:40.157Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: sm1 (sm1) for flow: example-flow
[2024-08-29T05:51:40.157Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: jsm1 (jsm1) for flow: example-flow
[2024-08-29T05:51:40.157Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: gen1 (gen1) for flow: example-flow
[2024-08-29T05:51:40.157Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: gen2 (gen2) for flow: example-flow
[2024-08-29T05:51:40.157Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: multi (multi) for flow: example-flow
[2024-08-29T05:51:40.157Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: main (eventTrigger) for flow: example-flow
[2024-08-29T05:51:40.157Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.multi.numberMultiplied -> jsm1.finish
[2024-08-29T05:51:40.157Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.multi.numberMultiplied -> jsm1.finish
[2024-08-29T05:51:40.157Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-29T05:51:40.197Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.main.init] data: undefined
[2024-08-29T05:51:40.198Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: main
[2024-08-29T05:51:40.198Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: sm1 (stateMachine) for flow: example-flow
[2024-08-29T05:51:40.198Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: jsm1 (jobStateMachine) for flow: example-flow
[2024-08-29T05:51:40.199Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.sm1.init] data: {"initialState":"idle","states":["idle","running","paused","finished"],"transitions":{"idle":{"start":"running"},"running":{"pause":"paused","finish":"finished"},"paused":{"resume":"running","finish":"finished"},"finished":{"reset":"idle"}}}
[2024-08-29T05:51:40.199Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: sm1
[2024-08-29T05:51:40.199Z] [LOG] [example-flow.sm1] Handling event: init
[2024-08-29T05:51:40.199Z] [LOG] [example-flow.sm1] State machine initialized with initial state: idle
[2024-08-29T05:51:40.199Z] [LOG] [example-flow.sm1] Publishing: example-flow.sm1.stateChanged -> [object Object]
[2024-08-29T05:51:40.240Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.sm1.stateChanged] data: {"currentState":"idle"}
[2024-08-29T05:51:40.240Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: sm1
[2024-08-29T05:51:40.240Z] [LOG] [example-flow.sm1] Handling event: stateChanged
[2024-08-29T05:51:40.240Z] [WARN] [example-flow.sm1] Unknown event: stateChanged
[2024-08-29T05:51:40.241Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.jsm1.init] data: undefined
[2024-08-29T05:51:40.241Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: jsm1
[2024-08-29T05:51:40.241Z] [LOG] [example-flow.jsm1] Handling event: init
[2024-08-29T05:51:40.241Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: gen1 (numberGenerator) for flow: example-flow
[2024-08-29T05:51:40.242Z] [ERROR] [example-flow.sm1] Error rendering EJS template: ENOENT: no such file or directory, open '/home/travis/Projects/flow-based-programming/dist/templates/state-machine.ejs'
[2024-08-29T05:51:40.242Z] [LOG] [example-flow.sm1] <div>Error rendering content</div>
[2024-08-29T05:51:40.243Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.init] data: undefined
[2024-08-29T05:51:40.243Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-29T05:51:40.243Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: init
[2024-08-29T05:51:40.243Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: gen2 (numberGenerator) for flow: example-flow
[2024-08-29T05:51:40.283Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: multi (numberMultiplier) for flow: example-flow
[2024-08-29T05:51:40.284Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen2.init] data: undefined
[2024-08-29T05:51:40.284Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen2
[2024-08-29T05:51:40.284Z] [LOG] [example-flow.gen2] NumberGenerator (example-flow) handling event: init
[2024-08-29T05:51:40.286Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.multi.init] data: undefined
[2024-08-29T05:51:40.286Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: multi
[2024-08-29T05:51:40.287Z] [LOG] [example-flow.multi] NumberMultiplier handling event: init undefined
(node:1275638) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 disconnect listeners added to [Socket]. MaxListeners is 10. Use emitter.setMaxListeners() to increase limit
(Use `node --trace-warnings ...` to show where the warning was created)
c[[90m12:52:02 AM[0m] File change detected. Starting incremental compilation...

[[90m12:52:02 AM[0m] Found 0 errors. Watching for file changes.

componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
components.main.eventTrigger.events.initializeMachine
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
components.jsm1.jobStateMachine.events.initializeMachine
fromParts [ 'components', 'main', 'eventTrigger', 'events', 'initializeMachine' ]
toParts [
  'components',
  'jsm1',
  'jobStateMachine',
  'events',
  'initializeMachine'
]
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
components.jsm1.jobStateMachine.events.start
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
components.gen1.numberGenerator.events.start
fromParts [ 'components', 'jsm1', 'jobStateMachine', 'events', 'start' ]
toParts [ 'components', 'gen1', 'numberGenerator', 'events', 'start' ]
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
components.jsm1.jobStateMachine.events.start
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
components.gen1.numberGenerator.events.start
fromParts [ 'components', 'jsm1', 'jobStateMachine', 'events', 'start' ]
toParts [ 'components', 'gen1', 'numberGenerator', 'events', 'start' ]
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
componentId gen1
componentRef numberGenerator
eventId stop
{}
{}
componentId gen1
componentRef numberGenerator
eventId numberGenerated
{}
{}
components.gen1.numberGenerator.events.numberGenerated
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
componentId gen1
componentRef numberGenerator
eventId stop
{}
{}
componentId gen1
componentRef numberGenerator
eventId numberGenerated
{}
{}
componentId gen2
componentRef numberGenerator
eventId start
{}
{}
componentId gen2
componentRef numberGenerator
eventId stop
{}
{}
componentId gen2
componentRef numberGenerator
eventId numberGenerated
{}
{}
componentId multi
componentRef numberMultiplier
eventId numberMultiplied
{}
{}
componentId multi
componentRef numberMultiplier
eventId firstNumberReceived
{}
{}
components.multi.numberMultiplier.events.firstNumberReceived
fromParts [
  'components',
  'gen1',
  'numberGenerator',
  'events',
  'numberGenerated'
]
toParts [
  'components',
  'multi',
  'numberMultiplier',
  'events',
  'firstNumberReceived'
]
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
componentId gen1
componentRef numberGenerator
eventId stop
{}
{}
componentId gen1
componentRef numberGenerator
eventId numberGenerated
{}
{}
components.gen1.numberGenerator.events.numberGenerated
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
componentId gen1
componentRef numberGenerator
eventId stop
{}
{}
componentId gen1
componentRef numberGenerator
eventId numberGenerated
{}
{}
componentId gen2
componentRef numberGenerator
eventId start
{}
{}
componentId gen2
componentRef numberGenerator
eventId stop
{}
{}
componentId gen2
componentRef numberGenerator
eventId numberGenerated
{}
{}
componentId multi
componentRef numberMultiplier
eventId numberMultiplied
{}
{}
componentId multi
componentRef numberMultiplier
eventId firstNumberReceived
{}
{}
componentId multi
componentRef numberMultiplier
eventId secondNumberReceived
{}
{}
components.multi.numberMultiplier.events.secondNumberReceived
fromParts [
  'components',
  'gen1',
  'numberGenerator',
  'events',
  'numberGenerated'
]
toParts [
  'components',
  'multi',
  'numberMultiplier',
  'events',
  'secondNumberReceived'
]
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
componentId gen1
componentRef numberGenerator
eventId stop
{}
{}
componentId gen1
componentRef numberGenerator
eventId numberGenerated
{}
{}
componentId gen2
componentRef numberGenerator
eventId start
{}
{}
componentId gen2
componentRef numberGenerator
eventId stop
{}
{}
componentId gen2
componentRef numberGenerator
eventId numberGenerated
{}
{}
componentId multi
componentRef numberMultiplier
eventId numberMultiplied
{}
{}
components.multi.numberMultiplier.events.numberMultiplied
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
components.jsm1.jobStateMachine.events.finish
fromParts [
  'components',
  'multi',
  'numberMultiplier',
  'events',
  'numberMultiplied'
]
toParts [ 'components', 'jsm1', 'jobStateMachine', 'events', 'finish' ]
code {
  id: 'example-flow',
  components: [
    {
      componentId: 'main',
      componentRef: 'eventTrigger',
      init: undefined
    },
    {
      componentId: 'sm1',
      componentRef: 'stateMachine',
      init: [Object]
    },
    {
      componentId: 'jsm1',
      componentRef: 'jobStateMachine',
      init: undefined
    },
    {
      componentId: 'gen1',
      componentRef: 'numberGenerator',
      init: undefined
    },
    {
      componentId: 'gen2',
      componentRef: 'numberGenerator',
      init: undefined
    },
    {
      componentId: 'multi',
      componentRef: 'numberMultiplier',
      init: undefined
    }
  ],
  connections: [
    {
      fromFlow: 'example-flow',
      fromComponent: 'main',
      fromEvent: 'initializeMachine',
      toFlow: 'example-flow',
      toComponent: 'jsm1',
      toEvent: 'initializeMachine'
    },
    {
      fromFlow: 'example-flow',
      fromComponent: 'jsm1',
      fromEvent: 'start',
      toFlow: 'example-flow',
      toComponent: 'gen1',
      toEvent: 'start'
    },
    {
      fromFlow: 'example-flow',
      fromComponent: 'jsm1',
      fromEvent: 'start',
      toFlow: 'example-flow',
      toComponent: 'gen1',
      toEvent: 'start'
    },
    {
      fromFlow: 'example-flow',
      fromComponent: 'gen1',
      fromEvent: 'numberGenerated',
      toFlow: 'example-flow',
      toComponent: 'multi',
      toEvent: 'firstNumberReceived'
    },
    {
      fromFlow: 'example-flow',
      fromComponent: 'gen1',
      fromEvent: 'numberGenerated',
      toFlow: 'example-flow',
      toComponent: 'multi',
      toEvent: 'secondNumberReceived'
    },
    {
      fromFlow: 'example-flow',
      fromComponent: 'multi',
      fromEvent: 'numberMultiplied',
      toFlow: 'example-flow',
      toComponent: 'jsm1',
      toEvent: 'finish'
    }
  ]
}
[32m[Nest] 1275874  - [39m08/29/2024, 12:52:02 AM [32m    LOG[39m [38;5;3m[NestFactory] [39m[32mStarting Nest application...[39m
[32m[Nest] 1275874  - [39m08/29/2024, 12:52:02 AM [32m    LOG[39m [38;5;3m[AmqpConnection] [39m[32mTrying to connect to RabbitMQ broker (default)[39m
[32m[Nest] 1275874  - [39m08/29/2024, 12:52:02 AM [32m    LOG[39m [38;5;3m[RabbitMQModule] [39m[32mSuccessfully connected to RabbitMQ[39m
[32m[Nest] 1275874  - [39m08/29/2024, 12:52:02 AM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mDiscoveryModule dependencies initialized[39m[38;5;3m +8ms[39m
[32m[Nest] 1275874  - [39m08/29/2024, 12:52:02 AM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mRabbitMQModule dependencies initialized[39m[38;5;3m +1ms[39m
[32m[Nest] 1275874  - [39m08/29/2024, 12:52:02 AM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mAppModule dependencies initialized[39m[38;5;3m +0ms[39m
[2024-08-29T05:52:02.458Z] [LOG] [Bootstrap] Starting main application...
[2024-08-29T05:52:02.459Z] [LOG] [Bootstrap] [NestFactory] Starting Nest application...
[2024-08-29T05:52:02.461Z] [LOG] [Bootstrap] [AmqpConnection] Trying to connect to RabbitMQ broker (default)
[2024-08-29T05:52:02.461Z] [LOG] [Bootstrap] [RabbitMQModule] Successfully connected to RabbitMQ
[2024-08-29T05:52:02.462Z] [LOG] [Bootstrap] [InstanceLoader] DiscoveryModule dependencies initialized
[2024-08-29T05:52:02.462Z] [LOG] [Bootstrap] [InstanceLoader] RabbitMQModule dependencies initialized
[2024-08-29T05:52:02.462Z] [LOG] [Bootstrap] [InstanceLoader] AppModule dependencies initialized
[2024-08-29T05:52:02.470Z] [LOG] [Bootstrap] [WebSocketsController] EventTriggerComponent subscribed to the "client-event" message
[2024-08-29T05:52:02.470Z] [LOG] [Bootstrap] [WebSocketsController] NumberGeneratorComponent subscribed to the "client-event" message
[2024-08-29T05:52:02.470Z] [LOG] [Bootstrap] [WebSocketsController] NumberMultiplierComponent subscribed to the "client-event" message
[2024-08-29T05:52:02.470Z] [LOG] [Bootstrap] [WebSocketsController] StateMachineComponent subscribed to the "client-event" message
[2024-08-29T05:52:02.471Z] [LOG] [Bootstrap] [WebSocketsController] JobStateMachineComponent subscribed to the "client-event" message
[2024-08-29T05:52:02.472Z] [LOG] [Bootstrap] [RoutesResolver] AppController {/}:
[2024-08-29T05:52:02.473Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/, GET} route
[2024-08-29T05:52:02.473Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/document, GET} route
[2024-08-29T05:52:02.473Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/documentComponent/:flowId/:componentId/:swimlaneId, GET} route
[2024-08-29T05:52:02.474Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/documentConnections/:flowId/:componentId/:portId/:swimlaneId, GET} route
[2024-08-29T05:52:02.474Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/logger, GET} route
[2024-08-29T05:52:02.474Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/trigger-event/:flowComponentEvent, POST} route
[2024-08-29T05:52:02.475Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724910722461
[2024-08-29T05:52:02.475Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724910722461
[2024-08-29T05:52:02.475Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724910722461
[2024-08-29T05:52:02.475Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724910722461
[2024-08-29T05:52:02.475Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724910722461
[2024-08-29T05:52:02.475Z] [LOG] [Bootstrap] [RabbitMQModule] Initializing RabbitMQ Handlers
[2024-08-29T05:52:02.477Z] [LOG] [Bootstrap] [RabbitMQModule] Registering rabbitmq handlers from EventProcessor
[2024-08-29T05:52:02.477Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.handleComponentEvent {subscribe} -> flow_exchange::componentEvent::component_event_queue
[2024-08-29T05:52:02.477Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.createConnection {subscribe} -> flow_exchange::createConnection::create_connection_queue
[2024-08-29T05:52:02.477Z] [LOG] [Bootstrap] [RabbitMQModule] Initializing RabbitMQ Handlers
[2024-08-29T05:52:02.478Z] [LOG] [Bootstrap] [RabbitMQModule] Registering rabbitmq handlers from EventProcessor
[2024-08-29T05:52:02.478Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.handleComponentEvent {subscribe} -> flow_exchange::componentEvent::component_event_queue
[2024-08-29T05:52:02.478Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.createConnection {subscribe} -> flow_exchange::createConnection::create_connection_queue
[2024-08-29T05:52:02.478Z] [LOG] [Bootstrap] [NestApplication] Nest application successfully started
[2024-08-29T05:52:02.478Z] [LOG] [Bootstrap] Starting flow execution...
[2024-08-29T05:52:02.478Z] [LOG] [Bootstrap] [FlowExecutorService] Executing flow: example-flow
[2024-08-29T05:52:02.478Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: main.initializeMachine -> jsm1.initializeMachine
[2024-08-29T05:52:02.480Z] [LOG] [Bootstrap] Application is running on: http://localhost:3000
[2024-08-29T05:52:02.531Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected to RabbitMQ broker (default)
[2024-08-29T05:52:02.533Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected to RabbitMQ broker (default)
[2024-08-29T05:52:02.538Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected a RabbitMQ channel "AmqpConnection"
[2024-08-29T05:52:02.539Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected a RabbitMQ channel "AmqpConnection"
[2024-08-29T05:52:02.539Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: jsm1.start -> gen1.start
[2024-08-29T05:52:02.540Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.main.initializeMachine -> jsm1.initializeMachine
[2024-08-29T05:52:02.540Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.main.initializeMachine -> jsm1.initializeMachine
[2024-08-29T05:52:02.540Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-29T05:52:02.540Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.jsm1.start -> gen1.start
[2024-08-29T05:52:02.541Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.jsm1.start -> gen1.start
[2024-08-29T05:52:02.541Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: jsm1.start -> gen1.start
[2024-08-29T05:52:02.541Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-29T05:52:02.541Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: gen1.numberGenerated -> multi.firstNumberReceived
[2024-08-29T05:52:02.541Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.jsm1.start -> gen1.start
[2024-08-29T05:52:02.541Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.jsm1.start -> gen1.start
[2024-08-29T05:52:02.541Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-29T05:52:02.584Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.gen1.numberGenerated -> multi.firstNumberReceived
[2024-08-29T05:52:02.584Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.gen1.numberGenerated -> multi.firstNumberReceived
[2024-08-29T05:52:02.584Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: gen1.numberGenerated -> multi.secondNumberReceived
[2024-08-29T05:52:02.584Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-29T05:52:02.584Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: multi.numberMultiplied -> jsm1.finish
[2024-08-29T05:52:02.585Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.gen1.numberGenerated -> multi.secondNumberReceived
[2024-08-29T05:52:02.585Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.gen1.numberGenerated -> multi.secondNumberReceived
[2024-08-29T05:52:02.585Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-29T05:52:02.627Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.multi.numberMultiplied -> jsm1.finish
[2024-08-29T05:52:02.627Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.multi.numberMultiplied -> jsm1.finish
[2024-08-29T05:52:02.627Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: main (eventTrigger) for flow: example-flow
[2024-08-29T05:52:02.627Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.main
[2024-08-29T05:52:02.628Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: sm1 (stateMachine) for flow: example-flow
[2024-08-29T05:52:02.628Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.sm1
[2024-08-29T05:52:02.628Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: jsm1 (jobStateMachine) for flow: example-flow
[2024-08-29T05:52:02.628Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.jsm1
[2024-08-29T05:52:02.628Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: gen1 (numberGenerator) for flow: example-flow
[2024-08-29T05:52:02.628Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.gen1
[2024-08-29T05:52:02.628Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: gen2 (numberGenerator) for flow: example-flow
[2024-08-29T05:52:02.628Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.gen2
[2024-08-29T05:52:02.628Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: multi (numberMultiplier) for flow: example-flow
[2024-08-29T05:52:02.628Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.multi
[2024-08-29T05:52:02.628Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: main (main) for flow: example-flow
[2024-08-29T05:52:02.628Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: sm1 (sm1) for flow: example-flow
[2024-08-29T05:52:02.628Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: jsm1 (jsm1) for flow: example-flow
[2024-08-29T05:52:02.628Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: gen1 (gen1) for flow: example-flow
[2024-08-29T05:52:02.628Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: gen2 (gen2) for flow: example-flow
[2024-08-29T05:52:02.628Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: multi (multi) for flow: example-flow
[2024-08-29T05:52:02.628Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: main (eventTrigger) for flow: example-flow
[2024-08-29T05:52:02.628Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-29T05:52:02.629Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: sm1 (stateMachine) for flow: example-flow
[2024-08-29T05:52:02.629Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.main.init] data: undefined
[2024-08-29T05:52:02.629Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: main
[2024-08-29T05:52:02.671Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.sm1.init] data: {"initialState":"idle","states":["idle","running","paused","finished"],"transitions":{"idle":{"start":"running"},"running":{"pause":"paused","finish":"finished"},"paused":{"resume":"running","finish":"finished"},"finished":{"reset":"idle"}}}
[2024-08-29T05:52:02.671Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: sm1
[2024-08-29T05:52:02.671Z] [LOG] [example-flow.sm1] Handling event: init
[2024-08-29T05:52:02.671Z] [LOG] [example-flow.sm1] State machine initialized with initial state: idle
[2024-08-29T05:52:02.671Z] [LOG] [example-flow.sm1] Publishing: example-flow.sm1.stateChanged -> [object Object]
[2024-08-29T05:52:02.672Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: jsm1 (jobStateMachine) for flow: example-flow
[2024-08-29T05:52:02.673Z] [ERROR] [example-flow.sm1] Error rendering EJS template: ENOENT: no such file or directory, open '/home/travis/Projects/flow-based-programming/dist/templates/state-machine.ejs'
[2024-08-29T05:52:02.673Z] [LOG] [example-flow.sm1] <div>Error rendering content</div>
[2024-08-29T05:52:02.674Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.sm1.stateChanged] data: {"currentState":"idle"}
[2024-08-29T05:52:02.674Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: sm1
[2024-08-29T05:52:02.674Z] [LOG] [example-flow.sm1] Handling event: stateChanged
[2024-08-29T05:52:02.674Z] [WARN] [example-flow.sm1] Unknown event: stateChanged
[2024-08-29T05:52:02.674Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.jsm1.init] data: undefined
[2024-08-29T05:52:02.674Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: jsm1
[2024-08-29T05:52:02.674Z] [LOG] [example-flow.jsm1] Handling event: init
[2024-08-29T05:52:02.674Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: gen1 (numberGenerator) for flow: example-flow
[2024-08-29T05:52:02.717Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: gen2 (numberGenerator) for flow: example-flow
[2024-08-29T05:52:02.718Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.init] data: undefined
[2024-08-29T05:52:02.718Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-29T05:52:02.718Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: init
[2024-08-29T05:52:02.718Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen2.init] data: undefined
[2024-08-29T05:52:02.718Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen2
[2024-08-29T05:52:02.718Z] [LOG] [example-flow.gen2] NumberGenerator (example-flow) handling event: init
[2024-08-29T05:52:02.718Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: multi (numberMultiplier) for flow: example-flow
[2024-08-29T05:52:02.719Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.multi.init] data: undefined
[2024-08-29T05:52:02.719Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: multi
[2024-08-29T05:52:02.719Z] [LOG] [example-flow.multi] NumberMultiplier handling event: init undefined
(node:1275874) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 disconnect listeners added to [Socket]. MaxListeners is 10. Use emitter.setMaxListeners() to increase limit
(Use `node --trace-warnings ...` to show where the warning was created)
c[[90m12:52:31 AM[0m] File change detected. Starting incremental compilation...

[[90m12:52:31 AM[0m] Found 0 errors. Watching for file changes.

componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
components.main.eventTrigger.events.initializeMachine
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
components.jsm1.jobStateMachine.events.initializeMachine
fromParts [ 'components', 'main', 'eventTrigger', 'events', 'initializeMachine' ]
toParts [
  'components',
  'jsm1',
  'jobStateMachine',
  'events',
  'initializeMachine'
]
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
components.jsm1.jobStateMachine.events.start
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
components.gen1.numberGenerator.events.start
fromParts [ 'components', 'jsm1', 'jobStateMachine', 'events', 'start' ]
toParts [ 'components', 'gen1', 'numberGenerator', 'events', 'start' ]
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
components.jsm1.jobStateMachine.events.start
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
components.gen1.numberGenerator.events.start
fromParts [ 'components', 'jsm1', 'jobStateMachine', 'events', 'start' ]
toParts [ 'components', 'gen1', 'numberGenerator', 'events', 'start' ]
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
componentId gen1
componentRef numberGenerator
eventId stop
{}
{}
componentId gen1
componentRef numberGenerator
eventId numberGenerated
{}
{}
components.gen1.numberGenerator.events.numberGenerated
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
componentId gen1
componentRef numberGenerator
eventId stop
{}
{}
componentId gen1
componentRef numberGenerator
eventId numberGenerated
{}
{}
componentId gen2
componentRef numberGenerator
eventId start
{}
{}
componentId gen2
componentRef numberGenerator
eventId stop
{}
{}
componentId gen2
componentRef numberGenerator
eventId numberGenerated
{}
{}
componentId multi
componentRef numberMultiplier
eventId numberMultiplied
{}
{}
componentId multi
componentRef numberMultiplier
eventId firstNumberReceived
{}
{}
components.multi.numberMultiplier.events.firstNumberReceived
fromParts [
  'components',
  'gen1',
  'numberGenerator',
  'events',
  'numberGenerated'
]
toParts [
  'components',
  'multi',
  'numberMultiplier',
  'events',
  'firstNumberReceived'
]
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
componentId gen1
componentRef numberGenerator
eventId stop
{}
{}
componentId gen1
componentRef numberGenerator
eventId numberGenerated
{}
{}
components.gen1.numberGenerator.events.numberGenerated
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
componentId gen1
componentRef numberGenerator
eventId stop
{}
{}
componentId gen1
componentRef numberGenerator
eventId numberGenerated
{}
{}
componentId gen2
componentRef numberGenerator
eventId start
{}
{}
componentId gen2
componentRef numberGenerator
eventId stop
{}
{}
componentId gen2
componentRef numberGenerator
eventId numberGenerated
{}
{}
componentId multi
componentRef numberMultiplier
eventId numberMultiplied
{}
{}
componentId multi
componentRef numberMultiplier
eventId firstNumberReceived
{}
{}
componentId multi
componentRef numberMultiplier
eventId secondNumberReceived
{}
{}
components.multi.numberMultiplier.events.secondNumberReceived
fromParts [
  'components',
  'gen1',
  'numberGenerator',
  'events',
  'numberGenerated'
]
toParts [
  'components',
  'multi',
  'numberMultiplier',
  'events',
  'secondNumberReceived'
]
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
componentId gen1
componentRef numberGenerator
eventId start
{}
{}
componentId gen1
componentRef numberGenerator
eventId stop
{}
{}
componentId gen1
componentRef numberGenerator
eventId numberGenerated
{}
{}
componentId gen2
componentRef numberGenerator
eventId start
{}
{}
componentId gen2
componentRef numberGenerator
eventId stop
{}
{}
componentId gen2
componentRef numberGenerator
eventId numberGenerated
{}
{}
componentId multi
componentRef numberMultiplier
eventId numberMultiplied
{}
{}
components.multi.numberMultiplier.events.numberMultiplied
componentId main
componentRef eventTrigger
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId initializeMachine
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId start
{}
{}
componentId jsm1
componentRef jobStateMachine
eventId finish
{}
{}
components.jsm1.jobStateMachine.events.finish
fromParts [
  'components',
  'multi',
  'numberMultiplier',
  'events',
  'numberMultiplied'
]
toParts [ 'components', 'jsm1', 'jobStateMachine', 'events', 'finish' ]
code {
  id: 'example-flow',
  components: [
    {
      componentId: 'main',
      componentRef: 'eventTrigger',
      init: undefined
    },
    {
      componentId: 'sm1',
      componentRef: 'stateMachine',
      init: [Object]
    },
    {
      componentId: 'jsm1',
      componentRef: 'jobStateMachine',
      init: undefined
    },
    {
      componentId: 'gen1',
      componentRef: 'numberGenerator',
      init: undefined
    },
    {
      componentId: 'gen2',
      componentRef: 'numberGenerator',
      init: undefined
    },
    {
      componentId: 'multi',
      componentRef: 'numberMultiplier',
      init: undefined
    }
  ],
  connections: [
    {
      fromFlow: 'example-flow',
      fromComponent: 'main',
      fromEvent: 'initializeMachine',
      toFlow: 'example-flow',
      toComponent: 'jsm1',
      toEvent: 'initializeMachine'
    },
    {
      fromFlow: 'example-flow',
      fromComponent: 'jsm1',
      fromEvent: 'start',
      toFlow: 'example-flow',
      toComponent: 'gen1',
      toEvent: 'start'
    },
    {
      fromFlow: 'example-flow',
      fromComponent: 'jsm1',
      fromEvent: 'start',
      toFlow: 'example-flow',
      toComponent: 'gen1',
      toEvent: 'start'
    },
    {
      fromFlow: 'example-flow',
      fromComponent: 'gen1',
      fromEvent: 'numberGenerated',
      toFlow: 'example-flow',
      toComponent: 'multi',
      toEvent: 'firstNumberReceived'
    },
    {
      fromFlow: 'example-flow',
      fromComponent: 'gen1',
      fromEvent: 'numberGenerated',
      toFlow: 'example-flow',
      toComponent: 'multi',
      toEvent: 'secondNumberReceived'
    },
    {
      fromFlow: 'example-flow',
      fromComponent: 'multi',
      fromEvent: 'numberMultiplied',
      toFlow: 'example-flow',
      toComponent: 'jsm1',
      toEvent: 'finish'
    }
  ]
}
[32m[Nest] 1276221  - [39m08/29/2024, 12:52:31 AM [32m    LOG[39m [38;5;3m[NestFactory] [39m[32mStarting Nest application...[39m
[32m[Nest] 1276221  - [39m08/29/2024, 12:52:31 AM [32m    LOG[39m [38;5;3m[AmqpConnection] [39m[32mTrying to connect to RabbitMQ broker (default)[39m
[32m[Nest] 1276221  - [39m08/29/2024, 12:52:31 AM [32m    LOG[39m [38;5;3m[RabbitMQModule] [39m[32mSuccessfully connected to RabbitMQ[39m
[32m[Nest] 1276221  - [39m08/29/2024, 12:52:31 AM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mDiscoveryModule dependencies initialized[39m[38;5;3m +7ms[39m
[32m[Nest] 1276221  - [39m08/29/2024, 12:52:31 AM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mRabbitMQModule dependencies initialized[39m[38;5;3m +1ms[39m
[32m[Nest] 1276221  - [39m08/29/2024, 12:52:31 AM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mAppModule dependencies initialized[39m[38;5;3m +0ms[39m
[2024-08-29T05:52:31.641Z] [LOG] [Bootstrap] Starting main application...
[2024-08-29T05:52:31.642Z] [LOG] [Bootstrap] [NestFactory] Starting Nest application...
[2024-08-29T05:52:31.644Z] [LOG] [Bootstrap] [AmqpConnection] Trying to connect to RabbitMQ broker (default)
[2024-08-29T05:52:31.645Z] [LOG] [Bootstrap] [RabbitMQModule] Successfully connected to RabbitMQ
[2024-08-29T05:52:31.645Z] [LOG] [Bootstrap] [InstanceLoader] DiscoveryModule dependencies initialized
[2024-08-29T05:52:31.646Z] [LOG] [Bootstrap] [InstanceLoader] RabbitMQModule dependencies initialized
[2024-08-29T05:52:31.646Z] [LOG] [Bootstrap] [InstanceLoader] AppModule dependencies initialized
[2024-08-29T05:52:31.653Z] [LOG] [Bootstrap] [WebSocketsController] EventTriggerComponent subscribed to the "client-event" message
[2024-08-29T05:52:31.653Z] [LOG] [Bootstrap] [WebSocketsController] NumberGeneratorComponent subscribed to the "client-event" message
[2024-08-29T05:52:31.653Z] [LOG] [Bootstrap] [WebSocketsController] NumberMultiplierComponent subscribed to the "client-event" message
[2024-08-29T05:52:31.653Z] [LOG] [Bootstrap] [WebSocketsController] StateMachineComponent subscribed to the "client-event" message
[2024-08-29T05:52:31.654Z] [LOG] [Bootstrap] [WebSocketsController] JobStateMachineComponent subscribed to the "client-event" message
[2024-08-29T05:52:31.655Z] [LOG] [Bootstrap] [RoutesResolver] AppController {/}:
[2024-08-29T05:52:31.656Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/, GET} route
[2024-08-29T05:52:31.656Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/document, GET} route
[2024-08-29T05:52:31.656Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/documentComponent/:flowId/:componentId/:swimlaneId, GET} route
[2024-08-29T05:52:31.656Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/documentConnections/:flowId/:componentId/:portId/:swimlaneId, GET} route
[2024-08-29T05:52:31.657Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/logger, GET} route
[2024-08-29T05:52:31.657Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/trigger-event/:flowComponentEvent, POST} route
[2024-08-29T05:52:31.658Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724910751644
[2024-08-29T05:52:31.658Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724910751644
[2024-08-29T05:52:31.658Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724910751644
[2024-08-29T05:52:31.658Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724910751644
[2024-08-29T05:52:31.658Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.component-1724910751644
[2024-08-29T05:52:31.658Z] [LOG] [Bootstrap] [RabbitMQModule] Initializing RabbitMQ Handlers
[2024-08-29T05:52:31.660Z] [LOG] [Bootstrap] [RabbitMQModule] Registering rabbitmq handlers from EventProcessor
[2024-08-29T05:52:31.660Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.handleComponentEvent {subscribe} -> flow_exchange::componentEvent::component_event_queue
[2024-08-29T05:52:31.660Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.createConnection {subscribe} -> flow_exchange::createConnection::create_connection_queue
[2024-08-29T05:52:31.660Z] [LOG] [Bootstrap] [RabbitMQModule] Initializing RabbitMQ Handlers
[2024-08-29T05:52:31.661Z] [LOG] [Bootstrap] [RabbitMQModule] Registering rabbitmq handlers from EventProcessor
[2024-08-29T05:52:31.661Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.handleComponentEvent {subscribe} -> flow_exchange::componentEvent::component_event_queue
[2024-08-29T05:52:31.661Z] [LOG] [Bootstrap] [RabbitMQModule] EventProcessor.createConnection {subscribe} -> flow_exchange::createConnection::create_connection_queue
[2024-08-29T05:52:31.661Z] [LOG] [Bootstrap] [NestApplication] Nest application successfully started
[2024-08-29T05:52:31.661Z] [LOG] [Bootstrap] Starting flow execution...
[2024-08-29T05:52:31.661Z] [LOG] [Bootstrap] [FlowExecutorService] Executing flow: example-flow
[2024-08-29T05:52:31.661Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: main.initializeMachine -> jsm1.initializeMachine
[2024-08-29T05:52:31.663Z] [LOG] [Bootstrap] Application is running on: http://localhost:3000
[2024-08-29T05:52:31.714Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected to RabbitMQ broker (default)
[2024-08-29T05:52:31.716Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected to RabbitMQ broker (default)
[2024-08-29T05:52:31.721Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected a RabbitMQ channel "AmqpConnection"
[2024-08-29T05:52:31.722Z] [LOG] [Bootstrap] [AmqpConnection] Successfully connected a RabbitMQ channel "AmqpConnection"
[2024-08-29T05:52:31.722Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: jsm1.start -> gen1.start
[2024-08-29T05:52:31.723Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.main.initializeMachine -> jsm1.initializeMachine
[2024-08-29T05:52:31.723Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.main.initializeMachine -> jsm1.initializeMachine
[2024-08-29T05:52:31.723Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-29T05:52:31.724Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.jsm1.start -> gen1.start
[2024-08-29T05:52:31.724Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.jsm1.start -> gen1.start
[2024-08-29T05:52:31.724Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: jsm1.start -> gen1.start
[2024-08-29T05:52:31.724Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-29T05:52:31.724Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: gen1.numberGenerated -> multi.firstNumberReceived
[2024-08-29T05:52:31.724Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.jsm1.start -> gen1.start
[2024-08-29T05:52:31.724Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.jsm1.start -> gen1.start
[2024-08-29T05:52:31.724Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-29T05:52:31.767Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.gen1.numberGenerated -> multi.firstNumberReceived
[2024-08-29T05:52:31.767Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.gen1.numberGenerated -> multi.firstNumberReceived
[2024-08-29T05:52:31.767Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: gen1.numberGenerated -> multi.secondNumberReceived
[2024-08-29T05:52:31.768Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-29T05:52:31.768Z] [LOG] [Bootstrap] [FlowExecutorService] Creating connection: multi.numberMultiplied -> jsm1.finish
[2024-08-29T05:52:31.768Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.gen1.numberGenerated -> multi.secondNumberReceived
[2024-08-29T05:52:31.768Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.gen1.numberGenerated -> multi.secondNumberReceived
[2024-08-29T05:52:31.769Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-29T05:52:31.810Z] [LOG] [Bootstrap] [EventProcessor] Received createConnection: example-flow.multi.numberMultiplied -> jsm1.finish
[2024-08-29T05:52:31.810Z] [LOG] [Bootstrap] [EventProcessor] Connection created: example-flow.multi.numberMultiplied -> jsm1.finish
[2024-08-29T05:52:31.810Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: main (eventTrigger) for flow: example-flow
[2024-08-29T05:52:31.811Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.main
[2024-08-29T05:52:31.811Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: sm1 (stateMachine) for flow: example-flow
[2024-08-29T05:52:31.811Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.sm1
[2024-08-29T05:52:31.811Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: jsm1 (jobStateMachine) for flow: example-flow
[2024-08-29T05:52:31.811Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.jsm1
[2024-08-29T05:52:31.811Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: gen1 (numberGenerator) for flow: example-flow
[2024-08-29T05:52:31.811Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.gen1
[2024-08-29T05:52:31.811Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: gen2 (numberGenerator) for flow: example-flow
[2024-08-29T05:52:31.811Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.gen2
[2024-08-29T05:52:31.811Z] [LOG] [Bootstrap] [FlowExecutorService] Constructing component: multi (numberMultiplier) for flow: example-flow
[2024-08-29T05:52:31.811Z] [LOG] [Bootstrap] [ComponentRegistry] Registering component: example-flow.multi
[2024-08-29T05:52:31.811Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: main (main) for flow: example-flow
[2024-08-29T05:52:31.811Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: sm1 (sm1) for flow: example-flow
[2024-08-29T05:52:31.811Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: jsm1 (jsm1) for flow: example-flow
[2024-08-29T05:52:31.811Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: gen1 (gen1) for flow: example-flow
[2024-08-29T05:52:31.811Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: gen2 (gen2) for flow: example-flow
[2024-08-29T05:52:31.811Z] [LOG] [Bootstrap] [FlowExecutorService] Sync connections for component: multi (multi) for flow: example-flow
[2024-08-29T05:52:31.811Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: main (eventTrigger) for flow: example-flow
[2024-08-29T05:52:31.811Z] [WARN] [Bootstrap] [AmqpConnection] Received response: [{"success":true,"message":"Connection created successfully"}] from subscribe handler [createConnection]. Subscribe handlers should only return void
[2024-08-29T05:52:31.812Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: sm1 (stateMachine) for flow: example-flow
[2024-08-29T05:52:31.812Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.main.init] data: undefined
[2024-08-29T05:52:31.812Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: main
[2024-08-29T05:52:31.854Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.sm1.init] data: {"initialState":"idle","states":["idle","running","paused","finished"],"transitions":{"idle":{"start":"running"},"running":{"pause":"paused","finish":"finished"},"paused":{"resume":"running","finish":"finished"},"finished":{"reset":"idle"}}}
[2024-08-29T05:52:31.854Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: sm1
[2024-08-29T05:52:31.855Z] [LOG] [example-flow.sm1] Handling event: init
[2024-08-29T05:52:31.855Z] [LOG] [example-flow.sm1] State machine initialized with initial state: idle
[2024-08-29T05:52:31.855Z] [LOG] [example-flow.sm1] Publishing: example-flow.sm1.stateChanged -> [object Object]
[2024-08-29T05:52:31.855Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: jsm1 (jobStateMachine) for flow: example-flow
[2024-08-29T05:52:31.857Z] [ERROR] [example-flow.sm1] Error rendering EJS template: ENOENT: no such file or directory, open '/home/travis/Projects/flow-based-programming/dist/templates/state-machine.ejs'
[2024-08-29T05:52:31.857Z] [LOG] [example-flow.sm1] <div>Error rendering content</div>
[2024-08-29T05:52:31.858Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.jsm1.init] data: undefined
[2024-08-29T05:52:31.858Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: jsm1
[2024-08-29T05:52:31.858Z] [LOG] [example-flow.jsm1] Handling event: init
[2024-08-29T05:52:31.858Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: gen1 (numberGenerator) for flow: example-flow
[2024-08-29T05:52:31.858Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.sm1.stateChanged] data: {"currentState":"idle"}
[2024-08-29T05:52:31.858Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: sm1
[2024-08-29T05:52:31.858Z] [LOG] [example-flow.sm1] Handling event: stateChanged
[2024-08-29T05:52:31.858Z] [WARN] [example-flow.sm1] Unknown event: stateChanged
[2024-08-29T05:52:31.900Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: gen2 (numberGenerator) for flow: example-flow
[2024-08-29T05:52:31.901Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen1.init] data: undefined
[2024-08-29T05:52:31.901Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen1
[2024-08-29T05:52:31.901Z] [LOG] [example-flow.gen1] NumberGenerator (example-flow) handling event: init
[2024-08-29T05:52:31.901Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.gen2.init] data: undefined
[2024-08-29T05:52:31.901Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: gen2
[2024-08-29T05:52:31.901Z] [LOG] [example-flow.gen2] NumberGenerator (example-flow) handling event: init
[2024-08-29T05:52:31.901Z] [LOG] [Bootstrap] [FlowExecutorService] Initializing component: multi (numberMultiplier) for flow: example-flow
[2024-08-29T05:52:31.902Z] [LOG] [Bootstrap] [EventProcessor] [handleComponentEvent] [example-flow.multi.init] data: undefined
[2024-08-29T05:52:31.902Z] [LOG] [Bootstrap] [EventProcessor] Passing event to component: multi
[2024-08-29T05:52:31.902Z] [LOG] [example-flow.multi] NumberMultiplier handling event: init undefined
(node:1276221) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 disconnect listeners added to [Socket]. MaxListeners is 10. Use emitter.setMaxListeners() to increase limit
(Use `node --trace-warnings ...` to show where the warning was created)
